diff --git a/group/error_group_test.go b/group/error_group_test.go
index f896db7..68aea49 100644
--- a/group/error_group_test.go
+++ b/group/error_group_test.go
@@ -13,6 +13,7 @@ import (
 
 func TestErrorGroup(t *testing.T) {
 	t.Parallel()
+
 	err1 := errors.New("err1")
 	err2 := errors.New("err2")
 
diff --git a/group/iter_test.go b/group/iter_test.go
new file mode 100644
index 0000000..cbbf0b6
--- /dev/null
+++ b/group/iter_test.go
@@ -0,0 +1,122 @@
+package group
+
+import (
+	"strconv"
+	"testing"
+
+	"github.com/stretchr/testify/require"
+
+	"github.com/camdencheek/conc"
+)
+
+func TestForEachIdx(t *testing.T) {
+	t.Parallel()
+
+	t.Run("empty", func(t *testing.T) {
+		f := func() {
+			ints := []int{}
+			ForEachIdx(ints, func(i int, val *int) {
+				panic("this should never be called")
+			})
+		}
+		require.NotPanics(t, f)
+	})
+
+	t.Run("panic is propagated", func(t *testing.T) {
+		f := func() {
+			ints := []int{1}
+			ForEachIdx(ints, func(i int, val *int) {
+				panic("super bad thing happened")
+			})
+		}
+		require.Panics(t, f)
+	})
+
+	t.Run("mutating inputs is fine", func(t *testing.T) {
+		ints := []int{1, 2, 3, 4, 5}
+		ForEachIdx(ints, func(i int, val *int) {
+			*val += 1
+		})
+		require.Equal(t, []int{2, 3, 4, 5, 6}, ints)
+	})
+
+	t.Run("huge inputs", func(t *testing.T) {
+		ints := make([]int, 10000)
+		ForEachIdx(ints, func(i int, val *int) {
+			*val = i
+		})
+		expected := make([]int, 10000)
+		for i := 0; i < 10000; i++ {
+			expected[i] = i
+		}
+		require.Equal(t, expected, ints)
+	})
+}
+
+func BenchmarkForEachIdx(b *testing.B) {
+	b.Run("simple mutation", func(b *testing.B) {
+		for _, n := range []int{10, 1000, 1000000} {
+			arr := make([]int, n)
+			b.Run(strconv.Itoa(n), func(b *testing.B) {
+				b.Run("baseline", func(b *testing.B) {
+					for i := 0; i < b.N; i++ {
+						for j := 0; j < len(arr); j++ {
+							arr[j] = j
+						}
+					}
+				})
+
+				b.Run("parallel", func(b *testing.B) {
+					for i := 0; i < b.N; i++ {
+						ForEachIdx(arr, func(i int, val *int) {
+							*val = i
+						})
+					}
+				})
+
+				g := New()
+				b.Run("share group", func(b *testing.B) {
+					for i := 0; i < b.N; i++ {
+						conc.ForEachIdxIn(g, arr, func(i int, val *int) {
+							*val = i
+						})
+					}
+				})
+			})
+		}
+	})
+}
+
+func BenchmarkForEach(b *testing.B) {
+	b.Run("simple mutation", func(b *testing.B) {
+		for _, n := range []int{10, 1000, 1000000} {
+			arr := make([]int, n)
+			b.Run(strconv.Itoa(n), func(b *testing.B) {
+				b.Run("baseline", func(b *testing.B) {
+					for i := 0; i < b.N; i++ {
+						for j := 0; j < len(arr); j++ {
+							arr[j] = j
+						}
+					}
+				})
+
+				b.Run("parallel", func(b *testing.B) {
+					for i := 0; i < b.N; i++ {
+						ForEach(arr, func(val *int) {
+							*val = i
+						})
+					}
+				})
+
+				g := New()
+				b.Run("share group", func(b *testing.B) {
+					for i := 0; i < b.N; i++ {
+						conc.ForEachIn(g, arr, func(val *int) {
+							*val = i
+						})
+					}
+				})
+			})
+		}
+	})
+}
diff --git a/pool/iter_test.go b/pool/iter_test.go
new file mode 100644
index 0000000..1e1f1a2
--- /dev/null
+++ b/pool/iter_test.go
@@ -0,0 +1,76 @@
+package pool
+
+import (
+	"strconv"
+	"testing"
+
+	"github.com/camdencheek/conc"
+)
+
+func BenchmarkForEachIdx(b *testing.B) {
+	b.Run("simple mutation", func(b *testing.B) {
+		for _, n := range []int{10, 1000, 1000000} {
+			arr := make([]int, n)
+			b.Run(strconv.Itoa(n), func(b *testing.B) {
+				b.Run("baseline", func(b *testing.B) {
+					for i := 0; i < b.N; i++ {
+						for j := 0; j < len(arr); j++ {
+							arr[j] = j
+						}
+					}
+				})
+
+				b.Run("parallel", func(b *testing.B) {
+					for i := 0; i < b.N; i++ {
+						ForEachIdx(arr, func(i int, val *int) {
+							*val = i
+						})
+					}
+				})
+
+				g := New()
+				b.Run("share group", func(b *testing.B) {
+					for i := 0; i < b.N; i++ {
+						conc.ForEachIdxIn(g, arr, func(i int, val *int) {
+							*val = i
+						})
+					}
+				})
+			})
+		}
+	})
+}
+
+func BenchmarkForEach(b *testing.B) {
+	b.Run("simple mutation", func(b *testing.B) {
+		for _, n := range []int{10, 1000, 1000000} {
+			arr := make([]int, n)
+			b.Run(strconv.Itoa(n), func(b *testing.B) {
+				b.Run("baseline", func(b *testing.B) {
+					for i := 0; i < b.N; i++ {
+						for j := 0; j < len(arr); j++ {
+							arr[j] = j
+						}
+					}
+				})
+
+				b.Run("parallel", func(b *testing.B) {
+					for i := 0; i < b.N; i++ {
+						ForEach(arr, func(val *int) {
+							*val = i
+						})
+					}
+				})
+
+				g := New()
+				b.Run("share group", func(b *testing.B) {
+					for i := 0; i < b.N; i++ {
+						conc.ForEachIn(g, arr, func(val *int) {
+							*val = i
+						})
+					}
+				})
+			})
+		}
+	})
+}
diff --git a/waitgroup_test.go b/waitgroup_test.go
new file mode 100644
index 0000000..5fec4dc
--- /dev/null
+++ b/waitgroup_test.go
@@ -0,0 +1,56 @@
+package conc
+
+import (
+	"sync/atomic"
+	"testing"
+
+	"github.com/stretchr/testify/require"
+)
+
+func TestWaitgroup(t *testing.T) {
+	t.Parallel()
+
+	t.Run("all spawned run", func(t *testing.T) {
+		var count atomic.Int64
+		var wg WaitGroup
+		for i := 0; i < 100; i++ {
+			wg.Go(func() {
+				count.Add(1)
+			})
+		}
+		wg.Wait()
+		require.Equal(t, count.Load(), int64(100))
+	})
+
+	t.Run("panic", func(t *testing.T) {
+		t.Run("is propagated", func(t *testing.T) {
+			var wg WaitGroup
+			wg.Go(func() {
+				panic("super bad thing")
+			})
+			require.Panics(t, wg.Wait)
+		})
+
+		t.Run("one is propagated", func(t *testing.T) {
+			var wg WaitGroup
+			wg.Go(func() {
+				panic("super bad thing")
+			})
+			wg.Go(func() {
+				panic("super badder thing")
+			})
+			require.Panics(t, wg.Wait)
+		})
+
+		t.Run("nonpanics do not overwrite panic", func(t *testing.T) {
+			var wg WaitGroup
+			wg.Go(func() {
+				panic("super bad thing")
+			})
+			for i := 0; i < 10; i++ {
+				wg.Go(func() {})
+			}
+			require.Panics(t, wg.Wait)
+		})
+	})
+}
