diff --git a/.github/workflows/preconditions.yml b/.github/workflows/preconditions.yml
index 74a1417..abf8b7f 100644
--- a/.github/workflows/preconditions.yml
+++ b/.github/workflows/preconditions.yml
@@ -36,9 +36,12 @@ jobs:
           cache: 'maven'
       - name: Setup Go
         uses: actions/setup-go@44e221478fc6847752e5c574fc7a7b3247b00fbf
+        with:
+          go-version: '1.17'
       - name: Get Changed Files
+        id: changed-files
         uses: tj-actions/changed-files@61ee456a9d0f512e7ecfdf28863634c97dae2d16
         with:
           separator: ','
       - name: Run Spotless
-        run: go run ./cicd/cmd/run-spotless.go --changed-files="${{ steps.changed-files.outputs.all_changed_and_modified_files }}"
+        run: go run ./cicd/cmd/run-spotless.go --changed-files="${{ steps.changed-files.outputs.all_changed_files }}"
diff --git a/cicd/cmd/run-spotless.go b/cicd/cmd/run-spotless.go
deleted file mode 100644
index 207d5b4..0000000
--- a/cicd/cmd/run-spotless.go
+++ /dev/null
@@ -1,67 +0,0 @@
-/*
- * Copyright (C) 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-
-package main
-
-import (
-	"flag"
-	"fmt"
-	"log"
-	"strings"
-
-	"github.com/GoogleCloudPlatform/DataflowTemplates/cicd/op"
-	"github.com/GoogleCloudPlatform/DataflowTemplates/cicd/repo"
-)
-
-const (
-	SpotlessCommand = "spotless:check"
-)
-
-func main() {
-	changed := flag.String("changed-files", "", "List of changed files as a comma-separated string")
-	flag.Parse()
-
-	if len(*changed) == 0 {
-		log.Print("No changed files passed. This is probably an error, but we're assuming it isn't just in case")
-		return
-	}
-	log.Printf("Received changed files: %s", *changed)
-
-	s := strings.Split(*changed, ",")
-	modules := repo.GetModulesForPaths(s)
-
-	var fullErr error
-	if _, ok := modules[repo.ClassicRoot]; ok {
-		if err := op.RunMavenOnPom(repo.ClassicRoot, SpotlessCommand); err != nil {
-			fullErr = err
-		}
-	}
-	if flex, ok := modules[repo.FlexRoot]; ok {
-		for _, m := range flex {
-			if len(m) > 0 { // Zero length represents the root, which has no Java code
-				if err := op.RunMavenOnModule(repo.FlexRoot, SpotlessCommand, m); err != nil && fullErr != nil {
-					fullErr = err
-				} else if err != nil {
-					fullErr = fmt.Errorf("%w\n%v", fullErr, err)
-				}
-			}
-		}
-	}
-
-	if fullErr != nil {
-		log.Fatal("There were spotless errors. Check the output from the commands.")
-	}
-}
diff --git a/cicd/cmd/run-spotless/main.go b/cicd/cmd/run-spotless/main.go
new file mode 100644
index 0000000..9b39ec4
--- /dev/null
+++ b/cicd/cmd/run-spotless/main.go
@@ -0,0 +1,67 @@
+/*
+ * Copyright (C) 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package main
+
+import (
+	"flag"
+	"fmt"
+	"log"
+	"strings"
+
+	"github.com/GoogleCloudPlatform/DataflowTemplates/cicd/internal/op"
+	"github.com/GoogleCloudPlatform/DataflowTemplates/cicd/internal/repo"
+)
+
+const (
+	SpotlessCommand = "spotless:check"
+)
+
+func main() {
+	changed := flag.String("changed-files", "", "List of changed files as a comma-separated string")
+	flag.Parse()
+
+	if len(*changed) == 0 {
+		log.Print("No changed files passed. This is probably an error, but we're assuming it isn't just in case")
+		return
+	}
+	log.Printf("Received changed files: %s", *changed)
+
+	s := strings.Split(*changed, ",")
+	modules := repo.GetModulesForPaths(s)
+
+	var fullErr error
+	if _, ok := modules[repo.ClassicRoot]; ok {
+		if err := op.RunMavenOnPom(repo.ClassicRoot, SpotlessCommand); err != nil {
+			fullErr = err
+		}
+	}
+	if flex, ok := modules[repo.FlexRoot]; ok {
+		for _, m := range flex {
+			if len(m) > 0 { // Zero length represents the root, which has no Java code
+				if err := op.RunMavenOnModule(repo.FlexRoot, SpotlessCommand, m); err != nil && fullErr != nil {
+					fullErr = err
+				} else if err != nil {
+					fullErr = fmt.Errorf("%w\n%v", fullErr, err)
+				}
+			}
+		}
+	}
+
+	if fullErr != nil {
+		log.Fatal("There were spotless errors. Check the output from the commands.")
+	}
+}
diff --git a/cicd/go.mod b/cicd/go.mod
new file mode 100644
index 0000000..6c6c815
--- /dev/null
+++ b/cicd/go.mod
@@ -0,0 +1,3 @@
+module github.com/GoogleCloudPlatform/DataflowTemplates/cicd
+
+go 1.17
diff --git a/cicd/internal/op/maven.go b/cicd/internal/op/maven.go
new file mode 100644
index 0000000..47ac88a
--- /dev/null
+++ b/cicd/internal/op/maven.go
@@ -0,0 +1,36 @@
+/*
+ * Copyright (C) 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package op
+
+import (
+	"fmt"
+)
+
+// Run the given Maven command on a specified POM file. Considering the input, this is equivalent to:
+//		mvn {cmd} -f {pomDir}/pom.xml {args...}
+func RunMavenOnPom(pomDir string, cmd string, args ...string) error {
+	wa := []string{cmd, "-f", fmt.Sprintf("%s/pom.xml", pomDir)}
+	return RunCmdAndStreamOutput("mvn", append(wa, args...))
+}
+
+// Rung the given Maven command on a specified module. Considering the input, this is equivalent to:
+//		mvn {cmd} -f {pomDir}/pom.xml -pl {module} {args...}
+func RunMavenOnModule(pomDir string, cmd string, module string, args ...string) error {
+	fullArgs := []string{"-pl", module}
+	fullArgs = append(fullArgs, args...)
+	return RunMavenOnPom(pomDir, cmd, fullArgs...)
+}
diff --git a/cicd/internal/op/run-cmd.go b/cicd/internal/op/run-cmd.go
new file mode 100644
index 0000000..44976e1
--- /dev/null
+++ b/cicd/internal/op/run-cmd.go
@@ -0,0 +1,41 @@
+/*
+ * Copyright (C) 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package op
+
+import (
+	"bufio"
+	"fmt"
+	"log"
+	"os/exec"
+	"strings"
+)
+
+// Runs a command and streams the output rather than waiting for it to complete.
+func RunCmdAndStreamOutput(cmd string, args []string) error {
+	log.Printf("Running command: %s %s", cmd, strings.Join(args, " "))
+	op := exec.Command(cmd, args...)
+
+	stdout, _ := op.StdoutPipe()
+	op.Start()
+
+	scanner := bufio.NewScanner(stdout)
+	for scanner.Scan() {
+		fmt.Println(scanner.Text())
+	}
+	
+	return op.Wait()
+}
diff --git a/cicd/internal/repo/modules.go b/cicd/internal/repo/modules.go
new file mode 100644
index 0000000..27f2431
--- /dev/null
+++ b/cicd/internal/repo/modules.go
@@ -0,0 +1,163 @@
+/*
+ * Copyright (C) 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package repo
+
+import (
+	"fmt"
+	"os"
+	"strings"
+)
+
+const (
+	// Roots in relation to the root directory of the repository.
+	ClassicRoot = "."
+	FlexRoot    = "v2"
+)
+
+// Returns a map of roots to their modules. Properties are:
+// 		Key: The root module, equivalent to one of the const values (e.g. ClassicRoot)
+//		Value: All the submodules, sometimes nested under another parent that is also in the slice
+// This could be used in the equivalent command:
+//		mvn x:y -f {key}/pom.xml -pl {value}
+// An empty value indicates no submodules.
+func GetModuleMapping() map[string][]string {
+	return map[string][]string{
+		ClassicRoot: []string{},
+		FlexRoot: []string{
+			"bigquery-to-bigtable",
+			"bigquery-to-parquet",
+			"cdc-parent/cdc-embedded-connector",
+			"cdc-parent/cdc-common",
+			"cdc-parent",
+			"cdc-parent/cdc-agg",
+			"cdc-parent/cdc-change-applier",
+			"common",
+			"datastream-to-sql",
+			"datastream-to-bigquery",
+			"datastream-to-mongodb",
+			"datastream-to-postgres",
+			"datastream-to-spanner",
+			"elasticsearch-common",
+			"file-format-conversion",
+			"googlecloud-to-googlecloud",
+			"googlecloud-to-elasticsearch",
+			"hive-to-bigquery",
+			"kafka-to-bigquery",
+			"kafka-common",
+			"kafka-to-gcs",
+			"kafka-to-pubsub",
+			"kudu-to-bigquery",
+			"pubsub-binary-to-bigquery",
+			"pubsub-cdc-to-bigquery",
+			"pubsub-to-mongodb",
+		},
+	}
+}
+
+type moduleTrieNode struct {
+	value    string
+	children map[rune]*moduleTrieNode
+}
+
+func flexModulesAsTrie() *moduleTrieNode {
+	root := &moduleTrieNode{
+		value:    "",
+		children: make(map[rune]*moduleTrieNode),
+	}
+
+	for _, m := range GetModuleMapping()[FlexRoot] {
+		curr := root
+		for _, r := range m {
+			if _, ok := curr.children[r]; ok {
+				curr = curr.children[r]
+			} else {
+				curr.children[r] = &moduleTrieNode{
+					value:    "",
+					children: make(map[rune]*moduleTrieNode),
+				}
+				curr = curr.children[r]
+			}
+		}
+		curr.value = m
+	}
+
+	return root
+}
+
+func findUniqueFlexModules(paths []string) []string {
+	trie := flexModulesAsTrie()
+	modules := make(map[string]interface{})
+
+	for _, path := range paths {
+		curr := trie
+		var possible *moduleTrieNode
+
+		for _, r := range path {
+			var ok bool
+			curr, ok = curr.children[r]
+			if !ok {
+				break
+			}
+			if curr.value != "" {
+				possible = curr
+			}
+		}
+
+		if possible != nil {
+			modules[possible.value] = nil
+		}
+		// We don't error from not finding anything, since it could be a root-level file
+		// that isn't part of any module.
+	}
+
+	ret := make([]string, len(modules))
+	i := 0
+	for k := range modules {
+		ret[i] = k
+		i += 1
+	}
+
+	return ret
+}
+
+func GetModulesForPaths(paths []string) map[string][]string {
+	if len(paths) == 0 {
+		return make(map[string][]string)
+	}
+
+	m := make(map[string][]string)
+	flex := make([]string, 0)
+
+	v2 := fmt.Sprintf("v2%s", string(os.PathSeparator))
+
+	for _, path := range paths {
+		if strings.HasPrefix(path, v2) {
+			flex = append(flex, strings.TrimPrefix(path, v2))
+		} else {
+			// TODO(zhoufek): Make this more granular, especially separating .github and cicd code
+			// into separate "modules"
+			m[ClassicRoot] = make([]string, 0)
+		}
+	}
+
+	if len(flex) > 0 {
+		// Even if nothing is found, we should still account for v2/ as its own module, since
+		m[FlexRoot] = findUniqueFlexModules(flex)
+	}
+
+	return m
+}
diff --git a/cicd/internal/repo/modules_test.go b/cicd/internal/repo/modules_test.go
new file mode 100644
index 0000000..ec20145
--- /dev/null
+++ b/cicd/internal/repo/modules_test.go
@@ -0,0 +1,78 @@
+/*
+ * Copyright (C) 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package repo
+
+import (
+	"reflect"
+	"testing"
+)
+
+func TestModuleMappingHasAllRoots(t *testing.T) {
+	m := GetModuleMapping()
+	if _, ok := m[ClassicRoot]; !ok {
+		t.Error("Missing Classic root")
+	}
+	if _, ok := m[FlexRoot]; !ok {
+		t.Error("Missing Flex root")
+	}
+}
+
+func TestGetModulesForPaths(t *testing.T) {
+	tests := []struct {
+		input    []string
+		expected map[string][]string
+	}{
+		{
+			input: []string{"src/something", "v2/pubsub-binary-to-bigquery/avro", "src/something-else", "v2/pubsub-binary-to-bigquery/proto"},
+			expected: map[string][]string{
+				ClassicRoot: []string{},
+				FlexRoot:    []string{"pubsub-binary-to-bigquery"},
+			},
+		},
+		{
+			input: []string{"v2/pubsub-cdc-to-bigquery", "v2/pubsub-binary-to-bigquery"},
+			expected: map[string][]string{
+				FlexRoot: []string{"pubsub-cdc-to-bigquery", "pubsub-binary-to-bigquery"},
+			},
+		},
+		{
+			input: []string{"v2/cdc-parent/something", "v2/cdc-parent/cdc-common/something"},
+			expected: map[string][]string{
+				FlexRoot: []string{"cdc-parent", "cdc-parent/cdc-common"},
+			},
+		},
+		{
+			input: []string{"something", "v2/something"},
+			expected: map[string][]string{
+				ClassicRoot: make([]string, 0),
+				FlexRoot:    make([]string, 0),
+			},
+		},
+		{
+			input:    make([]string, 0),
+			expected: make(map[string][]string),
+		},
+	}
+
+	for _, test := range tests {
+		t.Logf("Testing input: %v", test.input)
+		if actual := GetModulesForPaths(test.input); !reflect.DeepEqual(actual, test.expected) {
+			t.Errorf("incorrect results. expected: %v. got: %v", test.expected, actual)
+		}
+		t.Logf("Success")
+	}
+}
diff --git a/cicd/op/maven.go b/cicd/op/maven.go
deleted file mode 100644
index 47ac88a..0000000
--- a/cicd/op/maven.go
+++ /dev/null
@@ -1,36 +0,0 @@
-/*
- * Copyright (C) 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-
-package op
-
-import (
-	"fmt"
-)
-
-// Run the given Maven command on a specified POM file. Considering the input, this is equivalent to:
-//		mvn {cmd} -f {pomDir}/pom.xml {args...}
-func RunMavenOnPom(pomDir string, cmd string, args ...string) error {
-	wa := []string{cmd, "-f", fmt.Sprintf("%s/pom.xml", pomDir)}
-	return RunCmdAndStreamOutput("mvn", append(wa, args...))
-}
-
-// Rung the given Maven command on a specified module. Considering the input, this is equivalent to:
-//		mvn {cmd} -f {pomDir}/pom.xml -pl {module} {args...}
-func RunMavenOnModule(pomDir string, cmd string, module string, args ...string) error {
-	fullArgs := []string{"-pl", module}
-	fullArgs = append(fullArgs, args...)
-	return RunMavenOnPom(pomDir, cmd, fullArgs...)
-}
diff --git a/cicd/op/run-cmd.go b/cicd/op/run-cmd.go
deleted file mode 100644
index 44976e1..0000000
--- a/cicd/op/run-cmd.go
+++ /dev/null
@@ -1,41 +0,0 @@
-/*
- * Copyright (C) 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-
-package op
-
-import (
-	"bufio"
-	"fmt"
-	"log"
-	"os/exec"
-	"strings"
-)
-
-// Runs a command and streams the output rather than waiting for it to complete.
-func RunCmdAndStreamOutput(cmd string, args []string) error {
-	log.Printf("Running command: %s %s", cmd, strings.Join(args, " "))
-	op := exec.Command(cmd, args...)
-
-	stdout, _ := op.StdoutPipe()
-	op.Start()
-
-	scanner := bufio.NewScanner(stdout)
-	for scanner.Scan() {
-		fmt.Println(scanner.Text())
-	}
-	
-	return op.Wait()
-}
diff --git a/cicd/repo/modules.go b/cicd/repo/modules.go
deleted file mode 100644
index 27f2431..0000000
--- a/cicd/repo/modules.go
+++ /dev/null
@@ -1,163 +0,0 @@
-/*
- * Copyright (C) 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-
-package repo
-
-import (
-	"fmt"
-	"os"
-	"strings"
-)
-
-const (
-	// Roots in relation to the root directory of the repository.
-	ClassicRoot = "."
-	FlexRoot    = "v2"
-)
-
-// Returns a map of roots to their modules. Properties are:
-// 		Key: The root module, equivalent to one of the const values (e.g. ClassicRoot)
-//		Value: All the submodules, sometimes nested under another parent that is also in the slice
-// This could be used in the equivalent command:
-//		mvn x:y -f {key}/pom.xml -pl {value}
-// An empty value indicates no submodules.
-func GetModuleMapping() map[string][]string {
-	return map[string][]string{
-		ClassicRoot: []string{},
-		FlexRoot: []string{
-			"bigquery-to-bigtable",
-			"bigquery-to-parquet",
-			"cdc-parent/cdc-embedded-connector",
-			"cdc-parent/cdc-common",
-			"cdc-parent",
-			"cdc-parent/cdc-agg",
-			"cdc-parent/cdc-change-applier",
-			"common",
-			"datastream-to-sql",
-			"datastream-to-bigquery",
-			"datastream-to-mongodb",
-			"datastream-to-postgres",
-			"datastream-to-spanner",
-			"elasticsearch-common",
-			"file-format-conversion",
-			"googlecloud-to-googlecloud",
-			"googlecloud-to-elasticsearch",
-			"hive-to-bigquery",
-			"kafka-to-bigquery",
-			"kafka-common",
-			"kafka-to-gcs",
-			"kafka-to-pubsub",
-			"kudu-to-bigquery",
-			"pubsub-binary-to-bigquery",
-			"pubsub-cdc-to-bigquery",
-			"pubsub-to-mongodb",
-		},
-	}
-}
-
-type moduleTrieNode struct {
-	value    string
-	children map[rune]*moduleTrieNode
-}
-
-func flexModulesAsTrie() *moduleTrieNode {
-	root := &moduleTrieNode{
-		value:    "",
-		children: make(map[rune]*moduleTrieNode),
-	}
-
-	for _, m := range GetModuleMapping()[FlexRoot] {
-		curr := root
-		for _, r := range m {
-			if _, ok := curr.children[r]; ok {
-				curr = curr.children[r]
-			} else {
-				curr.children[r] = &moduleTrieNode{
-					value:    "",
-					children: make(map[rune]*moduleTrieNode),
-				}
-				curr = curr.children[r]
-			}
-		}
-		curr.value = m
-	}
-
-	return root
-}
-
-func findUniqueFlexModules(paths []string) []string {
-	trie := flexModulesAsTrie()
-	modules := make(map[string]interface{})
-
-	for _, path := range paths {
-		curr := trie
-		var possible *moduleTrieNode
-
-		for _, r := range path {
-			var ok bool
-			curr, ok = curr.children[r]
-			if !ok {
-				break
-			}
-			if curr.value != "" {
-				possible = curr
-			}
-		}
-
-		if possible != nil {
-			modules[possible.value] = nil
-		}
-		// We don't error from not finding anything, since it could be a root-level file
-		// that isn't part of any module.
-	}
-
-	ret := make([]string, len(modules))
-	i := 0
-	for k := range modules {
-		ret[i] = k
-		i += 1
-	}
-
-	return ret
-}
-
-func GetModulesForPaths(paths []string) map[string][]string {
-	if len(paths) == 0 {
-		return make(map[string][]string)
-	}
-
-	m := make(map[string][]string)
-	flex := make([]string, 0)
-
-	v2 := fmt.Sprintf("v2%s", string(os.PathSeparator))
-
-	for _, path := range paths {
-		if strings.HasPrefix(path, v2) {
-			flex = append(flex, strings.TrimPrefix(path, v2))
-		} else {
-			// TODO(zhoufek): Make this more granular, especially separating .github and cicd code
-			// into separate "modules"
-			m[ClassicRoot] = make([]string, 0)
-		}
-	}
-
-	if len(flex) > 0 {
-		// Even if nothing is found, we should still account for v2/ as its own module, since
-		m[FlexRoot] = findUniqueFlexModules(flex)
-	}
-
-	return m
-}
diff --git a/cicd/repo/modules_test.go b/cicd/repo/modules_test.go
deleted file mode 100644
index ec20145..0000000
--- a/cicd/repo/modules_test.go
+++ /dev/null
@@ -1,78 +0,0 @@
-/*
- * Copyright (C) 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-
-package repo
-
-import (
-	"reflect"
-	"testing"
-)
-
-func TestModuleMappingHasAllRoots(t *testing.T) {
-	m := GetModuleMapping()
-	if _, ok := m[ClassicRoot]; !ok {
-		t.Error("Missing Classic root")
-	}
-	if _, ok := m[FlexRoot]; !ok {
-		t.Error("Missing Flex root")
-	}
-}
-
-func TestGetModulesForPaths(t *testing.T) {
-	tests := []struct {
-		input    []string
-		expected map[string][]string
-	}{
-		{
-			input: []string{"src/something", "v2/pubsub-binary-to-bigquery/avro", "src/something-else", "v2/pubsub-binary-to-bigquery/proto"},
-			expected: map[string][]string{
-				ClassicRoot: []string{},
-				FlexRoot:    []string{"pubsub-binary-to-bigquery"},
-			},
-		},
-		{
-			input: []string{"v2/pubsub-cdc-to-bigquery", "v2/pubsub-binary-to-bigquery"},
-			expected: map[string][]string{
-				FlexRoot: []string{"pubsub-cdc-to-bigquery", "pubsub-binary-to-bigquery"},
-			},
-		},
-		{
-			input: []string{"v2/cdc-parent/something", "v2/cdc-parent/cdc-common/something"},
-			expected: map[string][]string{
-				FlexRoot: []string{"cdc-parent", "cdc-parent/cdc-common"},
-			},
-		},
-		{
-			input: []string{"something", "v2/something"},
-			expected: map[string][]string{
-				ClassicRoot: make([]string, 0),
-				FlexRoot:    make([]string, 0),
-			},
-		},
-		{
-			input:    make([]string, 0),
-			expected: make(map[string][]string),
-		},
-	}
-
-	for _, test := range tests {
-		t.Logf("Testing input: %v", test.input)
-		if actual := GetModulesForPaths(test.input); !reflect.DeepEqual(actual, test.expected) {
-			t.Errorf("incorrect results. expected: %v. got: %v", test.expected, actual)
-		}
-		t.Logf("Success")
-	}
-}
