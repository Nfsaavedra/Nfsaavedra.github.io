diff --git a/.github/workflows/build-test.yml b/.github/workflows/build-test.yml
index 8ca8280..61b9c6f 100644
--- a/.github/workflows/build-test.yml
+++ b/.github/workflows/build-test.yml
@@ -129,6 +129,8 @@ jobs:
 
       - name: Scripted gen-java
         run: cp .jvmopts-travis .jvmopts && sbt "; project sbt-akka-grpc; scripted gen-java/*"
+      - name: Scripted scala3
+        run: cp .jvmopts-travis .jvmopts && sbt ++2.13.3 "sbt-akka-grpc/scripted scala3/*"
 
 
   test-gradle:
diff --git a/sbt-plugin/src/sbt-test/scala3/01-basic-client-server/build.sbt b/sbt-plugin/src/sbt-test/scala3/01-basic-client-server/build.sbt
new file mode 100644
index 0000000..1a8adaf
--- /dev/null
+++ b/sbt-plugin/src/sbt-test/scala3/01-basic-client-server/build.sbt
@@ -0,0 +1,11 @@
+scalaVersion := "3.0.1-RC1"
+
+resolvers += Resolver.sonatypeRepo("staging")
+
+scalacOptions += "-Xfatal-warnings"
+
+enablePlugins(AkkaGrpcPlugin)
+
+libraryDependencies ++= Seq(
+  "org.scalatest" %% "scalatest" % "3.2.9" % "test"
+)
diff --git a/sbt-plugin/src/sbt-test/scala3/01-basic-client-server/project/build.properties b/sbt-plugin/src/sbt-test/scala3/01-basic-client-server/project/build.properties
new file mode 100644
index 0000000..9edb75b
--- /dev/null
+++ b/sbt-plugin/src/sbt-test/scala3/01-basic-client-server/project/build.properties
@@ -0,0 +1,1 @@
+sbt.version=1.5.4
diff --git a/sbt-plugin/src/sbt-test/scala3/01-basic-client-server/project/plugins.sbt b/sbt-plugin/src/sbt-test/scala3/01-basic-client-server/project/plugins.sbt
new file mode 100644
index 0000000..646e81f
--- /dev/null
+++ b/sbt-plugin/src/sbt-test/scala3/01-basic-client-server/project/plugins.sbt
@@ -0,0 +1,1 @@
+addSbtPlugin("com.lightbend.akka.grpc" % "sbt-akka-grpc" % sys.props("project.version"))
diff --git a/sbt-plugin/src/sbt-test/scala3/01-basic-client-server/src/main/protobuf/helloworld.proto b/sbt-plugin/src/sbt-test/scala3/01-basic-client-server/src/main/protobuf/helloworld.proto
new file mode 100644
index 0000000..0f44266
--- /dev/null
+++ b/sbt-plugin/src/sbt-test/scala3/01-basic-client-server/src/main/protobuf/helloworld.proto
@@ -0,0 +1,29 @@
+syntax = "proto3";
+
+option java_multiple_files = true;
+option java_package = "example.myapp.helloworld.grpc";
+option java_outer_classname = "HelloWorldProto";
+
+package helloworld;
+
+// The greeting service definition.
+service GreeterService {
+    // Sends a greeting
+    rpc SayHello (HelloRequest) returns (HelloReply) {}
+
+    rpc ItKeepsTalking (stream HelloRequest) returns (HelloReply) {}
+
+    rpc ItKeepsReplying (HelloRequest) returns (stream HelloReply) {}
+
+    rpc StreamHellos (stream HelloRequest) returns (stream HelloReply) {}
+}
+
+// The request message containing the user's name.
+message HelloRequest {
+    string name = 1;
+}
+
+// The response message containing the greetings
+message HelloReply {
+    string message = 1;
+}
diff --git a/sbt-plugin/src/sbt-test/scala3/01-basic-client-server/src/main/resources/application.conf b/sbt-plugin/src/sbt-test/scala3/01-basic-client-server/src/main/resources/application.conf
new file mode 100644
index 0000000..6cb057f
--- /dev/null
+++ b/sbt-plugin/src/sbt-test/scala3/01-basic-client-server/src/main/resources/application.conf
@@ -0,0 +1,5 @@
+akka.http.server.preview.enable-http2 = on
+
+akka.grpc.client."*" {
+  backend = "akka-http"
+}
diff --git a/sbt-plugin/src/sbt-test/scala3/01-basic-client-server/src/main/scala/example/myapp/helloworld/GreeterServiceImpl.scala b/sbt-plugin/src/sbt-test/scala3/01-basic-client-server/src/main/scala/example/myapp/helloworld/GreeterServiceImpl.scala
new file mode 100644
index 0000000..e569734
--- /dev/null
+++ b/sbt-plugin/src/sbt-test/scala3/01-basic-client-server/src/main/scala/example/myapp/helloworld/GreeterServiceImpl.scala
@@ -0,0 +1,22 @@
+package example.myapp.helloworld
+
+import scala.concurrent.Future
+
+import akka.NotUsed
+import akka.stream.scaladsl.Source
+
+import example.myapp.helloworld.grpc._
+
+class GreeterServiceImpl extends GreeterService:
+
+  override def sayHello(in: HelloRequest): Future[HelloReply] =
+    Future.successful(HelloReply(s"Hello, ${in.name}!"))
+
+  override def streamHellos(in: Source[HelloRequest, NotUsed]): Source[HelloReply, NotUsed] =
+    ???
+
+  override def itKeepsTalking(in: Source[HelloRequest, NotUsed]): Future[HelloReply] =
+    ???
+
+  override def itKeepsReplying(in: HelloRequest): Source[HelloReply, NotUsed] =
+    ???
diff --git a/sbt-plugin/src/sbt-test/scala3/01-basic-client-server/src/test/scala/example/myapp/helloworld/GreeterServiceSpec.scala b/sbt-plugin/src/sbt-test/scala3/01-basic-client-server/src/test/scala/example/myapp/helloworld/GreeterServiceSpec.scala
new file mode 100644
index 0000000..649270e
--- /dev/null
+++ b/sbt-plugin/src/sbt-test/scala3/01-basic-client-server/src/test/scala/example/myapp/helloworld/GreeterServiceSpec.scala
@@ -0,0 +1,39 @@
+package example.myapp.helloworld;
+
+import scala.concurrent.duration._
+
+import akka.actor.ActorSystem
+import akka.http.scaladsl.Http
+
+import akka.grpc.GrpcClientSettings
+
+import example.myapp.helloworld.grpc._
+
+import org.scalatest.concurrent.ScalaFutures
+import org.scalatest.concurrent.PatienceConfiguration
+import org.scalatest.matchers.should.Matchers
+import org.scalatest.time.{ Span, Millis, Seconds }
+import org.scalatest.wordspec.AnyWordSpec
+
+class GreeterServiceSpec extends AnyWordSpec with Matchers with ScalaFutures:
+  implicit val system: ActorSystem = ActorSystem("GreeterServiceSpec")
+
+  val binding = Http()
+    .newServerAt("localhost", 0)
+    .bind(GreeterServiceHandler(new GreeterServiceImpl()))
+    .futureValue
+
+  val client = GreeterServiceClient(
+    GrpcClientSettings.connectToServiceAt(
+      "localhost",
+      binding.localAddress.getPort
+    ).withTls(false)
+  )
+
+  "A GreeterService" should {
+    "respond to a unary request" in {
+      val reply = client.sayHello(HelloRequest("Dave"))
+      val r = scala.concurrent.Await.result(reply, 10.seconds)
+      r.message shouldBe("Hello, Dave!")
+    }
+  }
diff --git a/sbt-plugin/src/sbt-test/scala3/01-basic-client-server/test b/sbt-plugin/src/sbt-test/scala3/01-basic-client-server/test
new file mode 100644
index 0000000..dfffb83
--- /dev/null
+++ b/sbt-plugin/src/sbt-test/scala3/01-basic-client-server/test
@@ -0,0 +1,1 @@
+> test
