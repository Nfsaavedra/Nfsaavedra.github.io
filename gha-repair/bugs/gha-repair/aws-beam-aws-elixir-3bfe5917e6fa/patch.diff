diff --git a/.github/workflows/codegen.yml b/.github/workflows/codegen.yml
index 6d47e54..54ee69f 100644
--- a/.github/workflows/codegen.yml
+++ b/.github/workflows/codegen.yml
@@ -103,7 +103,7 @@ jobs:
         run: |
           git config --local user.email "noreply@github.com"
           git config --local user.name "github-actions[bot]"
-          git add lib/aws/generated/*
+          git add lib/aws/generated
           git add .latest-tag-aws-sdk-go
           echo "Update services based on ${{ env.LATEST_AWS_SDK_GO_TAG }} of AWS Go SDK" >> commit-msg
           echo >> commit-msg
diff --git a/lib/aws/generated/cloudsearchdomain.ex b/lib/aws/generated/cloudsearchdomain.ex
deleted file mode 100644
index 01534cd..0000000
--- a/lib/aws/generated/cloudsearchdomain.ex
+++ /dev/null
@@ -1,302 +0,0 @@
-# WARNING: DO NOT EDIT, AUTO-GENERATED CODE!
-# See https://github.com/aws-beam/aws-codegen for more details.
-
-defmodule AWS.Cloudsearchdomain do
-  @moduledoc """
-  You use the AmazonCloudSearch2013 API to upload documents to a search domain and
-  search those documents.
-
-  The endpoints for submitting `UploadDocuments`, `Search`, and `Suggest` requests
-  are domain-specific. To get the endpoints for your domain, use the Amazon
-  CloudSearch configuration service `DescribeDomains` action. The domain endpoints
-  are also displayed on the domain dashboard in the Amazon CloudSearch console.
-  You submit suggest requests to the search endpoint.
-
-  For more information, see the [Amazon CloudSearch Developer Guide](http://docs.aws.amazon.com/cloudsearch/latest/developerguide).
-  """
-
-  alias AWS.Client
-  alias AWS.Request
-
-  def metadata do
-    %{
-      abbreviation: nil,
-      api_version: "2013-01-01",
-      content_type: "application/x-amz-json-1.1",
-      credential_scope: nil,
-      endpoint_prefix: "cloudsearchdomain",
-      global?: false,
-      protocol: "rest-json",
-      service_id: nil,
-      signature_version: "v4",
-      signing_name: "cloudsearch",
-      target_prefix: nil
-    }
-  end
-
-  @doc """
-  Retrieves a list of documents that match the specified search criteria.
-
-  How you specify the search criteria depends on which query parser you use.
-  Amazon CloudSearch supports four query parsers:
-
-    * `simple`: search all `text` and `text-array` fields for the
-  specified string. Search for phrases, individual terms, and prefixes.
-    * `structured`: search specific fields, construct compound queries
-  using Boolean operators, and use advanced features such as term boosting and
-  proximity searching.
-    * `lucene`: specify search criteria using the Apache Lucene query
-  parser syntax.
-    * `dismax`: specify search criteria using the simplified subset of
-  the Apache Lucene query parser syntax defined by the DisMax query parser.
-
-  For more information, see [Searching Your Data](http://docs.aws.amazon.com/cloudsearch/latest/developerguide/searching.html)
-  in the *Amazon CloudSearch Developer Guide*.
-
-  The endpoint for submitting `Search` requests is domain-specific. You submit
-  search requests to a domain's search endpoint. To get the search endpoint for
-  your domain, use the Amazon CloudSearch configuration service `DescribeDomains`
-  action. A domain's endpoints are also displayed on the domain dashboard in the
-  Amazon CloudSearch console.
-  """
-  def search(
-        %Client{} = client,
-        cursor \\ nil,
-        expr \\ nil,
-        facet \\ nil,
-        filter_query \\ nil,
-        highlight \\ nil,
-        partial \\ nil,
-        query,
-        query_options \\ nil,
-        query_parser \\ nil,
-        return \\ nil,
-        size \\ nil,
-        sort \\ nil,
-        start \\ nil,
-        stats \\ nil,
-        options \\ []
-      ) do
-    url_path = "/2013-01-01/search?format=sdk&pretty=true"
-    headers = []
-    query_params = []
-
-    query_params =
-      if !is_nil(stats) do
-        [{"stats", stats} | query_params]
-      else
-        query_params
-      end
-
-    query_params =
-      if !is_nil(start) do
-        [{"start", start} | query_params]
-      else
-        query_params
-      end
-
-    query_params =
-      if !is_nil(sort) do
-        [{"sort", sort} | query_params]
-      else
-        query_params
-      end
-
-    query_params =
-      if !is_nil(size) do
-        [{"size", size} | query_params]
-      else
-        query_params
-      end
-
-    query_params =
-      if !is_nil(return) do
-        [{"return", return} | query_params]
-      else
-        query_params
-      end
-
-    query_params =
-      if !is_nil(query_parser) do
-        [{"q.parser", query_parser} | query_params]
-      else
-        query_params
-      end
-
-    query_params =
-      if !is_nil(query_options) do
-        [{"q.options", query_options} | query_params]
-      else
-        query_params
-      end
-
-    query_params =
-      if !is_nil(query) do
-        [{"q", query} | query_params]
-      else
-        query_params
-      end
-
-    query_params =
-      if !is_nil(partial) do
-        [{"partial", partial} | query_params]
-      else
-        query_params
-      end
-
-    query_params =
-      if !is_nil(highlight) do
-        [{"highlight", highlight} | query_params]
-      else
-        query_params
-      end
-
-    query_params =
-      if !is_nil(filter_query) do
-        [{"fq", filter_query} | query_params]
-      else
-        query_params
-      end
-
-    query_params =
-      if !is_nil(facet) do
-        [{"facet", facet} | query_params]
-      else
-        query_params
-      end
-
-    query_params =
-      if !is_nil(expr) do
-        [{"expr", expr} | query_params]
-      else
-        query_params
-      end
-
-    query_params =
-      if !is_nil(cursor) do
-        [{"cursor", cursor} | query_params]
-      else
-        query_params
-      end
-
-    Request.request_rest(
-      client,
-      metadata(),
-      :get,
-      url_path,
-      query_params,
-      headers,
-      nil,
-      options,
-      nil
-    )
-  end
-
-  @doc """
-  Retrieves autocomplete suggestions for a partial query string.
-
-  You can use suggestions enable you to display likely matches before users finish
-  typing. In Amazon CloudSearch, suggestions are based on the contents of a
-  particular text field. When you request suggestions, Amazon CloudSearch finds
-  all of the documents whose values in the suggester field start with the
-  specified query string. The beginning of the field must match the query string
-  to be considered a match.
-
-  For more information about configuring suggesters and retrieving suggestions,
-  see [Getting Suggestions](http://docs.aws.amazon.com/cloudsearch/latest/developerguide/getting-suggestions.html)
-  in the *Amazon CloudSearch Developer Guide*.
-
-  The endpoint for submitting `Suggest` requests is domain-specific. You submit
-  suggest requests to a domain's search endpoint. To get the search endpoint for
-  your domain, use the Amazon CloudSearch configuration service `DescribeDomains`
-  action. A domain's endpoints are also displayed on the domain dashboard in the
-  Amazon CloudSearch console.
-  """
-  def suggest(%Client{} = client, query, size \\ nil, suggester, options \\ []) do
-    url_path = "/2013-01-01/suggest?format=sdk&pretty=true"
-    headers = []
-    query_params = []
-
-    query_params =
-      if !is_nil(suggester) do
-        [{"suggester", suggester} | query_params]
-      else
-        query_params
-      end
-
-    query_params =
-      if !is_nil(size) do
-        [{"size", size} | query_params]
-      else
-        query_params
-      end
-
-    query_params =
-      if !is_nil(query) do
-        [{"q", query} | query_params]
-      else
-        query_params
-      end
-
-    Request.request_rest(
-      client,
-      metadata(),
-      :get,
-      url_path,
-      query_params,
-      headers,
-      nil,
-      options,
-      nil
-    )
-  end
-
-  @doc """
-  Posts a batch of documents to a search domain for indexing.
-
-  A document batch is a collection of add and delete operations that represent the
-  documents you want to add, update, or delete from your domain. Batches can be
-  described in either JSON or XML. Each item that you want Amazon CloudSearch to
-  return as a search result (such as a product) is represented as a document.
-  Every document has a unique ID and one or more fields that contain the data that
-  you want to search and return in results. Individual documents cannot contain
-  more than 1 MB of data. The entire batch cannot exceed 5 MB. To get the best
-  possible upload performance, group add and delete operations in batches that are
-  close the 5 MB limit. Submitting a large volume of single-document batches can
-  overload a domain's document service.
-
-  The endpoint for submitting `UploadDocuments` requests is domain-specific. To
-  get the document endpoint for your domain, use the Amazon CloudSearch
-  configuration service `DescribeDomains` action. A domain's endpoints are also
-  displayed on the domain dashboard in the Amazon CloudSearch console.
-
-  For more information about formatting your data for Amazon CloudSearch, see
-  [Preparing Your Data](http://docs.aws.amazon.com/cloudsearch/latest/developerguide/preparing-data.html)
-  in the *Amazon CloudSearch Developer Guide*. For more information about
-  uploading data for indexing, see [Uploading Data](http://docs.aws.amazon.com/cloudsearch/latest/developerguide/uploading-data.html)
-  in the *Amazon CloudSearch Developer Guide*.
-  """
-  def upload_documents(%Client{} = client, input, options \\ []) do
-    url_path = "/2013-01-01/documents/batch?format=sdk"
-
-    {headers, input} =
-      [
-        {"contentType", "Content-Type"}
-      ]
-      |> Request.build_params(input)
-
-    query_params = []
-
-    Request.request_rest(
-      client,
-      metadata(),
-      :post,
-      url_path,
-      query_params,
-      headers,
-      input,
-      options,
-      nil
-    )
-  end
-end
diff --git a/lib/aws/generated/entitlement_marketplace.ex b/lib/aws/generated/entitlement_marketplace.ex
deleted file mode 100644
index 996aa96..0000000
--- a/lib/aws/generated/entitlement_marketplace.ex
+++ /dev/null
@@ -1,50 +0,0 @@
-# WARNING: DO NOT EDIT, AUTO-GENERATED CODE!
-# See https://github.com/aws-beam/aws-codegen for more details.
-
-defmodule AWS.Entitlement.Marketplace do
-  @moduledoc """
-  AWS Marketplace Entitlement Service
-
-  This reference provides descriptions of the AWS Marketplace Entitlement Service
-  API.
-
-  AWS Marketplace Entitlement Service is used to determine the entitlement of a
-  customer to a given product. An entitlement represents capacity in a product
-  owned by the customer. For example, a customer might own some number of users or
-  seats in an SaaS application or some amount of data capacity in a multi-tenant
-  database.
-
-  ## Getting Entitlement Records
-
-    * *GetEntitlements*- Gets the entitlements for a Marketplace
-  product.
-  """
-
-  alias AWS.Client
-  alias AWS.Request
-
-  def metadata do
-    %{
-      abbreviation: nil,
-      api_version: "2017-01-11",
-      content_type: "application/x-amz-json-1.1",
-      credential_scope: nil,
-      endpoint_prefix: "entitlement.marketplace",
-      global?: false,
-      protocol: "json",
-      service_id: nil,
-      signature_version: "v4",
-      signing_name: "aws-marketplace",
-      target_prefix: "AWSMPEntitlementService"
-    }
-  end
-
-  @doc """
-  GetEntitlements retrieves entitlement values for a given product.
-
-  The results can be filtered based on customer identifier or product dimensions.
-  """
-  def get_entitlements(%Client{} = client, input, options \\ []) do
-    Request.request_post(client, metadata(), "GetEntitlements", input, options)
-  end
-end
diff --git a/lib/aws/generated/importexport.ex b/lib/aws/generated/importexport.ex
deleted file mode 100644
index 4f62190..0000000
--- a/lib/aws/generated/importexport.ex
+++ /dev/null
@@ -1,100 +0,0 @@
-# WARNING: DO NOT EDIT, AUTO-GENERATED CODE!
-# See https://github.com/aws-beam/aws-codegen for more details.
-
-defmodule AWS.Importexport do
-  @moduledoc """
-  AWS Import/Export Service
-
-  AWS Import/Export accelerates transferring large amounts of data between the AWS
-  cloud and portable storage devices that you mail to us.
-
-  AWS Import/Export transfers data directly onto and off of your storage devices
-  using Amazon's high-speed internal network and bypassing the Internet. For large
-  data sets, AWS Import/Export is often faster than Internet transfer and more
-  cost effective than upgrading your connectivity.
-  """
-
-  alias AWS.Client
-  alias AWS.Request
-
-  def metadata do
-    %{
-      abbreviation: nil,
-      api_version: "2010-06-01",
-      content_type: "application/x-www-form-urlencoded",
-      credential_scope: "us-east-1",
-      endpoint_prefix: "importexport",
-      global?: true,
-      protocol: "query",
-      service_id: nil,
-      signature_version: "v2",
-      signing_name: "importexport",
-      target_prefix: nil
-    }
-  end
-
-  @doc """
-  This operation cancels a specified job.
-
-  Only the job owner can cancel it. The operation fails if the job has already
-  started or is complete.
-  """
-  def cancel_job(%Client{} = client, input, options \\ []) do
-    Request.request_post(client, metadata(), "CancelJob", input, options)
-  end
-
-  @doc """
-  This operation initiates the process of scheduling an upload or download of your
-  data.
-
-  You include in the request a manifest that describes the data transfer
-  specifics. The response to the request includes a job ID, which you can use in
-  other operations, a signature that you use to identify your storage device, and
-  the address where you should ship your storage device.
-  """
-  def create_job(%Client{} = client, input, options \\ []) do
-    Request.request_post(client, metadata(), "CreateJob", input, options)
-  end
-
-  @doc """
-  This operation generates a pre-paid UPS shipping label that you will use to ship
-  your device to AWS for processing.
-  """
-  def get_shipping_label(%Client{} = client, input, options \\ []) do
-    Request.request_post(client, metadata(), "GetShippingLabel", input, options)
-  end
-
-  @doc """
-  This operation returns information about a job, including where the job is in
-  the processing pipeline, the status of the results, and the signature value
-  associated with the job.
-
-  You can only return information about jobs you own.
-  """
-  def get_status(%Client{} = client, input, options \\ []) do
-    Request.request_post(client, metadata(), "GetStatus", input, options)
-  end
-
-  @doc """
-  This operation returns the jobs associated with the requester.
-
-  AWS Import/Export lists the jobs in reverse chronological order based on the
-  date of creation. For example if Job Test1 was created 2009Dec30 and Test2 was
-  created 2010Feb05, the ListJobs operation would return Test2 followed by Test1.
-  """
-  def list_jobs(%Client{} = client, input, options \\ []) do
-    Request.request_post(client, metadata(), "ListJobs", input, options)
-  end
-
-  @doc """
-  You use this operation to change the parameters specified in the original
-  manifest file by supplying a new manifest file.
-
-  The manifest file attached to this request replaces the original manifest file.
-  You can only use the operation after a CreateJob request but before the data
-  transfer starts and you can only use it on jobs you own.
-  """
-  def update_job(%Client{} = client, input, options \\ []) do
-    Request.request_post(client, metadata(), "UpdateJob", input, options)
-  end
-end
diff --git a/lib/aws/generated/sdb.ex b/lib/aws/generated/sdb.ex
deleted file mode 100644
index de1849b..0000000
--- a/lib/aws/generated/sdb.ex
+++ /dev/null
@@ -1,285 +0,0 @@
-# WARNING: DO NOT EDIT, AUTO-GENERATED CODE!
-# See https://github.com/aws-beam/aws-codegen for more details.
-
-defmodule AWS.Sdb do
-  @moduledoc """
-  Amazon SimpleDB is a web service providing the core database functions of data
-  indexing and querying in the cloud.
-
-  By offloading the time and effort associated with building and operating a
-  web-scale database, SimpleDB provides developers the freedom to focus on
-  application development. A traditional, clustered relational database requires a
-  sizable upfront capital outlay, is complex to design, and often requires
-  extensive and repetitive database administration. Amazon SimpleDB is
-  dramatically simpler, requiring no schema, automatically indexing your data and
-  providing a simple API for storage and access. This approach eliminates the
-  administrative burden of data modeling, index maintenance, and performance
-  tuning. Developers gain access to this functionality within Amazon's proven
-  computing environment, are able to scale instantly, and pay only for what they
-  use.
-
-  Visit [http://aws.amazon.com/simpledb/](http://aws.amazon.com/simpledb/) for
-  more information.
-  """
-
-  alias AWS.Client
-  alias AWS.Request
-
-  def metadata do
-    %{
-      abbreviation: nil,
-      api_version: "2009-04-15",
-      content_type: "application/x-www-form-urlencoded",
-      credential_scope: nil,
-      endpoint_prefix: "sdb",
-      global?: false,
-      protocol: "query",
-      service_id: nil,
-      signature_version: "v2",
-      signing_name: "sdb",
-      target_prefix: nil
-    }
-  end
-
-  @doc """
-  Performs multiple DeleteAttributes operations in a single call, which reduces
-  round trips and latencies.
-
-  This enables Amazon SimpleDB to optimize requests, which generally yields better
-  throughput.
-
-  If you specify BatchDeleteAttributes without attributes or values, all the
-  attributes for the item are deleted.
-
-  BatchDeleteAttributes is an idempotent operation; running it multiple times on
-  the same item or attribute doesn't result in an error.
-
-  The BatchDeleteAttributes operation succeeds or fails in its entirety. There are
-  no partial deletes. You can execute multiple BatchDeleteAttributes operations
-  and other operations in parallel. However, large numbers of concurrent
-  BatchDeleteAttributes calls can result in Service Unavailable (503) responses.
-
-  This operation is vulnerable to exceeding the maximum URL size when making a
-  REST request using the HTTP GET method.
-
-  This operation does not support conditions using Expected.X.Name,
-  Expected.X.Value, or Expected.X.Exists.
-
-  The following limitations are enforced for this operation:
-
-    * 1 MB request size
-    * 25 item limit per BatchDeleteAttributes operation
-  """
-  def batch_delete_attributes(%Client{} = client, input, options \\ []) do
-    Request.request_post(client, metadata(), "BatchDeleteAttributes", input, options)
-  end
-
-  @doc """
-  The `BatchPutAttributes` operation creates or replaces attributes within one or
-  more items.
-
-  By using this operation, the client can perform multiple `PutAttribute`
-  operation with a single call. This helps yield savings in round trips and
-  latencies, enabling Amazon SimpleDB to optimize requests and generally produce
-  better throughput.
-
-  The client may specify the item name with the `Item.X.ItemName` parameter. The
-  client may specify new attributes using a combination of the
-  `Item.X.Attribute.Y.Name` and `Item.X.Attribute.Y.Value` parameters. The client
-  may specify the first attribute for the first item using the parameters
-  `Item.0.Attribute.0.Name` and `Item.0.Attribute.0.Value`, and for the second
-  attribute for the first item by the parameters `Item.0.Attribute.1.Name` and
-  `Item.0.Attribute.1.Value`, and so on.
-
-  Attributes are uniquely identified within an item by their name/value
-  combination. For example, a single item can have the attributes `{ "first_name",
-  "first_value" }` and `{ "first_name", "second_value" }`. However, it cannot have
-  two attribute instances where both the `Item.X.Attribute.Y.Name` and
-  `Item.X.Attribute.Y.Value` are the same.
-
-  Optionally, the requester can supply the `Replace` parameter for each individual
-  value. Setting this value to `true` will cause the new attribute values to
-  replace the existing attribute values. For example, if an item `I` has the
-  attributes `{ 'a', '1' }, { 'b', '2'}` and `{ 'b', '3' }` and the requester does
-  a BatchPutAttributes of `{'I', 'b', '4' }` with the Replace parameter set to
-  true, the final attributes of the item will be `{ 'a', '1' }` and `{ 'b', '4'
-  }`, replacing the previous values of the 'b' attribute with the new value.
-
-  You cannot specify an empty string as an item or as an attribute name. The
-  `BatchPutAttributes` operation succeeds or fails in its entirety. There are no
-  partial puts.
-
-  This operation is vulnerable to exceeding the maximum URL size when making a
-  REST request using the HTTP GET method. This operation does not support
-  conditions using `Expected.X.Name`, `Expected.X.Value`, or `Expected.X.Exists`.
-
-  You can execute multiple `BatchPutAttributes` operations and other operations in
-  parallel. However, large numbers of concurrent `BatchPutAttributes` calls can
-  result in Service Unavailable (503) responses.
-
-  The following limitations are enforced for this operation:
-
-    * 256 attribute name-value pairs per item
-    * 1 MB request size
-    * 1 billion attributes per domain
-    * 10 GB of total user data storage per domain
-    * 25 item limit per `BatchPutAttributes` operation
-  """
-  def batch_put_attributes(%Client{} = client, input, options \\ []) do
-    Request.request_post(client, metadata(), "BatchPutAttributes", input, options)
-  end
-
-  @doc """
-  The `CreateDomain` operation creates a new domain.
-
-  The domain name should be unique among the domains associated with the Access
-  Key ID provided in the request. The `CreateDomain` operation may take 10 or more
-  seconds to complete.
-
-  CreateDomain is an idempotent operation; running it multiple times using the
-  same domain name will not result in an error response.
-
-  The client can create up to 100 domains per account.
-
-  If the client requires additional domains, go to [
-  http://aws.amazon.com/contact-us/simpledb-limit-request/](http://aws.amazon.com/contact-us/simpledb-limit-request/).
-  """
-  def create_domain(%Client{} = client, input, options \\ []) do
-    Request.request_post(client, metadata(), "CreateDomain", input, options)
-  end
-
-  @doc """
-  Deletes one or more attributes associated with an item.
-
-  If all attributes of the item are deleted, the item is deleted.
-
-  If `DeleteAttributes` is called without being passed any attributes or values
-  specified, all the attributes for the item are deleted.
-
-  `DeleteAttributes` is an idempotent operation; running it multiple times on the
-  same item or attribute does not result in an error response.
-
-  Because Amazon SimpleDB makes multiple copies of item data and uses an eventual
-  consistency update model, performing a `GetAttributes` or `Select` operation
-  (read) immediately after a `DeleteAttributes` or `PutAttributes` operation
-  (write) might not return updated item data.
-  """
-  def delete_attributes(%Client{} = client, input, options \\ []) do
-    Request.request_post(client, metadata(), "DeleteAttributes", input, options)
-  end
-
-  @doc """
-  The `DeleteDomain` operation deletes a domain.
-
-  Any items (and their attributes) in the domain are deleted as well. The
-  `DeleteDomain` operation might take 10 or more seconds to complete.
-
-  Running `DeleteDomain` on a domain that does not exist or running the function
-  multiple times using the same domain name will not result in an error response.
-  """
-  def delete_domain(%Client{} = client, input, options \\ []) do
-    Request.request_post(client, metadata(), "DeleteDomain", input, options)
-  end
-
-  @doc """
-  Returns information about the domain, including when the domain was created, the
-  number of items and attributes in the domain, and the size of the attribute
-  names and values.
-  """
-  def domain_metadata(%Client{} = client, input, options \\ []) do
-    Request.request_post(client, metadata(), "DomainMetadata", input, options)
-  end
-
-  @doc """
-  Returns all of the attributes associated with the specified item.
-
-  Optionally, the attributes returned can be limited to one or more attributes by
-  specifying an attribute name parameter.
-
-  If the item does not exist on the replica that was accessed for this operation,
-  an empty set is returned. The system does not return an error as it cannot
-  guarantee the item does not exist on other replicas.
-
-  If GetAttributes is called without being passed any attribute names, all the
-  attributes for the item are returned.
-  """
-  def get_attributes(%Client{} = client, input, options \\ []) do
-    Request.request_post(client, metadata(), "GetAttributes", input, options)
-  end
-
-  @doc """
-  The `ListDomains` operation lists all domains associated with the Access Key ID.
-
-  It returns domain names up to the limit set by
-  [MaxNumberOfDomains](#MaxNumberOfDomains). A [NextToken](#NextToken) is returned
-  if there are more than `MaxNumberOfDomains` domains. Calling `ListDomains`
-  successive times with the `NextToken` provided by the operation returns up to
-  `MaxNumberOfDomains` more domain names with each successive operation call.
-  """
-  def list_domains(%Client{} = client, input, options \\ []) do
-    Request.request_post(client, metadata(), "ListDomains", input, options)
-  end
-
-  @doc """
-  The PutAttributes operation creates or replaces attributes in an item.
-
-  The client may specify new attributes using a combination of the
-  `Attribute.X.Name` and `Attribute.X.Value` parameters. The client specifies the
-  first attribute by the parameters `Attribute.0.Name` and `Attribute.0.Value`,
-  the second attribute by the parameters `Attribute.1.Name` and
-  `Attribute.1.Value`, and so on.
-
-  Attributes are uniquely identified in an item by their name/value combination.
-  For example, a single item can have the attributes `{ "first_name",
-  "first_value" }` and `{ "first_name", second_value" }`. However, it cannot have
-  two attribute instances where both the `Attribute.X.Name` and
-  `Attribute.X.Value` are the same.
-
-  Optionally, the requestor can supply the `Replace` parameter for each individual
-  attribute. Setting this value to `true` causes the new attribute value to
-  replace the existing attribute value(s). For example, if an item has the
-  attributes `{ 'a', '1' }`, `{ 'b', '2'}` and `{ 'b', '3' }` and the requestor
-  calls `PutAttributes` using the attributes `{ 'b', '4' }` with the `Replace`
-  parameter set to true, the final attributes of the item are changed to `{ 'a',
-  '1' }` and `{ 'b', '4' }`, which replaces the previous values of the 'b'
-  attribute with the new value.
-
-  Using `PutAttributes` to replace attribute values that do not exist will not
-  result in an error response.
-
-  You cannot specify an empty string as an attribute name.
-
-  Because Amazon SimpleDB makes multiple copies of client data and uses an
-  eventual consistency update model, an immediate `GetAttributes` or `Select`
-  operation (read) immediately after a `PutAttributes` or `DeleteAttributes`
-  operation (write) might not return the updated data.
-
-  The following limitations are enforced for this operation:
-
-    * 256 total attribute name-value pairs per item
-    * One billion attributes per domain
-    * 10 GB of total user data storage per domain
-  """
-  def put_attributes(%Client{} = client, input, options \\ []) do
-    Request.request_post(client, metadata(), "PutAttributes", input, options)
-  end
-
-  @doc """
-  The `Select` operation returns a set of attributes for `ItemNames` that match
-  the select expression.
-
-  `Select` is similar to the standard SQL SELECT statement.
-
-  The total size of the response cannot exceed 1 MB in total size. Amazon SimpleDB
-  automatically adjusts the number of items returned per page to enforce this
-  limit. For example, if the client asks to retrieve 2500 items, but each
-  individual item is 10 kB in size, the system returns 100 items and an
-  appropriate `NextToken` so the client can access the next page of results.
-
-  For information on how to construct select expressions, see Using Select to
-  Create Amazon SimpleDB Queries in the Developer Guide.
-  """
-  def select(%Client{} = client, input, options \\ []) do
-    Request.request_post(client, metadata(), "Select", input, options)
-  end
-end
