diff --git a/.github/workflows/check-bioc.yml b/.github/workflows/check-bioc.yml
index a99eaf4..16e77fd 100644
--- a/.github/workflows/check-bioc.yml
+++ b/.github/workflows/check-bioc.yml
@@ -6,9 +6,6 @@
 ##
 ## You can add this workflow to other packages using:
 ## > biocthis::use_bioc_github_action()
-## or
-## > usethis::use_github_action("check-bioc", "https://bit.ly/biocthis_gha", "check-bioc.yml")
-## without having to install biocthis.
 ##
 ## Using GitHub Actions exposes you to many details about how R packages are
 ## compiled and installed in several operating system.s
@@ -19,23 +16,13 @@
 ## with the information that will make it easier for others to help you.
 ## Thank you!
 
-
-
 ## Acronyms:
 ## * GHA: GitHub Action
 ## * OS: operating system
 
-## Specify which branches you want this GHA to run on.
-## Bioconductor uses branches such as master (bioc-devel) and RELEASE_* like
-## RELEASE_3_10. For more details check
-## http://bioconductor.org/developers/how-to/git/
 on:
   push:
-    branches:
-      - master
   pull_request:
-    branches:
-      - master
 
 name: R-CMD-check-bioc
 
@@ -47,263 +34,60 @@ name: R-CMD-check-bioc
 ## Note that you can always run a GHA test without the cache by using the word
 ## "/nocache" in the commit message.
 env:
-  has_testthat: 'true'
-  run_covr: 'true'
-  run_pkgdown: 'true'
+  has_testthat: 'false'
+  run_covr: 'false'
+  run_pkgdown: 'false'
   has_RUnit: 'false'
   cache-version: 'cache-v1'
 
 jobs:
-  ## This first job uses the GitHub repository branch name to infer what
-  ## version of Bioconductor we will be working on.
-  define-docker-info:
-    runs-on: ubuntu-latest
-    outputs:
-      imagename: ${{ steps.findinfo.outputs.imagename }}
-      biocversion: ${{ steps.findinfo.outputs.biocversion }}
-    steps:
-      - id: findinfo
-        run: |
-          ## Find what Bioconductor RELEASE branch we are working on
-          ## otherwise, assume we are working on bioc-devel.
-          if echo "$GITHUB_REF" | grep -q "RELEASE_"; then
-              biocversion="$(basename -- $GITHUB_REF | tr '[:upper:]' '[:lower:]')"
-          else
-              biocversion="devel"
-          fi
-          ## Define the image name and print the information
-          imagename="bioconductor/bioconductor_docker:${biocversion}"
-          echo $imagename
-          echo $biocversion
-
-          ## Save the information for the next job
-          echo "::set-output name=imagename::${imagename}"
-          echo "::set-output name=biocversion::${biocversion}"
-
-  R-CMD-check-bioc:
-    ## This job then checks the R package using the Bioconductor docker that
-    ## was defined by the previous job. This job will determine what version of
-    ## R to use for the macOS and Windows builds on the next job.
-    runs-on: ubuntu-latest
-    needs: define-docker-info
-
-    ## Name shown on the GHA log
-    name: ubuntu-latest (r-biocdocker bioc-${{ needs.define-docker-info.outputs.biocversion }})
-
-    ## Information used by the next job that will run on macOS and Windows
-    outputs:
-      rversion: ${{ steps.findrversion.outputs.rversion }}
-      biocversionnum: ${{ steps.findrversion.outputs.biocversionnum }}
-
+  build-check:
+    runs-on: ${{ matrix.config.os }}
+    name: ${{ matrix.config.os }} (${{ matrix.config.r }})
+    container: ${{ matrix.config.cont }}
     ## Environment variables unique to this job.
+
+    strategy:
+      fail-fast: false
+      matrix:
+        config:
+          - { os: ubuntu-latest, r: '4.0', bioc: '3.12', cont: "bioconductor/bioconductor_docker:RELEASE_3_12", rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest" }
+          - { os: macOS-latest, r: '4.0', bioc: '3.12'}
+          - { os: windows-latest, r: '4.0', bioc: '3.12'}
     env:
       R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
-      TZ: UTC
+      RSPM: ${{ matrix.config.rspm }}
       NOT_CRAN: true
+      TZ: UTC
       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
 
-    ## The docker container to use. Note that we link a directory on the GHA
-    ## runner to a docker directory, such that we can then cache the linked
-    ## directory. This directory will contain the R packages used.
-    container:
-      image: ${{ needs.define-docker-info.outputs.imagename }}
-      volumes:
-        - /home/runner/work/_temp/Library:/usr/local/lib/R/host-site-library
-
     steps:
-      - name: Install latest git
+
+      ## Set the R library to the directory matching the
+      ## R packages cache step further below when running on Docker (Linux).
+      - name: Set R Library home on Linux
+        if: runner.os == 'Linux'
         run: |
-          ## git version provided
-          git --version
-          ## to be able to install software properties
-          sudo apt-get update -y
-          ## to be able to use add-apt-repository
-          sudo apt-get install software-properties-common -y
-          ## to use stable releases of git that are already in a PPA at
-          ## https://launchpad.net/~git-core/+archive/ubuntu/candidate
-          sudo add-apt-repository ppa:git-core/candidate -y
-          ## Update
-          sudo apt-get update -y
-          ## Upgrade git and other tools
-          sudo apt-get upgrade -y
-          ## latest git version
-          git --version
-        shell: bash {0}
-      ## Related to https://github.com/rocker-org/rocker-versioned2/issues/52
+          mkdir /__w/_temp/Library
+          echo ".libPaths('/__w/_temp/Library')" > ~/.Rprofile
 
       ## Most of these steps are the same as the ones in
       ## https://github.com/r-lib/actions/blob/master/examples/check-standard.yaml
       ## If they update their steps, we will also need to update ours.
-      - uses: actions/checkout@v2
-
-      - name: Query dependencies
-        run: |
-          install.packages('remotes')
-          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
-          message(paste('****', Sys.time(), 'installing BiocManager ****'))
-          remotes::install_cran("BiocManager")
-        shell: Rscript {0}
-
-      ## Find the corresponding R version based on the Bioconductor version
-      ## to use for the macOS and Windows checks by the next GHA job
-      - id: findrversion
-        name: Find Bioc and R versions
-        run: |
-          ## Find what branch we are working on
-          if echo "$GITHUB_REF" | grep -q "master"; then
-              biocversion="devel"
-          elif echo "$GITHUB_REF" | grep -q "RELEASE_"; then
-              biocversion="release"
-          fi
-
-          ## Define the R and Bioconductor version numbers
-          biocversionnum=$(Rscript -e "info <- BiocManager:::.version_map_get_online('https://bioconductor.org/config.yaml'); res <- subset(info, BiocStatus == '${biocversion}')[, 'Bioc']; cat(as.character(res))")
-          rversion=$(Rscript -e "info <- BiocManager:::.version_map_get_online('https://bioconductor.org/config.yaml'); res <- subset(info, BiocStatus == '${biocversion}')[, 'R']; cat(as.character(res))")
-
-          ## Print the results
-          echo $biocversion
-          echo $biocversionnum
-          echo $rversion
-
-          ## Save the info for the next job
-          echo "::set-output name=rversion::${rversion}"
-          echo "::set-output name=biocversionnum::${biocversionnum}"
-        shell:
-          bash {0}
-
-      - name: Cache R packages
-        if: "!contains(github.event.head_commit.message, '/nocache')"
-        uses: actions/cache@v1
-        with:
-          path: /home/runner/work/_temp/Library
-          key: ${{ env.cache-version }}-${{ runner.os }}-biocdocker-biocbranch-${{ needs.define-docker-info.outputs.biocversion }}-r-${{ steps.findrversion.outputs.rversion }}-bioc-${{ steps.findrversion.outputs.biocversionnum }}-${{ hashFiles('.github/depends.Rds') }}
-          restore-keys: ${{ env.cache-version }}-${{ runner.os }}-biocdocker-biocbranch-${{ needs.define-docker-info.outputs.biocversion }}-r-${{ steps.findrversion.outputs.rversion }}-bioc-${{ steps.findrversion.outputs.biocversionnum }}-
-
-      - name: Install dependencies
-        run: |
-          ## Try installing the package dependencies in steps. First the local
-          ## dependencies, then any remaining dependencies to avoid the
-          ## issues described at
-          ## https://stat.ethz.ch/pipermail/bioc-devel/2020-April/016675.html
-          ## https://github.com/r-lib/remotes/issues/296
-          ## Ideally, all dependencies should get installed in the first pass.
-
-          ## Pass #1 at installing dependencies
-          message(paste('****', Sys.time(), 'pass number 1 at installing dependencies: local dependencies ****'))
-          local_deps <- remotes::local_package_deps(dependencies = TRUE)
-          deps <- remotes::dev_package_deps(dependencies = TRUE, repos = BiocManager::repositories())
-          BiocManager::install(local_deps[local_deps %in% deps$package[deps$diff != 0]])
-
-          ## Pass #2 at installing dependencies
-          message(paste('****', Sys.time(), 'pass number 2 at installing dependencies: any remaining dependencies ****'))
-          deps <- remotes::dev_package_deps(dependencies = TRUE, repos = BiocManager::repositories())
-          BiocManager::install(deps$package[deps$diff != 0])
-
-          ## For running the checks
-          message(paste('****', Sys.time(), 'installing rcmdcheck and BiocCheck ****'))
-          remotes::install_cran("rcmdcheck")
-          # BiocManager::install("BiocCheck")
-        shell: Rscript {0}
-
-      - name: Session info
-        run: |
-          options(width = 100)
-          pkgs <- installed.packages()[, "Package"]
-          sessioninfo::session_info(pkgs, include_base = TRUE)
-        shell: Rscript {0}
-
-      - name: Check
-        env:
-          _R_CHECK_CRAN_INCOMING_: false
-          _R_CHECK_FORCE_SUGGESTS_: false
-        run: |
-          rcmdcheck::rcmdcheck(
-              args = c("--no-build-vignettes", "--no-manual", "--timings"),
-              build_args = c("--no-manual", "--no-resave-data", "--no-build-vignettes"),
-              error_on = "error",
-              check_dir = "check"
-          )
-        shell: Rscript {0}
-
-      - name: Reveal testthat details
-        if:  env.has_testthat == 'true'
-        run: find . -name testthat.Rout -exec cat '{}' ';'
-
-      - name: Run RUnit tests
-        if:  env.has_RUnit == 'true'
-        run: |
-          ## Install BiocGenerics
-          BiocManager::install("BiocGenerics")
-          BiocGenerics:::testPackage()
-        shell: Rscript {0}
-
-
-      - name: Install covr
-        if: github.ref == 'refs/heads/master' && env.run_covr == 'true'
-        run: |
-          remotes::install_cran("covr")
-        shell: Rscript {0}
-
-      - name: Test coverage
-        if: github.ref == 'refs/heads/master' && env.run_covr == 'true'
-        run: |
-          covr::codecov()
-        shell: Rscript {0}
-
-      - name: Install pkgdown
-        if: github.ref == 'refs/heads/master' && env.run_pkgdown == 'true'
-        run: |
-          remotes::install_github("r-lib/pkgdown")
-        shell: Rscript {0}
-
-      - name: Install package
-        if: github.ref == 'refs/heads/master' && env.run_pkgdown == 'true'
-        run: R CMD INSTALL .
-
-      - name: Upload check results
-        if: failure()
-        uses: actions/upload-artifact@master
-        with:
-          name: ${{ runner.os }}-biocdocker-biocbranch-${{ needs.define-docker-info.outputs.biocversion }}-r-${{ steps.findrversion.outputs.rversion }}-bioc-${{ steps.findrversion.outputs.biocversionnum }}-results
-          path: check
-
-  ## Run R CMD check on both macOS and Windows. You can also run the
-  ## tests on Linux outside of the Bioconductor docker environment. If you
-  ## do so, you might have to install system dependencies on Linux
-  ## Bioconductor's docker includes all the system dependencies required by
-  ## Bioconductor packages and their dependencies (which includes many CRAN
-  ## dependencies as well, thus making this workflow useful beyond Bioconductor)
-  R-CMD-check-r-lib:
-    runs-on: ${{ matrix.config.os }}
-    needs: [define-docker-info, R-CMD-check-bioc]
-
-    name: ${{ matrix.config.os }} (r-${{ needs.R-CMD-check-bioc.outputs.rversion }} bioc-${{ needs.define-docker-info.outputs.biocversion }})
-
-    strategy:
-      fail-fast: false
-      matrix:
-        config:
-          ## Comment/Un-comment in case you also want to run other versions
-          - {os: windows-latest}
-          - {os: macOS-latest}
-          # - {os: ubuntu-16.04, rspm: "https://packagemanager.rstudio.com/cran/__linux__/xenial/latest"}
-
-    env:
-      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
-      RSPM: ${{ matrix.config.rspm }}
-      BIOCVERSIONNUM: ${{ needs.R-CMD-check-bioc.outputs.biocversionnum }}
-      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
-
-    steps:
-      - uses: actions/checkout@v2
+      - name: Checkout Repository
+        uses: actions/checkout@v2
 
+      ## R is already included in the Bioconductor docker images
       - name: Setup R from r-lib
+        if: runner.os != 'Linux'
         uses: r-lib/actions/setup-r@master
         with:
-          r-version: ${{ needs.R-CMD-check-bioc.outputs.rversion }}
+          r-version: ${{ matrix.config.r }}
 
+      ## pandoc is already included in the Bioconductor docker images
       - name: Setup pandoc from r-lib
+        if: runner.os != 'Linux'
         uses: r-lib/actions/setup-pandoc@master
 
       - name: Query dependencies
@@ -313,20 +97,26 @@ jobs:
         shell: Rscript {0}
 
       - name: Cache R packages
-        if: "!contains(github.event.head_commit.message, '/nocache')"
-        uses: actions/cache@v1
+        if: "!contains(github.event.head_commit.message, '/nocache') && runner.os != 'Linux'"
+        uses: actions/cache@v2
         with:
           path: ${{ env.R_LIBS_USER }}
-          key: ${{ env.cache-version }}-${{ runner.os }}-biocbranch-${{ needs.define-docker-info.outputs.biocversion }}-r-${{ needs.R-CMD-check-bioc.outputs.rversion }}-bioc-${{ needs.define-docker-info.outputs.biocversion }}-${{ hashFiles('.github/depends.Rds') }}
-          restore-keys: ${{ env.cache-version }}-${{ runner.os }}-biocbranch-${{ needs.define-docker-info.outputs.biocversion }}-r-${{ needs.R-CMD-check-bioc.outputs.rversion }}-bioc-${{ needs.define-docker-info.outputs.biocversion }}-
+          key: ${{ env.cache-version }}-${{ runner.os }}-biocversion-RELEASE_3_12-r-4.0-${{ hashFiles('.github/depends.Rds') }}
+          restore-keys: ${{ env.cache-version }}-${{ runner.os }}-biocversion-RELEASE_3_12-r-4.0-
+
+      - name: Cache R packages on Linux
+        if: "!contains(github.event.head_commit.message, '/nocache') && runner.os == 'Linux' "
+        uses: actions/cache@v2
+        with:
+          path: /home/runner/work/_temp/Library
+          key: ${{ env.cache-version }}-${{ runner.os }}-biocversion-RELEASE_3_12-r-4.0-${{ hashFiles('.github/depends.Rds') }}
+          restore-keys: ${{ env.cache-version }}-${{ runner.os }}-biocversion-RELEASE_3_12-r-4.0-
 
       - name: Install Linux system dependencies
         if: runner.os == 'Linux'
-        env:
-          RHUB_PLATFORM: linux-x86_64-ubuntu-gcc
         run: |
-          Rscript -e "remotes::install_github('r-hub/sysreqs')"
-          sysreqs=$(Rscript -e "cat(sysreqs::sysreq_commands('DESCRIPTION'))")
+          sysreqs=$(Rscript -e 'cat("apt-get update -y && apt-get install -y", paste(gsub("apt-get install -y ", "", remotes::system_requirements("ubuntu", "20.04")), collapse = " "))')
+          echo $sysreqs
           sudo -s eval "$sysreqs"
 
       - name: Install macOS system dependencies
@@ -334,12 +124,21 @@ jobs:
         run: |
           ## Enable installing XML from source if needed
           brew install libxml2
-          echo "::set-env name=XML_CONFIG::/usr/local/opt/libxml2/bin/xml2-config"
+          echo "XML_CONFIG=/usr/local/opt/libxml2/bin/xml2-config" >> $GITHUB_ENV
 
           ## Required to install magick as noted at
           ## https://github.com/r-lib/usethis/commit/f1f1e0d10c1ebc75fd4c18fa7e2de4551fd9978f#diff-9bfee71065492f63457918efcd912cf2
           brew install imagemagick@6
 
+          ## For textshaping, required by ragg, and required by pkgdown
+          brew install harfbuzz fribidi
+
+          ## For installing usethis's dependency gert
+          brew install libgit2
+
+          # cairo also necessary?
+          brew install --cask xquartz
+          brew install cairo
       - name: Install Windows system dependencies
         if: runner.os == 'Windows'
         run: |
@@ -354,10 +153,10 @@ jobs:
 
       - name: Set BiocVersion
         run: |
-          BiocManager::install(version = Sys.getenv('BIOCVERSIONNUM'), ask = FALSE)
+          BiocManager::install(version = "${{ matrix.config.bioc }}", ask = FALSE)
         shell: Rscript {0}
 
-      - name: Install dependencies
+      - name: Install dependencies pass 1
         run: |
           ## Try installing the package dependencies in steps. First the local
           ## dependencies, then any remaining dependencies to avoid the
@@ -368,19 +167,41 @@ jobs:
 
           ## Pass #1 at installing dependencies
           message(paste('****', Sys.time(), 'pass number 1 at installing dependencies: local dependencies ****'))
-          local_deps <- remotes::local_package_deps(dependencies = TRUE)
-          deps <- remotes::dev_package_deps(dependencies = TRUE, repos = BiocManager::repositories())
-          BiocManager::install(local_deps[local_deps %in% deps$package[deps$diff != 0]])
+          BiocManager::install("limma")
+          remotes::install_cran("tidyverse")
+          remotes::install_local(dependencies = TRUE, repos = BiocManager::repositories(), build_vignettes = FALSE, upgrade = TRUE)
+        continue-on-error: true
+        shell: Rscript {0}
 
+      - name: Install dependencies pass 2
+        run: |
           ## Pass #2 at installing dependencies
           message(paste('****', Sys.time(), 'pass number 2 at installing dependencies: any remaining dependencies ****'))
-          deps <- remotes::dev_package_deps(dependencies = TRUE, repos = BiocManager::repositories())
-          BiocManager::install(deps$package[deps$diff != 0])
+          remotes::install_local(dependencies = TRUE, repos = BiocManager::repositories(), build_vignettes = FALSE, upgrade = TRUE)
 
           ## For running the checks
           message(paste('****', Sys.time(), 'installing rcmdcheck and BiocCheck ****'))
           remotes::install_cran("rcmdcheck")
-          # BiocManager::install("BiocCheck")
+          BiocManager::install("BiocCheck")
+        shell: Rscript {0}
+
+      - name: Install BiocGenerics
+        if:  env.has_RUnit == 'true'
+        run: |
+          ## Install BiocGenerics
+          BiocManager::install("BiocGenerics")
+        shell: Rscript {0}
+
+      - name: Install covr
+        if: github.ref == 'refs/heads/master' && env.run_covr == 'true' && runner.os == 'Linux'
+        run: |
+          remotes::install_cran("covr")
+        shell: Rscript {0}
+
+      - name: Install pkgdown
+        if: github.ref == 'refs/heads/master' && env.run_pkgdown == 'true' && runner.os == 'Linux'
+        run: |
+          remotes::install_cran("pkgdown")
         shell: Rscript {0}
 
       - name: Session info
@@ -390,10 +211,9 @@ jobs:
           sessioninfo::session_info(pkgs, include_base = TRUE)
         shell: Rscript {0}
 
-      - name: Check
+      - name: Run CMD check
         env:
           _R_CHECK_CRAN_INCOMING_: false
-          _R_CHECK_FORCE_SUGGESTS_: false
         run: |
           rcmdcheck::rcmdcheck(
               args = c("--no-build-vignettes", "--no-manual", "--timings"),
@@ -403,6 +223,7 @@ jobs:
           )
         shell: Rscript {0}
 
+      ## Might need an to add this to the if:  && runner.os == 'Linux'
       - name: Reveal testthat details
         if:  env.has_testthat == 'true'
         run: find . -name testthat.Rout -exec cat '{}' ';'
@@ -410,14 +231,44 @@ jobs:
       - name: Run RUnit tests
         if:  env.has_RUnit == 'true'
         run: |
-          ## Install BiocGenerics
-          BiocManager::install("BiocGenerics")
           BiocGenerics:::testPackage()
         shell: Rscript {0}
 
+      # - name: Run BiocCheck
+      #   run: |
+      #     BiocCheck::BiocCheck(
+      #         dir('check', 'tar.gz$', full.names = TRUE),
+      #         `quit-with-status` = TRUE,
+      #         `no-check-R-ver` = TRUE,
+      #         `no-check-bioc-help` = TRUE
+      #     )
+      #   shell: Rscript {0}
+
+      - name: Test coverage
+        if: github.ref == 'refs/heads/master' && env.run_covr == 'true' && runner.os == 'Linux'
+        run: |
+          covr::codecov()
+        shell: Rscript {0}
+
+      - name: Install package
+        if: github.ref == 'refs/heads/master' && env.run_pkgdown == 'true' && runner.os == 'Linux'
+        run: R CMD INSTALL .
+
+      - name: Deploy package
+        if: github.ref == 'refs/heads/master' && env.run_pkgdown == 'true' && runner.os == 'Linux'
+        run: |
+          git config --local user.email "actions@github.com"
+          git config --local user.name "GitHub Actions"
+          Rscript -e "pkgdown::deploy_to_branch(new_process = FALSE)"
+        shell: bash {0}
+        ## Note that you need to run pkgdown::deploy_to_branch(new_process = FALSE)
+        ## at least one locally before this will work. This creates the gh-pages
+        ## branch (erasing anything you haven't version controlled!) and
+        ## makes the git history recognizable by pkgdown.
+
       - name: Upload check results
         if: failure()
         uses: actions/upload-artifact@master
         with:
-          name: ${{ runner.os }}-biocbranch-${{ needs.define-docker-info.outputs.biocversion }}-r-${{ needs.R-CMD-check-bioc.outputs.rversion }}-bioc-${{ needs.define-docker-info.outputs.biocversion }}-results
+          name: ${{ runner.os }}-biocversion-RELEASE_3_12-r-4.0-results
           path: check
