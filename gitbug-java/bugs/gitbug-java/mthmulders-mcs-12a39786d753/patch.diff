diff --git a/src/main/java/it/mulders/mcs/common/Result.java b/src/main/java/it/mulders/mcs/common/Result.java
index ad7b46d..297a29b 100644
--- a/src/main/java/it/mulders/mcs/common/Result.java
+++ b/src/main/java/it/mulders/mcs/common/Result.java
@@ -21,6 +21,11 @@ public sealed interface Result<T> permits Result.Success, Result.Failure {
         }
 
         @Override
+        public void ifPresentOrElse(Consumer<T> successConsumer, Consumer<Throwable> failureConsumer) {
+            successConsumer.accept(value);
+        }
+
+        @Override
         public Throwable cause() {
             throw new NoSuchElementException("success: " + this.value);
         }
@@ -37,6 +42,11 @@ public sealed interface Result<T> permits Result.Success, Result.Failure {
         }
 
         @Override
+        public void ifPresentOrElse(Consumer<T> successConsumer, Consumer<Throwable> failureConsumer) {
+            failureConsumer.accept(cause);
+        }
+
+        @Override
         public T value() {
             throw new NoSuchElementException("failure: " + this.cause.getLocalizedMessage());
         }
@@ -46,6 +56,8 @@ public sealed interface Result<T> permits Result.Success, Result.Failure {
 
     void ifPresent(final Consumer<T> consumer);
 
+    void ifPresentOrElse(final Consumer<T> successConsumer, final Consumer<Throwable> failureConsumer);
+
     T value();
 
     Throwable cause();
diff --git a/src/main/java/it/mulders/mcs/search/SearchCommandHandler.java b/src/main/java/it/mulders/mcs/search/SearchCommandHandler.java
index f68a0d0..3dcba38 100644
--- a/src/main/java/it/mulders/mcs/search/SearchCommandHandler.java
+++ b/src/main/java/it/mulders/mcs/search/SearchCommandHandler.java
@@ -27,7 +27,10 @@ public class SearchCommandHandler {
     public void search(final SearchQuery query) {
         performSearch(query)
                 .map(response -> performAdditionalSearch(query, response))
-                .ifPresent(response -> printResponse(query, response));
+                .ifPresentOrElse(
+                        response -> printResponse(query, response),
+                        failure -> { throw new RuntimeException(failure); }
+                );
     }
 
     private SearchResponse.Response performAdditionalSearch(final SearchQuery query,
