diff --git a/src/test/java/org/jsoup/select/QueryParserTest.java b/src/test/java/org/jsoup/select/QueryParserTest.java
index ae2f344..51b7c92 100644
--- a/src/test/java/org/jsoup/select/QueryParserTest.java
+++ b/src/test/java/org/jsoup/select/QueryParserTest.java
@@ -18,10 +18,10 @@ public class QueryParserTest {
                 "<a><li><strong>l2</strong></li></a>" +
                 "<p><strong>yes</strong></p>" +
                 "</body></html>");
-        assertEquals("l1 l2 yes", doc.body().select(">p>strong,>*>li>strong").text());
+        assertEquals("l1 yes", doc.body().select(">p>strong,>li>strong").text()); // selecting immediate from body
+        assertEquals("l2 yes", doc.select("body>p>strong,body>*>li>strong").text());
+        assertEquals("l2 yes", doc.select("body>*>li>strong,body>p>strong").text());
         assertEquals("l2 yes", doc.select("body>p>strong,body>*>li>strong").text());
-        assertEquals("yes", doc.select(">body>*>li>strong,>body>p>strong").text());
-        assertEquals("l2", doc.select(">body>p>strong,>body>*>li>strong").text());
     }
 
     @Test public void testImmediateParentRun() {
diff --git a/src/test/java/org/jsoup/select/SelectorTest.java b/src/test/java/org/jsoup/select/SelectorTest.java
index e941f90..686214a 100644
--- a/src/test/java/org/jsoup/select/SelectorTest.java
+++ b/src/test/java/org/jsoup/select/SelectorTest.java
@@ -1206,4 +1206,17 @@ public class SelectorTest {
         Elements innerLisFromParent = li2.select("ul li");
         assertEquals(innerLis, innerLisFromParent);
     }
+
+    @Test public void rootImmediateParentSubquery() {
+        // a combinator at the start of the query is applied to the Root selector. i.e. "> p" matches a P immediately parented
+        // by the Root (which is <html> for a top level query, or the context element in :has)
+        // in the sub query, the combinator was dropped incorrectly
+        String html = "<p id=0><span>A</p> <p id=1><b><i><span>B</p> <p id=2><i>C</p>\n";
+        Document doc = Jsoup.parse(html);
+
+        Elements els = doc.select("p:has(> span, > i)"); // should match a p with an immediate span or i
+        assertEquals(2, els.size());
+        assertEquals("0", els.get(0).id());
+        assertEquals("2", els.get(1).id());
+    }
 }
