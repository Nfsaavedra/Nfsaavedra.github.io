diff --git a/src/test/java/org/assertj/vavr/api/SeqAssert_containsExactly_inAnyOrder_Test.java b/src/test/java/org/assertj/vavr/api/SeqAssert_containsExactly_inAnyOrder_Test.java
index a0de5e9..3654c00 100644
--- a/src/test/java/org/assertj/vavr/api/SeqAssert_containsExactly_inAnyOrder_Test.java
+++ b/src/test/java/org/assertj/vavr/api/SeqAssert_containsExactly_inAnyOrder_Test.java
@@ -33,6 +33,15 @@ class SeqAssert_containsExactly_inAnyOrder_Test {
     }
 
     @Test
+    void should_pass_if_List_contains_exactly_elements_in_any_order_using_element_comparator() {
+        final Set<String> expectedInAnyOrder = HashSet.of("other", "and", "else", "something");
+        final List<String> uppercaseList = expectedInAnyOrder.map(String::toUpperCase).toList().reverse();
+        assertThat(uppercaseList)
+                .usingElementComparator(String::compareToIgnoreCase)
+                .containsExactlyInAnyOrder(expectedInAnyOrder);
+    }
+
+    @Test
     void should_fail_when_List_is_null() {
         final Set<String> expectedInAnyOrder = HashSet.of("other", "and", "else", "something");
         assertThatThrownBy(
diff --git a/src/test/java/org/assertj/vavr/api/soft/JUnitSoftVavrAssertionsFailureTest.java b/src/test/java/org/assertj/vavr/api/soft/JUnitSoftVavrAssertionsFailureTest.java
index 4fa4447..9459721 100644
--- a/src/test/java/org/assertj/vavr/api/soft/JUnitSoftVavrAssertionsFailureTest.java
+++ b/src/test/java/org/assertj/vavr/api/soft/JUnitSoftVavrAssertionsFailureTest.java
@@ -44,7 +44,7 @@ public class JUnitSoftVavrAssertionsFailureTest {
         // THEN
         List<Throwable> failures = multipleFailuresError.getFailures();
         assertThat(failures).hasSize(2);
-        assertThat(failures.get(0)).hasMessageStartingWith(format("[contains] %nExpecting:%n  <Left(something)>%nto contain:%n  <\"else\">%nbut did not."));
+        assertThat(failures.get(0)).hasMessageStartingWith(format("[contains] %nExpecting:%n  <Left(something)>%nto contain:%n  <\"else\"> on the [LEFT]%nbut did not."));
         assertThat(failures.get(1)).hasMessageStartingWith(format("[instance] %nExpecting:%n" +
                 " <Left>%n" +
                 "to contain a value that is an instance of:%n" +
@@ -53,4 +53,4 @@ public class JUnitSoftVavrAssertionsFailureTest {
                 " <java.lang.String>"));
     }
 
-}
\ No newline at end of file
+}
