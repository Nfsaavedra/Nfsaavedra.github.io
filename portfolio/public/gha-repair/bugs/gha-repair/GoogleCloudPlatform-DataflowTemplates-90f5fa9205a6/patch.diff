diff --git a/.github/ISSUE_TEMPLATE/bug-template.yml b/.github/ISSUE_TEMPLATE/bug-template.yml
new file mode 100644
index 0000000..dbbb7d7
--- /dev/null
+++ b/.github/ISSUE_TEMPLATE/bug-template.yml
@@ -0,0 +1,48 @@
+name: Bug
+description: File a bug issue
+title: "[Bug]: <Please Replace with a Summary of the Bug> "
+labels: ["bug", "p2", "needs triage"]
+body:
+  - type: markdown
+    attributes:
+      value: >
+        Thank you so much for taking the time to fill out this bug report!
+        
+        **Please note: any issue that is currently affecting your production should be directed to Google Cloud customer support.**
+  - type: input
+    id: template
+    attributes:
+      label: Related Template(s)
+      description: "Which template(s) this bug is affecting?"
+    validations:
+      required: true
+  - type: textarea
+    id: what-happened
+    attributes:
+      label: What happened?
+      description: Please share what you expected and what happened!
+      placeholder: Tell us what you see!
+    validations:
+      required: true
+  - type: dropdown
+    id: version
+    attributes:
+      label: Beam Version
+      description: What version of beam are you using?
+      options:
+        - Newer than 2.35.0
+        - 2.35.0
+        - 2.34.0
+        - 2.33.0
+        - 2.32.0
+        - 2.31.0
+        - 2.30.0
+        - Older than 2.30.0
+    validations:
+      required: true
+  - type: textarea
+    id: logs
+    attributes:
+      label: Relevant log output
+      description: Please copy and paste any relevant log output. This will be automatically formatted into code, so no need for backticks.
+      render: shell
diff --git a/.github/ISSUE_TEMPLATE/config.yml b/.github/ISSUE_TEMPLATE/config.yml
new file mode 100644
index 0000000..3ba13e0
--- /dev/null
+++ b/.github/ISSUE_TEMPLATE/config.yml
@@ -0,0 +1,1 @@
+blank_issues_enabled: false
diff --git a/.github/ISSUE_TEMPLATE/feature-request-template.yml b/.github/ISSUE_TEMPLATE/feature-request-template.yml
new file mode 100644
index 0000000..d30de9b
--- /dev/null
+++ b/.github/ISSUE_TEMPLATE/feature-request-template.yml
@@ -0,0 +1,22 @@
+name: Feature Request
+description: File a feature request issue
+title: "[Feature Request]: <Please Replace This with a Summary of Your Request>"
+labels: ["addition", "p2", "needs triage"]
+body:
+  - type: markdown
+    attributes:
+      value: |
+        Thank you so much for taking the time to fill out this feature request report!
+  - type: input
+    id: template
+    attributes:
+      label: Related Template(s)
+      description: "Please let us know which templates are you submitting this feature request for. Or if you are requesting a new template."
+    validations:
+      required: true
+  - type: textarea
+    id: what-happened
+    attributes:
+      label: What feature(s) are you requesting?
+    validations:
+      required: true
diff --git a/.github/workflows/preconditions.yml b/.github/workflows/preconditions.yml
index 224ef4d..a3db991 100644
--- a/.github/workflows/preconditions.yml
+++ b/.github/workflows/preconditions.yml
@@ -34,16 +34,5 @@ jobs:
           distribution: 'zulu'
           java-version: '11' # Spotless won't work on version 8
           cache: 'maven'
-      - name: Setup Go
-        uses: actions/setup-go@44e221478fc6847752e5c574fc7a7b3247b00fbf
-        with:
-          go-version: '1.17'
-      - name: Get Changed Files
-        id: changed-files
-        uses: tj-actions/changed-files@61ee456a9d0f512e7ecfdf28863634c97dae2d16
-        with:
-          separator: ','
       - name: Run Spotless
-        run: |
-          cd cicd/ && go build ./cmd/run-spotless && cd ..
-          ./cicd/run-spotless --changed-files="${{ steps.changed-files.outputs.all_changed_files }}"
+        run: ./scripts/workflows/run_spotless_check.sh
diff --git a/cicd/cmd/run-spotless/main.go b/cicd/cmd/run-spotless/main.go
deleted file mode 100644
index 9b39ec4..0000000
--- a/cicd/cmd/run-spotless/main.go
+++ /dev/null
@@ -1,67 +0,0 @@
-/*
- * Copyright (C) 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-
-package main
-
-import (
-	"flag"
-	"fmt"
-	"log"
-	"strings"
-
-	"github.com/GoogleCloudPlatform/DataflowTemplates/cicd/internal/op"
-	"github.com/GoogleCloudPlatform/DataflowTemplates/cicd/internal/repo"
-)
-
-const (
-	SpotlessCommand = "spotless:check"
-)
-
-func main() {
-	changed := flag.String("changed-files", "", "List of changed files as a comma-separated string")
-	flag.Parse()
-
-	if len(*changed) == 0 {
-		log.Print("No changed files passed. This is probably an error, but we're assuming it isn't just in case")
-		return
-	}
-	log.Printf("Received changed files: %s", *changed)
-
-	s := strings.Split(*changed, ",")
-	modules := repo.GetModulesForPaths(s)
-
-	var fullErr error
-	if _, ok := modules[repo.ClassicRoot]; ok {
-		if err := op.RunMavenOnPom(repo.ClassicRoot, SpotlessCommand); err != nil {
-			fullErr = err
-		}
-	}
-	if flex, ok := modules[repo.FlexRoot]; ok {
-		for _, m := range flex {
-			if len(m) > 0 { // Zero length represents the root, which has no Java code
-				if err := op.RunMavenOnModule(repo.FlexRoot, SpotlessCommand, m); err != nil && fullErr != nil {
-					fullErr = err
-				} else if err != nil {
-					fullErr = fmt.Errorf("%w\n%v", fullErr, err)
-				}
-			}
-		}
-	}
-
-	if fullErr != nil {
-		log.Fatal("There were spotless errors. Check the output from the commands.")
-	}
-}
diff --git a/cicd/go.mod b/cicd/go.mod
deleted file mode 100644
index 6c6c815..0000000
--- a/cicd/go.mod
+++ /dev/null
@@ -1,3 +0,0 @@
-module github.com/GoogleCloudPlatform/DataflowTemplates/cicd
-
-go 1.17
diff --git a/cicd/internal/op/maven.go b/cicd/internal/op/maven.go
deleted file mode 100644
index 47ac88a..0000000
--- a/cicd/internal/op/maven.go
+++ /dev/null
@@ -1,36 +0,0 @@
-/*
- * Copyright (C) 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-
-package op
-
-import (
-	"fmt"
-)
-
-// Run the given Maven command on a specified POM file. Considering the input, this is equivalent to:
-//		mvn {cmd} -f {pomDir}/pom.xml {args...}
-func RunMavenOnPom(pomDir string, cmd string, args ...string) error {
-	wa := []string{cmd, "-f", fmt.Sprintf("%s/pom.xml", pomDir)}
-	return RunCmdAndStreamOutput("mvn", append(wa, args...))
-}
-
-// Rung the given Maven command on a specified module. Considering the input, this is equivalent to:
-//		mvn {cmd} -f {pomDir}/pom.xml -pl {module} {args...}
-func RunMavenOnModule(pomDir string, cmd string, module string, args ...string) error {
-	fullArgs := []string{"-pl", module}
-	fullArgs = append(fullArgs, args...)
-	return RunMavenOnPom(pomDir, cmd, fullArgs...)
-}
diff --git a/cicd/internal/op/run-cmd.go b/cicd/internal/op/run-cmd.go
deleted file mode 100644
index 44976e1..0000000
--- a/cicd/internal/op/run-cmd.go
+++ /dev/null
@@ -1,41 +0,0 @@
-/*
- * Copyright (C) 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-
-package op
-
-import (
-	"bufio"
-	"fmt"
-	"log"
-	"os/exec"
-	"strings"
-)
-
-// Runs a command and streams the output rather than waiting for it to complete.
-func RunCmdAndStreamOutput(cmd string, args []string) error {
-	log.Printf("Running command: %s %s", cmd, strings.Join(args, " "))
-	op := exec.Command(cmd, args...)
-
-	stdout, _ := op.StdoutPipe()
-	op.Start()
-
-	scanner := bufio.NewScanner(stdout)
-	for scanner.Scan() {
-		fmt.Println(scanner.Text())
-	}
-	
-	return op.Wait()
-}
diff --git a/cicd/internal/repo/files.go b/cicd/internal/repo/files.go
deleted file mode 100644
index 539e8bd..0000000
--- a/cicd/internal/repo/files.go
+++ /dev/null
@@ -1,86 +0,0 @@
-/*
- * Copyright (C) 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-
-package repo
-
-import (
-	"errors"
-	"fmt"
-	"io/fs"
-	"os"
-	"path/filepath"
-	"runtime"
-	"strings"
-)
-
-const (
-	RootDirName = "DataflowTemplates"
-)
-
-func getRootDir() (string, error) {
-	_, path, _, ok := runtime.Caller(0)
-	if !ok {
-		return "", errors.New("could not determine a starting path to get to root directory")
-	}
-
-	dir := filepath.Dir(path)
-	allDirs := strings.Split(dir, string(os.PathSeparator))
-	i := len(allDirs)
-	for ; i >= 0 && allDirs[i-1] != RootDirName; i -= 1 {
-		// Empty intentionally
-	}
-
-	if i == 0 {
-		return "", fmt.Errorf("%s is not in the %s project somehow", dir, RootDirName)
-	}
-
-	return strings.Join(allDirs[:i], string(os.PathSeparator)), nil
-}
-
-// Gets all the POM files under `dir`. `dir` is a relative path from the root of the repository.
-// So if the root is located at `$HOME/go/src/github.com/GoogleCloudPlatform/DataflowTemplates`, then
-// passing `v2` represents `$HOME/go/src/github.com/GoogleCloudPlatform/DataflowTemplates/v2`.
-func GetAllPomFiles(dir string) ([]string, error) {
-	root, e := getRootDir()
-	if e != nil {
-		return nil, e
-	}
-	poms := make([]string, 0)
-
-	var start string
-	if strings.HasPrefix(dir, RootDirName) {
-		start = root
-	} else {
-		start = filepath.Join(root, dir)
-	}
-
-	e = filepath.Walk(start, func(path string, info fs.FileInfo, err error) error {
-		if err != nil {
-			return err
-		}
-		if info.IsDir() || info.Name() != "pom.xml" {
-			return nil
-		}
-
-		poms = append(poms, path)
-		return nil
-	})
-
-	if e != nil {
-		return nil, e
-	}
-	return poms, nil
-}
diff --git a/cicd/internal/repo/files_test.go b/cicd/internal/repo/files_test.go
deleted file mode 100644
index 45e421a..0000000
--- a/cicd/internal/repo/files_test.go
+++ /dev/null
@@ -1,88 +0,0 @@
-/*
- * Copyright (C) 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-
-package repo
-
-import (
-	"os"
-	"path/filepath"
-	"strings"
-	"testing"
-)
-
-func TestGetAllPomFiles(t *testing.T) {
-	getModule := func(pomFile string) string {
-		dir := filepath.Dir(pomFile)
-		return dir[strings.LastIndex(dir, string(os.PathSeparator))+1:]
-	}
-
-	tests := []struct {
-		dir      string
-		expected map[string]interface{}
-	}{
-		{
-			dir: FlexRoot,
-			expected: map[string]interface{}{
-				"v2":                         nil,
-				"cdc-parent":                 nil,
-				"cdc-common":                 nil,
-				"pubsub-binary-to-bigquery":  nil,
-				"googlecloud-to-googlecloud": nil,
-			},
-		},
-		{
-			dir: RootDirName,
-			expected: map[string]interface{}{
-				RootDirName:                  nil,
-				"v2":                         nil,
-				"cdc-parent":                 nil,
-				"cdc-common":                 nil,
-				"pubsub-binary-to-bigquery":  nil,
-				"googlecloud-to-googlecloud": nil,
-			},
-		},
-		{
-			dir: ClassicRoot,
-			expected: map[string]interface{}{
-				RootDirName:                  nil,
-				"v2":                         nil,
-				"cdc-parent":                 nil,
-				"cdc-common":                 nil,
-				"pubsub-binary-to-bigquery":  nil,
-				"googlecloud-to-googlecloud": nil,
-			},
-		},
-	}
-
-	for _, test := range tests {
-		t.Logf("testing %s", test.dir)
-
-		files, err := GetAllPomFiles(test.dir)
-		if err != nil {
-			t.Fatalf("error getting POM files: %v", err)
-		}
-
-		for _, f := range files {
-			delete(test.expected, getModule(f))
-		}
-
-		if len(test.expected) > 0 {
-			t.Fatalf("did not encounter %v. got %v", test.expected, files)
-		}
-
-		t.Logf("successful for %s", test.dir)
-	}
-}
diff --git a/cicd/internal/repo/modules.go b/cicd/internal/repo/modules.go
deleted file mode 100644
index 1d124f3..0000000
--- a/cicd/internal/repo/modules.go
+++ /dev/null
@@ -1,179 +0,0 @@
-/*
- * Copyright (C) 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-
-package repo
-
-import (
-	"fmt"
-	"os"
-	"path/filepath"
-	"strings"
-)
-
-const (
-	// Roots in relation to the root directory of the repository.
-	ClassicRoot = "."
-	FlexRoot    = "v2"
-)
-
-// Extracts module name from POM path, with `rootModule` being used as the reference for
-// the uppermost ancestor. The returned value should be usable with the `-pl` flag in relation
-// to the POM file at `rootModule`.
-func getModuleFromPomPath(pomPath string, rootModule string) (string, error) {
-	dir := filepath.Dir(pomPath)
-	allDirs := strings.Split(dir, string(os.PathSeparator))
-
-	i := len(allDirs)
-	for ; i > 0 && allDirs[i-1] != rootModule; i -= 1 {
-		// Empty intentionally
-	}
-
-	if i == 0 {
-		return "", fmt.Errorf("%s is not under %s", pomPath, rootModule)
-	}
-
-	return strings.Join(allDirs[i:], "/"), nil
-}
-
-// Returns a map of roots to their modules. Properties are:
-// 		Key: The root module, equivalent to one of the const values (e.g. ClassicRoot)
-//		Value: All the submodules, sometimes nested under another parent that is also in the slice
-// This could be used in the equivalent command:
-//		mvn x:y -f {key}/pom.xml -pl {value}
-// An empty value indicates no submodules.
-func GetModuleMapping() map[string][]string {
-	m := make(map[string][]string)
-	m[ClassicRoot] = make([]string, 0)
-
-	flexPoms, err := GetAllPomFiles(FlexRoot)
-	if err != nil {
-		// Panicking here seems reasonable, since something is deeply wrong with the filesystem
-		// if this fails.
-		panic(err)
-	}
-	flexModules := make([]string, len(flexPoms))
-	for i := range flexPoms {
-		if module, err := getModuleFromPomPath(flexPoms[i], FlexRoot); err != nil {
-			panic(err)
-		} else {
-			flexModules[i] = module
-		}
-	}
-	m[FlexRoot] = flexModules
-
-	return m
-}
-
-type moduleTrieNode struct {
-	value    string
-	children map[rune]*moduleTrieNode
-}
-
-func flexModulesAsTrie() *moduleTrieNode {
-	root := &moduleTrieNode{
-		value:    "",
-		children: make(map[rune]*moduleTrieNode),
-	}
-
-	for _, m := range GetModuleMapping()[FlexRoot] {
-		curr := root
-		for _, r := range m {
-			if _, ok := curr.children[r]; ok {
-				curr = curr.children[r]
-			} else {
-				curr.children[r] = &moduleTrieNode{
-					value:    "",
-					children: make(map[rune]*moduleTrieNode),
-				}
-				curr = curr.children[r]
-			}
-		}
-		curr.value = m
-	}
-
-	return root
-}
-
-func findUniqueFlexModules(paths []string) []string {
-	trie := flexModulesAsTrie()
-	modules := make(map[string]interface{})
-
-	for _, path := range paths {
-		curr := trie
-		var possible *moduleTrieNode
-
-		for _, r := range path {
-			var ok bool
-			curr, ok = curr.children[r]
-			if !ok {
-				break
-			}
-			if curr.value != "" {
-				possible = curr
-			}
-		}
-
-		if possible != nil {
-			modules[possible.value] = nil
-		}
-		// We don't error from not finding anything, since it could be a root-level file
-		// that isn't part of any module.
-	}
-
-	ret := make([]string, len(modules))
-	i := 0
-	for k := range modules {
-		ret[i] = k
-		i += 1
-	}
-
-	return ret
-}
-
-// Gets all the unique modules for files whose path from the root directory is in `paths`. Example paths:
-//		pom.xml -> Mapped to Classic root
-//		v2/cdc-parent/pom.xml -> Mapped to cdc-parent under Flex Templates
-// The return value has the following properties:
-//		Key: The path of the root module, equivalent to ClassicRoot, FlexRoot, etc.
-//		Value: List of modules (e.g. cdc-parent, cdc-parent/cdc-common). An empty entry represents the root itself.
-func GetModulesForPaths(paths []string) map[string][]string {
-	if len(paths) == 0 {
-		return make(map[string][]string)
-	}
-
-	m := make(map[string][]string)
-	flex := make([]string, 0)
-
-	v2 := fmt.Sprintf("v2%s", string(os.PathSeparator))
-
-	for _, path := range paths {
-		if strings.HasPrefix(path, v2) {
-			flex = append(flex, strings.TrimPrefix(path, v2))
-		} else {
-			// TODO(zhoufek): Make this more granular, especially separating .github and cicd code
-			// into separate "modules"
-			m[ClassicRoot] = make([]string, 0)
-		}
-	}
-
-	if len(flex) > 0 {
-		// Even if nothing is found, we should still account for v2/ as its own module, since
-		// changes made be made to important files, like v2/pom.xml
-		m[FlexRoot] = findUniqueFlexModules(flex)
-	}
-
-	return m
-}
diff --git a/cicd/internal/repo/modules_test.go b/cicd/internal/repo/modules_test.go
deleted file mode 100644
index ec20145..0000000
--- a/cicd/internal/repo/modules_test.go
+++ /dev/null
@@ -1,78 +0,0 @@
-/*
- * Copyright (C) 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-
-package repo
-
-import (
-	"reflect"
-	"testing"
-)
-
-func TestModuleMappingHasAllRoots(t *testing.T) {
-	m := GetModuleMapping()
-	if _, ok := m[ClassicRoot]; !ok {
-		t.Error("Missing Classic root")
-	}
-	if _, ok := m[FlexRoot]; !ok {
-		t.Error("Missing Flex root")
-	}
-}
-
-func TestGetModulesForPaths(t *testing.T) {
-	tests := []struct {
-		input    []string
-		expected map[string][]string
-	}{
-		{
-			input: []string{"src/something", "v2/pubsub-binary-to-bigquery/avro", "src/something-else", "v2/pubsub-binary-to-bigquery/proto"},
-			expected: map[string][]string{
-				ClassicRoot: []string{},
-				FlexRoot:    []string{"pubsub-binary-to-bigquery"},
-			},
-		},
-		{
-			input: []string{"v2/pubsub-cdc-to-bigquery", "v2/pubsub-binary-to-bigquery"},
-			expected: map[string][]string{
-				FlexRoot: []string{"pubsub-cdc-to-bigquery", "pubsub-binary-to-bigquery"},
-			},
-		},
-		{
-			input: []string{"v2/cdc-parent/something", "v2/cdc-parent/cdc-common/something"},
-			expected: map[string][]string{
-				FlexRoot: []string{"cdc-parent", "cdc-parent/cdc-common"},
-			},
-		},
-		{
-			input: []string{"something", "v2/something"},
-			expected: map[string][]string{
-				ClassicRoot: make([]string, 0),
-				FlexRoot:    make([]string, 0),
-			},
-		},
-		{
-			input:    make([]string, 0),
-			expected: make(map[string][]string),
-		},
-	}
-
-	for _, test := range tests {
-		t.Logf("Testing input: %v", test.input)
-		if actual := GetModulesForPaths(test.input); !reflect.DeepEqual(actual, test.expected) {
-			t.Errorf("incorrect results. expected: %v. got: %v", test.expected, actual)
-		}
-		t.Logf("Success")
-	}
-}
diff --git a/scripts/workflows/run_spotless_check.sh b/scripts/workflows/run_spotless_check.sh
new file mode 100755
index 0000000..87c5c4b
--- /dev/null
+++ b/scripts/workflows/run_spotless_check.sh
@@ -0,0 +1,44 @@
+#!/usr/bin/env bash
+# Copyright 2021 Google LLC
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     https://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+echo 'Running spotless to verify that the code sticks to the Google style guide.'
+
+FINAL_STATUS=0
+
+# Attempts to get the changes based on a regex that filters from `git status`.
+function get_change_count {
+  echo $(git status | grep -e $1 | wc -l)
+}
+
+if [[ $(get_change_count '[^/]src/') -gt 0 ]]; then
+  mvn spotless:check
+  readonly CLASSIC_STATUS=$?
+  if [[ $CLASSIC_STATUS -ne 0 ]]; then echo 'Error in Classic Templates. Run `mvn spotless:apply` from root to fix'; fi
+  FINAL_STATUS=$(($FINAL_STATUS | $CLASSIC_STATUS))
+else
+  echo 'No changes detected in Classic Templates. Skipping spotless check.'
+fi
+
+if [[ $(get_change_count '[^/]v2/') -gt 0 ]]; then
+  mvn spotless:check -f v2/pom.xml
+  readonly FLEX_STATUS=$?
+  if [[ $FLEX_STATUS -ne 0 ]]; then echo 'Error in Flex Templates. Run `mvn spotless:apply -f v2/pom.xml` to fix'; fi
+  FINAL_STATUS=$(($FINAL_STATUS | $FLEX_STATUS))
+else
+  echo 'No changes detected in Flex Templates. Skipping spotless check.'
+fi
+
+echo 'Check complete.'
+exit $FINAL_STATUS
