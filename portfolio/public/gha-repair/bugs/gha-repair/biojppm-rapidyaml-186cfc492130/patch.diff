diff --git a/.github/workflows/ci.yml b/.github/workflows/ci.yml
index fcd39ad..e2056ac 100644
--- a/.github/workflows/ci.yml
+++ b/.github/workflows/ci.yml
@@ -506,7 +506,7 @@ jobs:
 #      - {name: link-what-you-use, run: cmake -DCMAKE_LINK_WHAT_YOU_USE=TRUE ..}
 
   #----------------------------------------------------------------------------
-  examples:
+  samples:
     continue-on-error: true
     runs-on: ${{matrix.os}}
     strategy:
@@ -526,7 +526,7 @@ jobs:
       - {name: python3, uses: actions/setup-python@v2, with: {python-version: 3.7}}
       - {name: install requirements, run: source .github/reqs.sh && c4_install_test_requirements $OS}
       - {name: show info, run: source .github/setenv.sh && c4_show_info }
-      - {name: add_subdirectory, run: cmany b -t $BT examples/add_subdirectory }
+      - {name: add_subdirectory, run: cmany b -t $BT samples/add_subdirectory }
 
   #----------------------------------------------------------------------------
   test_api:
diff --git a/examples/add_subdirectory/CMakeLists.txt b/examples/add_subdirectory/CMakeLists.txt
deleted file mode 100644
index 1509f46..0000000
--- a/examples/add_subdirectory/CMakeLists.txt
+++ /dev/null
@@ -1,14 +0,0 @@
-cmake_minimum_required(VERSION 3.12)
-project(ryml-consumer LANGUAGES CXX)
-
-set(CMAKE_CXX_STANDARD 17)
-
-add_subdirectory(../../ foobar-ryml)
-
-include(./check.cmake)  # run some checks (used in CI tests)
-
-add_executable(ryml-consumer main.cpp)
-target_link_libraries(ryml-consumer ryml)
-add_custom_command(TARGET ryml-consumer POST_BUILD
-    COMMAND $<TARGET_FILE:ryml-consumer>
-    COMMENT "running test: $<TARGET_FILE:ryml-consumer>")
diff --git a/examples/add_subdirectory/check.cmake b/examples/add_subdirectory/check.cmake
deleted file mode 100644
index a3f4773..0000000
--- a/examples/add_subdirectory/check.cmake
+++ /dev/null
@@ -1,10 +0,0 @@
-if(NOT TARGET ryml)
-    message(FATAL_ERROR "could not find target ryml")
-endif()
-if(NOT CMAKE_CXX_STANDARD EQUAL 17)
-    message(FATAL_ERROR "CXX standard was changed by ryml")
-endif()
-get_target_property(ryml_cxx_std ryml CXX_STANDARD)
-if(NOT ryml_cxx_std EQUAL 17)
-    message(FATAL_ERROR "ryml did not inherit the cxx standard: expected 17, got ${ryml_cxx_std}")
-endif()
diff --git a/examples/add_subdirectory/main.cpp b/examples/add_subdirectory/main.cpp
deleted file mode 100644
index bcaf6cb..0000000
--- a/examples/add_subdirectory/main.cpp
+++ /dev/null
@@ -1,34 +0,0 @@
-#include <ryml_std.hpp>
-#include <ryml.hpp>
-#include <c4/format.hpp>
-#include <stdexcept>
-
-#if C4_CPP < 17
-#error "must be C++17"
-#endif
-
-
-template <class... Args>
-void err(c4::csubstr fmt, Args const& ...args)
-{
-    throw std::runtime_error(c4::formatrs<std::string>(fmt, args...));
-}
-
-
-void check(ryml::Tree const& t, c4::csubstr key, c4::csubstr expected)
-{
-    c4::csubstr actual = t[key].val();
-    if(actual != expected)
-    {
-        err("expected t[{}]='{}', got '{}'", key, expected, actual);
-    }
-}
-
-
-int main()
-{
-    auto tree = ryml::parse("{foo: 0, bar: 1}");
-    check(tree, "foo", "0");
-    check(tree, "bar", "1");
-    return 0;
-}
diff --git a/samples/add_subdirectory/CMakeLists.txt b/samples/add_subdirectory/CMakeLists.txt
new file mode 100644
index 0000000..1509f46
--- /dev/null
+++ b/samples/add_subdirectory/CMakeLists.txt
@@ -0,0 +1,14 @@
+cmake_minimum_required(VERSION 3.12)
+project(ryml-consumer LANGUAGES CXX)
+
+set(CMAKE_CXX_STANDARD 17)
+
+add_subdirectory(../../ foobar-ryml)
+
+include(./check.cmake)  # run some checks (used in CI tests)
+
+add_executable(ryml-consumer main.cpp)
+target_link_libraries(ryml-consumer ryml)
+add_custom_command(TARGET ryml-consumer POST_BUILD
+    COMMAND $<TARGET_FILE:ryml-consumer>
+    COMMENT "running test: $<TARGET_FILE:ryml-consumer>")
diff --git a/samples/add_subdirectory/check.cmake b/samples/add_subdirectory/check.cmake
new file mode 100644
index 0000000..a3f4773
--- /dev/null
+++ b/samples/add_subdirectory/check.cmake
@@ -0,0 +1,10 @@
+if(NOT TARGET ryml)
+    message(FATAL_ERROR "could not find target ryml")
+endif()
+if(NOT CMAKE_CXX_STANDARD EQUAL 17)
+    message(FATAL_ERROR "CXX standard was changed by ryml")
+endif()
+get_target_property(ryml_cxx_std ryml CXX_STANDARD)
+if(NOT ryml_cxx_std EQUAL 17)
+    message(FATAL_ERROR "ryml did not inherit the cxx standard: expected 17, got ${ryml_cxx_std}")
+endif()
diff --git a/samples/add_subdirectory/main.cpp b/samples/add_subdirectory/main.cpp
new file mode 100644
index 0000000..825832f
--- /dev/null
+++ b/samples/add_subdirectory/main.cpp
@@ -0,0 +1,34 @@
+#include <ryml_std.hpp>  // this include needs to come before the next.
+#include <ryml.hpp>
+#include <c4/format.hpp>
+#include <stdexcept>
+
+#if C4_CPP < 17
+#error "must be C++17"
+#endif
+
+
+template <class... Args>
+void err(c4::csubstr fmt, Args const& ...args)
+{
+    throw std::runtime_error(c4::formatrs<std::string>(fmt, args...));
+}
+
+
+void check(ryml::Tree const& t, c4::csubstr key, c4::csubstr expected)
+{
+    c4::csubstr actual = t[key].val();
+    if(actual != expected)
+    {
+        err("expected t[{}]='{}', got '{}'", key, expected, actual);
+    }
+}
+
+
+int main()
+{
+    auto tree = ryml::parse("{foo: 0, bar: 1}");
+    check(tree, "foo", "0");
+    check(tree, "bar", "1");
+    return 0;
+}
