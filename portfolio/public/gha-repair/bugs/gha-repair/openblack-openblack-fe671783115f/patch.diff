diff --git a/.github/workflows/ci.yml b/.github/workflows/ci.yml
index 4158128..f5b5f24 100644
--- a/.github/workflows/ci.yml
+++ b/.github/workflows/ci.yml
@@ -1,116 +1,86 @@
 name: CI
 on: [push, pull_request]
 jobs:
-  ubuntu:
-    name: ubuntu-${{ matrix.cc }}
-    runs-on: ubuntu-latest
+  job:
+    name: ${{ matrix.os }}
+    runs-on: ${{ matrix.os }}
     strategy:
       fail-fast: false
       matrix:
         include:
-          - cc: gcc
-            cxx: g++
-          - cc: clang
-            cxx: clang++
+          - os: windows-latest
+            triplet: x64-windows
+          # - os: windows-latest
+          #   triplet: x86-windows
+          # - os: windows-latest
+          #   triplet: arm64-windows
+          - os: ubuntu-latest
+            triplet: x64-linux
+          #   cc: gcc
+          #   cxx: g++
+          # - os: ubuntu-latest
+          #   triplet: x64-linux
+          #   cc: clang
+          #   cxx: clang++
+          # - os: macos-latest
+          #   triplet: x64-osx
+
     env:
-      buildDir: '${{ github.workspace }}/build'
+      # Indicates the CMake build directory where project files and binaries are being produced.
+      CMAKE_BUILD_DIR: ${{ github.workspace }}/build/
+      # Indicates the location of the vcpkg as a Git submodule of the project repository.
+      VCPKG_ROOT: ${{ github.workspace }}/vcpkg
+
     steps:
-      - name: Checkout
-        uses: actions/checkout@v2
+      - uses: actions/checkout@v2
         with:
           submodules: true
-      - name: Install packages
+
+      - name: Install Linux dependencies
         run: |
           sudo apt install -y libgl1-mesa-dev libglu1-mesa-dev
-      - name: Get latest CMake and ninja
-        uses: lukka/get-cmake@latest
+        if: matrix.os == 'ubuntu-latest'
+
+      # Setup nasm, needed for ffmpeg stuff
       - uses: ilammy/setup-nasm@v1
-      - name: Set Environment vars
-        run: |
-          echo "CXX=${{ matrix.cxx }}" >> $GITHUB_ENV
-          echo "CC=${{ matrix.cc }}" >> $GITHUB_ENV
-      - name: Install vcpkg, install dependencies with vcpkg
-        uses: lukka/run-vcpkg@v6
-        with:
-          # Install ports now so they're cached incase of any build errors afterwards
-          setupOnly: true
-          # Location of the vcpkg as submodule of the repository.
-          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
-          # Since the cache must be invalidated when content of the vcpkg.json file changes, let's
-          # compute its hash and append this to the computed cache's key.
-          appendedCacheKey: ${{ hashFiles( '**/vcpkg.json' ) }}
-          vcpkgTriplet: x64-linux
-          # Ensure the vcpkg artifacts are cached, they are generated in the 'CMAKE_BINARY_DIR/vcpkg_installed'.
-          additionalCachedPaths: ${{ env.buildDir }}/vcpkg_installed
-      - name: 'Run CMake with Ninja, build with CMake'
-        uses: lukka/run-cmake@v3
-        with:
-          cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
-          cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
-          useVcpkgToolchainFile: true
-          cmakeBuildType: Release
-          cmakeAppendedArgs: '-GNinja -DOPENBLACK_USE_VCPKG=true -DOPENBLACK_BUILD_BGFX=true'
-          buildDirectory: ${{ env.buildDir }}
 
-  windows:
-    name: Windows
-    runs-on: windows-latest
-    strategy:
-      fail-fast: false
-      matrix:
-        include:
-          - platform: Win32
-            triplet: x86-windows
-            arch: x86
-          - platform: x64
-            arch: x64
-            triplet: x64-windows
-          # - platform: arm64
-          #   arch: arm64
-          #   triplet: arm64-winddws
-    env:
-      CONFIGURATION: Release
-      PLATFORM: ${{ matrix.platform }}
-      buildDir: '${{ github.workspace }}/build'
-    steps:
-      - name: Checkout
-        uses: actions/checkout@v2
-        with:
-          submodules: true
-      - name: Get latest CMake and ninja
-        uses: lukka/get-cmake@latest
-      - name: Install vcpkg, install dependencies with vcpkg
-        uses: lukka/run-vcpkg@v6
+      # Setup the build machine with the most recent versions of CMake and Ninja. Both are cached if not already: on subsequent runs both will be quickly restored from GitHub cache service.
+      - uses: lukka/get-cmake@latest
+
+      # Restore both vcpkg and its artifacts from the GitHub cache service.
+      - name: Restore vcpkg and its artifacts.
+        uses: actions/cache@v2
         with:
-          # Install ports now so they're cached incase of any build errors afterwards
-          setupOnly: true
-          # Location of the vcpkg as submodule of the repository.
-          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
-          # Since the cache must be invalidated when content of the vcpkg.json file changes, let's
-          # compute its hash and append this to the computed cache's key.
-          appendedCacheKey: ${{ hashFiles( '**/vcpkg.json' ) }}
-          vcpkgTriplet: ${{ matrix.triplet }}
-          # Ensure the vcpkg artifacts are cached, they are generated in the 'CMAKE_BINARY_DIR/vcpkg_installed'.
-          additionalCachedPaths: ${{ env.buildDir }}/vcpkg_installed
-      - name: Download and install precompiled BGFX
+          # The first path is where vcpkg generates artifacts while consuming the vcpkg.json manifest file.
+          # The second path is the location of vcpkg (it contains the vcpkg executable and data files).
+          # The other paths starting with '!' are exclusions: they contain termporary files generated during the build of the installed packages.
+          path: |
+            ${{ env.CMAKE_BUILD_DIR }}/vcpkg_installed/
+            ${{ env.VCPKG_ROOT }}
+            !${{ env.VCPKG_ROOT }}/buildtrees
+            !${{ env.VCPKG_ROOT }}/packages
+            !${{ env.VCPKG_ROOT }}/downloads
+          # The key is composed in a way that it gets properly invalidated: this must happen whenever vcpkg's Git commit id changes, or the list of packages changes. In this case a cache miss must happen and a new entry with a new key with be pushed to GitHub the cache service.
+          # The key includes: hash of the vcpkg.json file, the hash of the vcpkg Git commit id, and the used vcpkg's triplet. The vcpkg's commit id would suffice, but computing an hash out it does not harm.
+          # Note: given a key, the cache content is immutable. If a cache entry has been created improperly, in order the recreate the right content the key must be changed as well, and it must be brand new (i.e. not existing already).
+          key: |
+            ${{ hashFiles( 'vcpkg_manifest/vcpkg.json' ) }}-${{ hashFiles( '.git/modules/vcpkg/HEAD' )}}-${{ matrix.triplet }}-invalidate
+      - name: Show content of workspace after cache has been restored
+        run: find $RUNNER_WORKSPACE
         shell: bash
+
+      # On Windows runners, let's ensure to have the Developer Command Prompt environment setup correctly. As used here the Developer Command Prompt created is targeting x64 and using the default the Windows SDK.
+      - uses: ilammy/msvc-dev-cmd@v1
+
+      # Run CMake to generate Ninja project files, using the vcpkg's toolchain file to resolve and install the dependencies as specified in vcpkg.json.
+      - name: Install dependencies and generate project files
         run: |
-          echo "::group::Download BGFX"
-          curl -L https://github.com/openblack/bgfx.cmake/releases/download/latest/bgfx-windows-${{ matrix.platform }}.7z -o bgfx-windows.7z
-          echo "::endgroup::"
-          echo "::group::Unpack BGFX"
-          7z x bgfx-windows.7z -oc:/bgfx
-          echo "::endgroup::"
-          rm -f bgfx-windows.7z
-      - name: Configure developer command prompt for ${{ matrix.arch }}
-        uses: ilammy/msvc-dev-cmd@v1
-        with:
-          arch: ${{ matrix.arch }}
-      - name: 'Run CMake with Ninja, build with CMake'
-        uses: lukka/run-cmake@v3
-        with:
-          cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
-          cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
-          useVcpkgToolchainFile: true
-          cmakeAppendedArgs: '-GNinja -DOPENBLACK_USE_VCPKG=true -Dbgfx_DIR=c:/bgfx/lib/cmake/bgfx'
-          buildDirectory: ${{ env.buildDir }}
+          cmake -B "${{ env.CMAKE_BUILD_DIR }}" -GNinja -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake"
+
+      # Build the whole project with Ninja (which is spawn by CMake).
+      - name: Build
+        run: |
+          cmake --build "${{ env.CMAKE_BUILD_DIR }}"
+      - name: Show content of workspace at its completion
+        run: find $RUNNER_WORKSPACE
+        shell: bash
