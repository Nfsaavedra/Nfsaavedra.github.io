diff --git a/.github/workflows/ci.yml b/.github/workflows/ci.yml
index 359969b..f17eb99 100644
--- a/.github/workflows/ci.yml
+++ b/.github/workflows/ci.yml
@@ -58,14 +58,6 @@ jobs:
         with:
           command: test
 
-      - name: "Example: `basic`"
-        working-directory: examples/basic
-        run: cargo kimage
-
-      - name: "Example: `test_framework` example"
-        working-directory: examples/test_framework
-        run: cargo ktest
-
   fmt:
     name: Check Formatting
     runs-on: ubuntu-latest
diff --git a/examples/README.md b/examples/README.md
deleted file mode 100644
index fe989f6..0000000
--- a/examples/README.md
+++ /dev/null
@@ -1,4 +0,0 @@
-## Usage Examples
-
-- [`basic`](basic)
-- [`test_framework`](test_framework)
diff --git a/examples/basic/.cargo/config.toml b/examples/basic/.cargo/config.toml
deleted file mode 100644
index 7db03db..0000000
--- a/examples/basic/.cargo/config.toml
+++ /dev/null
@@ -1,7 +0,0 @@
-[target.'cfg(target_os = "none")']
-runner = "cargo run --package simple_boot --"
-
-[alias]
-kbuild = "build --target x86_64-custom.json -Zbuild-std=core -Zbuild-std-features=compiler-builtins-mem"
-kimage = "run --target x86_64-custom.json -Zbuild-std=core -Zbuild-std-features=compiler-builtins-mem -- --no-run"
-krun = "run --target x86_64-custom.json -Zbuild-std=core -Zbuild-std-features=compiler-builtins-mem"
diff --git a/examples/basic/.gitignore b/examples/basic/.gitignore
deleted file mode 100644
index eb5a316..0000000
--- a/examples/basic/.gitignore
+++ /dev/null
@@ -1,1 +0,0 @@
-target
diff --git a/examples/basic/Cargo.lock b/examples/basic/Cargo.lock
deleted file mode 100644
index aeaf1c0..0000000
--- a/examples/basic/Cargo.lock
+++ /dev/null
@@ -1,46 +0,0 @@
-# This file is automatically @generated by Cargo.
-# It is not intended for manual editing.
-version = 3
-
-[[package]]
-name = "basic_example"
-version = "0.1.0"
-dependencies = [
- "bootloader_api",
-]
-
-[[package]]
-name = "bootloader-locator"
-version = "0.0.4"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "aaaa9db3339d32c2622f2e5d0731eb82a468d3439797c9d4fe426744fe2bd551"
-dependencies = [
- "json",
-]
-
-[[package]]
-name = "bootloader_api"
-version = "0.1.0"
-
-[[package]]
-name = "json"
-version = "0.12.4"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "078e285eafdfb6c4b434e0d31e8cfcb5115b651496faca5749b88fafd4f23bfd"
-
-[[package]]
-name = "locate-cargo-manifest"
-version = "0.2.2"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "db985b63431fe09e8d71f50aeceffcc31e720cb86be8dad2f38d084c5a328466"
-dependencies = [
- "json",
-]
-
-[[package]]
-name = "simple_boot"
-version = "0.1.0"
-dependencies = [
- "bootloader-locator",
- "locate-cargo-manifest",
-]
diff --git a/examples/basic/Cargo.toml b/examples/basic/Cargo.toml
deleted file mode 100644
index a29f895..0000000
--- a/examples/basic/Cargo.toml
+++ /dev/null
@@ -1,14 +0,0 @@
-[package]
-name = "basic_example"
-version = "0.1.0"
-edition = "2018"
-
-# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html
-
-[workspace]
-members = [
-    "simple_boot",
-]
-
-[dependencies]
-bootloader_api = { path = "../../api" } # replace this with a version number
diff --git a/examples/basic/README.md b/examples/basic/README.md
deleted file mode 100644
index 32c37c7..0000000
--- a/examples/basic/README.md
+++ /dev/null
@@ -1,17 +0,0 @@
-# Basic Example
-
-This a minimal example how to create a bootable disk image with the `bootloader` crate.
-
-## Structure
-
-The kernel code is in `src/main.rs`. It requires some special build instructions to recompile the `core` library for the custom target defined in `x86_64-custom.json`. It depends on the `bootloader` crate for booting..
-
-The `simple_boot` sub-crate is responsible for combining the kernel with the bootloader to create bootable disk images. It is configured as a [custom _runner_](https://doc.rust-lang.org/cargo/reference/config.html#targettriplerunner), which means that cargo will automatically invoke it on `cargo run`. The compiled kernel will hereby be passed as an argument.
-
-## Build Commands
-
-The `.cargo/config.toml` file defines command aliases for the common commands:
-
-- To build the kernel, run **`cargo kbuild`**.
-- To build the kernel and turn it into a bootable disk image, run **`cargo kimage`** (short for "kernel image"). This will invoke our `boot` sub-crate with an additional `--no-run` argument so that it just creates the disk image and exits.
-- To additionally run the kernel in QEMU after creating the disk image, run **`cargo krun`**.
diff --git a/examples/basic/simple_boot/Cargo.toml b/examples/basic/simple_boot/Cargo.toml
deleted file mode 100644
index 5302cdb..0000000
--- a/examples/basic/simple_boot/Cargo.toml
+++ /dev/null
@@ -1,11 +0,0 @@
-[package]
-name = "simple_boot"
-version = "0.1.0"
-authors = ["Philipp Oppermann <dev@phil-opp.com>"]
-edition = "2018"
-
-# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html
-
-[dependencies]
-bootloader-locator = "0.0.4" # for locating the `bootloader` dependency on disk
-locate-cargo-manifest = "0.2.0" # for locating the kernel's `Cargo.toml`
diff --git a/examples/basic/simple_boot/src/main.rs b/examples/basic/simple_boot/src/main.rs
deleted file mode 100644
index 92814ba..0000000
--- a/examples/basic/simple_boot/src/main.rs
+++ /dev/null
@@ -1,78 +0,0 @@
-use std::{
-    path::{Path, PathBuf},
-    process::Command,
-};
-
-const RUN_ARGS: &[&str] = &["--no-reboot", "-s"];
-
-fn main() {
-    let mut args = std::env::args().skip(1); // skip executable name
-
-    let kernel_binary_path = {
-        let path = PathBuf::from(args.next().unwrap());
-        path.canonicalize().unwrap()
-    };
-    let no_boot = if let Some(arg) = args.next() {
-        match arg.as_str() {
-            "--no-run" => true,
-            other => panic!("unexpected argument `{}`", other),
-        }
-    } else {
-        false
-    };
-
-    let bios = create_disk_images(&kernel_binary_path);
-
-    if no_boot {
-        println!("Created disk image at `{}`", bios.display());
-        return;
-    }
-
-    let mut run_cmd = Command::new("qemu-system-x86_64");
-    run_cmd
-        .arg("-drive")
-        .arg(format!("format=raw,file={}", bios.display()));
-    run_cmd.args(RUN_ARGS);
-
-    let exit_status = run_cmd.status().unwrap();
-    if !exit_status.success() {
-        std::process::exit(exit_status.code().unwrap_or(1));
-    }
-}
-
-pub fn create_disk_images(kernel_binary_path: &Path) -> PathBuf {
-    let bootloader_manifest_path = bootloader_locator::locate_bootloader("bootloader").unwrap();
-    let kernel_manifest_path = locate_cargo_manifest::locate_manifest().unwrap();
-
-    let mut build_cmd = Command::new(env!("CARGO"));
-    build_cmd.current_dir(bootloader_manifest_path.parent().unwrap());
-    build_cmd.arg("builder");
-    build_cmd
-        .arg("--kernel-manifest")
-        .arg(&kernel_manifest_path);
-    build_cmd.arg("--kernel-binary").arg(&kernel_binary_path);
-    build_cmd
-        .arg("--target-dir")
-        .arg(kernel_manifest_path.parent().unwrap().join("target"));
-    build_cmd
-        .arg("--out-dir")
-        .arg(kernel_binary_path.parent().unwrap());
-    build_cmd.arg("--quiet");
-
-    if !build_cmd.status().unwrap().success() {
-        panic!("build failed");
-    }
-
-    let kernel_binary_name = kernel_binary_path.file_name().unwrap().to_str().unwrap();
-    let disk_image = kernel_binary_path
-        .parent()
-        .unwrap()
-        .join(format!("boot-bios-{}.img", kernel_binary_name));
-    if !disk_image.exists() {
-        panic!(
-            "Disk image does not exist at {} after bootloader build",
-            disk_image.display()
-        );
-    }
-    disk_image
-}
diff --git a/examples/basic/src/main.rs b/examples/basic/src/main.rs
deleted file mode 100644
index 9ac8d38..0000000
--- a/examples/basic/src/main.rs
+++ /dev/null
@@ -1,24 +0,0 @@
-#![no_std]
-#![no_main]
-
-use bootloader_api::{entry_point, BootInfo};
-use core::panic::PanicInfo;
-
-entry_point!(kernel_main);
-
-fn kernel_main(boot_info: &'static mut BootInfo) -> ! {
-    // turn the screen gray
-    if let Some(framebuffer) = boot_info.framebuffer.as_mut() {
-        for byte in framebuffer.buffer_mut() {
-            *byte = 0x90;
-        }
-    }
-
-    loop {}
-}
-
-
-#[panic_handler]
-fn panic(_info: &PanicInfo) -> ! {
-    loop {}
-}
diff --git a/examples/basic/x86_64-custom.json b/examples/basic/x86_64-custom.json
deleted file mode 100644
index c1c29f9..0000000
--- a/examples/basic/x86_64-custom.json
+++ /dev/null
@@ -1,15 +0,0 @@
-{
-    "llvm-target": "x86_64-unknown-none",
-    "data-layout": "e-m:e-i64:64-f80:128-n8:16:32:64-S128",
-    "arch": "x86_64",
-    "target-endian": "little",
-    "target-pointer-width": "64",
-    "target-c-int-width": "32",
-    "os": "none",
-    "executables": true,
-    "linker-flavor": "ld.lld",
-    "linker": "rust-lld",
-    "panic-strategy": "abort",
-    "disable-redzone": true,
-    "features": "-mmx,-sse,+soft-float"
-  }
\ No newline at end of file
diff --git a/examples/test_framework/.cargo/config.toml b/examples/test_framework/.cargo/config.toml
deleted file mode 100644
index c930ed2..0000000
--- a/examples/test_framework/.cargo/config.toml
+++ /dev/null
@@ -1,8 +0,0 @@
-[target.'cfg(target_os = "none")']
-runner = "cargo run --package boot --"
-
-[alias]
-kbuild = "build --target x86_64-custom.json -Zbuild-std=core -Zbuild-std-features=compiler-builtins-mem"
-kimage = "run --target x86_64-custom.json -Zbuild-std=core -Zbuild-std-features=compiler-builtins-mem -- --no-run"
-krun = "run --target x86_64-custom.json -Zbuild-std=core -Zbuild-std-features=compiler-builtins-mem"
-ktest = "test --target x86_64-custom.json -Zbuild-std=core -Zbuild-std-features=compiler-builtins-mem"
diff --git a/examples/test_framework/.gitignore b/examples/test_framework/.gitignore
deleted file mode 100644
index eb5a316..0000000
--- a/examples/test_framework/.gitignore
+++ /dev/null
@@ -1,1 +0,0 @@
-target
diff --git a/examples/test_framework/Cargo.lock b/examples/test_framework/Cargo.lock
deleted file mode 100644
index 916dbd5..0000000
--- a/examples/test_framework/Cargo.lock
+++ /dev/null
@@ -1,193 +0,0 @@
-# This file is automatically @generated by Cargo.
-# It is not intended for manual editing.
-version = 3
-
-[[package]]
-name = "bit_field"
-version = "0.9.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ed8765909f9009617974ab6b7d332625b320b33c326b1e9321382ef1999b5d56"
-
-[[package]]
-name = "bitflags"
-version = "1.2.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "cf1de2fe8c75bc145a2f577add951f8134889b4795d47466a54a5c846d691693"
-
-[[package]]
-name = "boot"
-version = "0.1.0"
-dependencies = [
- "bootloader-locator",
- "locate-cargo-manifest",
- "runner-utils",
-]
-
-[[package]]
-name = "bootloader"
-version = "0.10.4"
-
-[[package]]
-name = "bootloader-locator"
-version = "0.0.4"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "aaaa9db3339d32c2622f2e5d0731eb82a468d3439797c9d4fe426744fe2bd551"
-dependencies = [
- "json",
-]
-
-[[package]]
-name = "json"
-version = "0.12.4"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "078e285eafdfb6c4b434e0d31e8cfcb5115b651496faca5749b88fafd4f23bfd"
-
-[[package]]
-name = "libc"
-version = "0.2.94"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "18794a8ad5b29321f790b55d93dfba91e125cb1a9edbd4f8e3150acc771c1a5e"
-
-[[package]]
-name = "locate-cargo-manifest"
-version = "0.2.2"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "db985b63431fe09e8d71f50aeceffcc31e720cb86be8dad2f38d084c5a328466"
-dependencies = [
- "json",
-]
-
-[[package]]
-name = "lock_api"
-version = "0.4.4"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "0382880606dff6d15c9476c416d18690b72742aa7b605bb6dd6ec9030fbf07eb"
-dependencies = [
- "scopeguard",
-]
-
-[[package]]
-name = "proc-macro2"
-version = "1.0.26"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a152013215dca273577e18d2bf00fa862b89b24169fb78c4c95aeb07992c9cec"
-dependencies = [
- "unicode-xid",
-]
-
-[[package]]
-name = "quote"
-version = "1.0.9"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c3d0b9745dc2debf507c8422de05d7226cc1f0644216dfdfead988f9b1ab32a7"
-dependencies = [
- "proc-macro2",
-]
-
-[[package]]
-name = "runner-utils"
-version = "0.0.2"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c9dc6848b056990cd51e72aa5556bdbea4a96013e8b18635d183c84159c2988f"
-dependencies = [
- "thiserror",
- "wait-timeout",
-]
-
-[[package]]
-name = "scopeguard"
-version = "1.1.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "d29ab0c6d3fc0ee92fe66e2d99f700eab17a8d57d1c1d3b748380fb20baa78cd"
-
-[[package]]
-name = "spin"
-version = "0.9.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b87bbf98cb81332a56c1ee8929845836f85e8ddd693157c30d76660196014478"
-dependencies = [
- "lock_api",
-]
-
-[[package]]
-name = "syn"
-version = "1.0.72"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a1e8cdbefb79a9a5a65e0db8b47b723ee907b7c7f8496c76a1770b5c310bab82"
-dependencies = [
- "proc-macro2",
- "quote",
- "unicode-xid",
-]
-
-[[package]]
-name = "test_framework_example"
-version = "0.1.0"
-dependencies = [
- "bootloader",
- "spin",
- "uart_16550",
- "x86_64",
-]
-
-[[package]]
-name = "thiserror"
-version = "1.0.24"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "e0f4a65597094d4483ddaed134f409b2cb7c1beccf25201a9f73c719254fa98e"
-dependencies = [
- "thiserror-impl",
-]
-
-[[package]]
-name = "thiserror-impl"
-version = "1.0.24"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "7765189610d8241a44529806d6fd1f2e0a08734313a35d5b3a556f92b381f3c0"
-dependencies = [
- "proc-macro2",
- "quote",
- "syn",
-]
-
-[[package]]
-name = "uart_16550"
-version = "0.2.14"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "503a6c0e6d82daa87985e662d120c0176b09587c92a68db22781b28ae95405dd"
-dependencies = [
- "bitflags",
- "x86_64",
-]
-
-[[package]]
-name = "unicode-xid"
-version = "0.2.2"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "8ccb82d61f80a663efe1f787a51b16b5a51e3314d6ac365b08639f52387b33f3"
-
-[[package]]
-name = "volatile"
-version = "0.4.4"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "e4c2dbd44eb8b53973357e6e207e370f0c1059990df850aca1eca8947cf464f0"
-
-[[package]]
-name = "wait-timeout"
-version = "0.2.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "9f200f5b12eb75f8c1ed65abd4b2db8a6e1b138a20de009dacee265a2498f3f6"
-dependencies = [
- "libc",
-]
-
-[[package]]
-name = "x86_64"
-version = "0.14.2"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "13f09cffc08ee86bf5e4d147f107a43de0885c53ffad799b39f4ad203fb2a27d"
-dependencies = [
- "bit_field",
- "bitflags",
- "volatile",
-]
diff --git a/examples/test_framework/Cargo.toml b/examples/test_framework/Cargo.toml
deleted file mode 100644
index 01bbd69..0000000
--- a/examples/test_framework/Cargo.toml
+++ /dev/null
@@ -1,17 +0,0 @@
-[package]
-name = "test_framework_example"
-version = "0.1.0"
-edition = "2018"
-
-# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html
-
-[workspace]
-members = [
-    "boot",
-]
-
-[dependencies]
-bootloader_api = { path = "../../api" } # replace this with a version number
-x86_64 = "0.14.7"
-uart_16550 = "0.2.14"
-spin = { version = "0.9.0", features = ["lazy"] }
diff --git a/examples/test_framework/README.md b/examples/test_framework/README.md
deleted file mode 100644
index edd9bb0..0000000
--- a/examples/test_framework/README.md
+++ /dev/null
@@ -1,18 +0,0 @@
-# Test Framework Example
-
-This examples showcases how kernels can implement unit and integration testing using the `bootloader` crate.
-
-## Structure
-
-The kernel code is in `src/main.rs`. It requires some special build instructions to recompile the `core` library for the custom target defined in `x86_64-custom.json`. It depends on the `bootloader` crate for booting and [uses the unstable `custom_test_frameworks`](https://os.phil-opp.com/testing/#custom-test-frameworks) feature.
-
-The `boot` sub-crate is responsible for combining the kernel with the bootloader to create bootable disk images. It is configured as a [custom _runner_](https://doc.rust-lang.org/cargo/reference/config.html#targettriplerunner), which means that cargo will automatically invoke it on `cargo run` and `cargo test`. The compiled kernel will hereby be passed as an argument.
-
-## Build Commands
-
-The `.cargo/config.toml` file defines command aliases for the common commands:
-
-- To build the kernel, run **`cargo kbuild`**.
-- To build the kernel and turn it into a bootable disk image, run **`cargo kimage`** (short for "kernel image"). This will invoke our `boot` sub-crate with an additional `--no-run` argument so that it just creates the disk image and exits.
-- To additionally run the kernel in QEMU after creating the disk image, run **`cargo krun`**.
-- To run the unit tests in QEMU, run **`cargo ktest`**.
diff --git a/examples/test_framework/boot/Cargo.toml b/examples/test_framework/boot/Cargo.toml
deleted file mode 100644
index 89ab899..0000000
--- a/examples/test_framework/boot/Cargo.toml
+++ /dev/null
@@ -1,12 +0,0 @@
-[package]
-name = "boot"
-version = "0.1.0"
-authors = ["Philipp Oppermann <dev@phil-opp.com>"]
-edition = "2018"
-
-# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html
-
-[dependencies]
-bootloader-locator = "0.0.4" # for locating the `bootloader` dependency on disk
-runner-utils = "0.0.2" # small helper functions for custom runners (e.g. timeouts)
-locate-cargo-manifest = "0.2.0" # for locating the kernel's `Cargo.toml`
diff --git a/examples/test_framework/boot/src/main.rs b/examples/test_framework/boot/src/main.rs
deleted file mode 100644
index e10ea6d..0000000
--- a/examples/test_framework/boot/src/main.rs
+++ /dev/null
@@ -1,105 +0,0 @@
-use std::{
-    path::{Path, PathBuf},
-    process::{Command, ExitStatus},
-    time::Duration,
-};
-
-const RUN_ARGS: &[&str] = &["--no-reboot", "-s"];
-const TEST_ARGS: &[&str] = &[
-    "-device",
-    "isa-debug-exit,iobase=0xf4,iosize=0x04",
-    "-serial",
-    "stdio",
-    "-display",
-    "none",
-    "--no-reboot",
-];
-const TEST_TIMEOUT_SECS: u64 = 10;
-
-fn main() {
-    let mut args = std::env::args().skip(1); // skip executable name
-
-    let kernel_binary_path = {
-        let path = PathBuf::from(args.next().unwrap());
-        path.canonicalize().unwrap()
-    };
-    let no_boot = if let Some(arg) = args.next() {
-        match arg.as_str() {
-            "--no-run" => true,
-            other => panic!("unexpected argument `{}`", other),
-        }
-    } else {
-        false
-    };
-
-    let bios = create_disk_images(&kernel_binary_path);
-
-    if no_boot {
-        println!("Created disk image at `{}`", bios.display());
-        return;
-    }
-
-    let mut run_cmd = Command::new("qemu-system-x86_64");
-    run_cmd
-        .arg("-drive")
-        .arg(format!("format=raw,file={}", bios.display()));
-
-    let binary_kind = runner_utils::binary_kind(&kernel_binary_path);
-    if binary_kind.is_test() {
-        run_cmd.args(TEST_ARGS);
-
-        let exit_status = run_test_command(run_cmd);
-        match exit_status.code() {
-            Some(33) => {} // success
-            other => panic!("Test failed (exit code: {:?})", other),
-        }
-    } else {
-        run_cmd.args(RUN_ARGS);
-
-        let exit_status = run_cmd.status().unwrap();
-        if !exit_status.success() {
-            std::process::exit(exit_status.code().unwrap_or(1));
-        }
-    }
-}
-
-fn run_test_command(mut cmd: Command) -> ExitStatus {
-    runner_utils::run_with_timeout(&mut cmd, Duration::from_secs(TEST_TIMEOUT_SECS)).unwrap()
-}
-
-pub fn create_disk_images(kernel_binary_path: &Path) -> PathBuf {
-    let bootloader_manifest_path = bootloader_locator::locate_bootloader("bootloader").unwrap();
-    let kernel_manifest_path = locate_cargo_manifest::locate_manifest().unwrap();
-
-    let mut build_cmd = Command::new(env!("CARGO"));
-    build_cmd.current_dir(bootloader_manifest_path.parent().unwrap());
-    build_cmd.arg("builder");
-    build_cmd
-        .arg("--kernel-manifest")
-        .arg(&kernel_manifest_path);
-    build_cmd.arg("--kernel-binary").arg(&kernel_binary_path);
-    build_cmd
-        .arg("--target-dir")
-        .arg(kernel_manifest_path.parent().unwrap().join("target"));
-    build_cmd
-        .arg("--out-dir")
-        .arg(kernel_binary_path.parent().unwrap());
-    build_cmd.arg("--quiet");
-
-    if !build_cmd.status().unwrap().success() {
-        panic!("build failed");
-    }
-
-    let kernel_binary_name = kernel_binary_path.file_name().unwrap().to_str().unwrap();
-    let disk_image = kernel_binary_path
-        .parent()
-        .unwrap()
-        .join(format!("boot-bios-{}.img", kernel_binary_name));
-    if !disk_image.exists() {
-        panic!(
-            "Disk image does not exist at {} after bootloader build",
-            disk_image.display()
-        );
-    }
-    disk_image
-}
diff --git a/examples/test_framework/src/main.rs b/examples/test_framework/src/main.rs
deleted file mode 100644
index deaa75c..0000000
--- a/examples/test_framework/src/main.rs
+++ /dev/null
@@ -1,89 +0,0 @@
-#![no_std]
-#![no_main]
-#![feature(custom_test_frameworks)]
-#![test_runner(test_runner)]
-#![reexport_test_harness_main = "test_main"]
-
-use bootloader_api::{entry_point, BootInfo};
-use core::panic::PanicInfo;
-
-mod serial;
-
-entry_point!(kernel_main);
-
-fn kernel_main(boot_info: &'static mut BootInfo) -> ! {
-    // turn the screen gray
-    if let Some(framebuffer) = boot_info.framebuffer.as_mut() {
-        for byte in framebuffer.buffer_mut() {
-            *byte = 0x90;
-        }
-    }
-
-    #[cfg(test)]
-    test_main();
-
-    loop {}
-}
-
-pub fn test_runner(tests: &[&dyn Testable]) {
-    serial_println!("Running {} tests", tests.len());
-    for test in tests {
-        test.run();
-    }
-    exit_qemu(QemuExitCode::Success);
-}
-
-pub trait Testable {
-    fn run(&self) -> ();
-}
-
-impl<T> Testable for T
-where
-    T: Fn(),
-{
-    fn run(&self) {
-        serial_print!("{}...\t", core::any::type_name::<T>());
-        self();
-        serial_println!("[ok]");
-    }
-}
-
-#[cfg(not(test))]
-#[panic_handler]
-fn panic(_info: &PanicInfo) -> ! {
-    loop {}
-}
-
-#[cfg(test)]
-#[panic_handler]
-fn panic(info: &PanicInfo) -> ! {
-    serial_println!("[failed]\n");
-    serial_println!("Error: {}\n", info);
-    exit_qemu(QemuExitCode::Failed);
-}
-
-#[derive(Debug, Clone, Copy, PartialEq, Eq)]
-#[repr(u32)]
-pub enum QemuExitCode {
-    Success = 0x10,
-    Failed = 0x11,
-}
-
-pub fn exit_qemu(exit_code: QemuExitCode) -> ! {
-    use x86_64::instructions::port::Port;
-
-    unsafe {
-        let mut port = Port::new(0xf4);
-        port.write(exit_code as u32);
-    }
-
-    loop {}
-}
-
-#[cfg(test)]
-mod tests {
-    #[test_case]
-    fn trivial_assertion() {
-        assert_eq!(1, 1);
-    }
-}
diff --git a/examples/test_framework/src/serial.rs b/examples/test_framework/src/serial.rs
deleted file mode 100644
index 3f4a3da..0000000
--- a/examples/test_framework/src/serial.rs
+++ /dev/null
@@ -1,38 +0,0 @@
-use spin::{Lazy, Mutex};
-use uart_16550::SerialPort;
-
-pub static SERIAL1: Lazy<Mutex<SerialPort>> = Lazy::new(|| {
-    let mut serial_port = unsafe { SerialPort::new(0x3F8) };
-    serial_port.init();
-    Mutex::new(serial_port)
-});
-
-#[doc(hidden)]
-pub fn _print(args: ::core::fmt::Arguments) {
-    use core::fmt::Write;
-    use x86_64::instructions::interrupts;
-
-    interrupts::without_interrupts(|| {
-        SERIAL1
-            .lock()
-            .write_fmt(args)
-            .expect("Printing to serial failed");
-    });
-}
-
-/// Prints to the host through the serial interface.
-#[macro_export]
-macro_rules! serial_print {
-    ($($arg:tt)*) => {
-        $crate::serial::_print(format_args!($($arg)*));
-    };
-}
-
-/// Prints to the host through the serial interface, appending a newline.
-#[macro_export]
-macro_rules! serial_println {
-    () => ($crate::serial_print!("\n"));
-    ($fmt:expr) => ($crate::serial_print!(concat!($fmt, "\n")));
-    ($fmt:expr, $($arg:tt)*) => ($crate::serial_print!(
-        concat!($fmt, "\n"), $($arg)*));
-}
diff --git a/examples/test_framework/x86_64-custom.json b/examples/test_framework/x86_64-custom.json
deleted file mode 100644
index c1c29f9..0000000
--- a/examples/test_framework/x86_64-custom.json
+++ /dev/null
@@ -1,15 +0,0 @@
-{
-    "llvm-target": "x86_64-unknown-none",
-    "data-layout": "e-m:e-i64:64-f80:128-n8:16:32:64-S128",
-    "arch": "x86_64",
-    "target-endian": "little",
-    "target-pointer-width": "64",
-    "target-c-int-width": "32",
-    "os": "none",
-    "executables": true,
-    "linker-flavor": "ld.lld",
-    "linker": "rust-lld",
-    "panic-strategy": "abort",
-    "disable-redzone": true,
-    "features": "-mmx,-sse,+soft-float"
-  }
\ No newline at end of file
