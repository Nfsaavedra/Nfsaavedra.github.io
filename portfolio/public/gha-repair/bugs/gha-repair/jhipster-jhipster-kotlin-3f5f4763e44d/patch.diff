diff --git a/.github/workflows/angular.yml b/.github/workflows/angular.yml
index a474ce1..acf8197 100644
--- a/.github/workflows/angular.yml
+++ b/.github/workflows/angular.yml
@@ -75,7 +75,6 @@ jobs:
             github.event.action != 'closed' &&
             !contains(github.event.pull_request.labels.*.name, 'pr: skip-ci') &&
             needs.build-matrix.outputs.workflow-angular == 'true'
-        timeout-minutes: 50
         strategy:
             fail-fast: false
             # Matrix available at https://github.com/jhipster/jhipster-kotlin/tree/main/test-integration/workflow-samples/
@@ -191,30 +190,24 @@ jobs:
             - name: 'PREPARE: npm install'
               if: steps.compare.outputs.equals != 'true'
               run: ${{ (matrix.workspaces == 'true' && 'npm') || './npmw' }} install
-              timeout-minutes: 7
             - name: 'TESTS: backend'
               id: backend
               if: steps.compare.outputs.equals != 'true' && matrix.skip-backend-tests != 1 && needs.build-matrix.outputs.server != 'false'
               run: npm run ci:backend:test
               continue-on-error: ${{matrix.continue-on-backend-tests-error || false}}
-              timeout-minutes: 20
             - name: 'TESTS: frontend'
               if: steps.compare.outputs.equals != 'true' && matrix.skip-frontend-tests != 1 && needs.build-matrix.outputs.client != 'false'
               run: npm run ci:frontend:test
-              timeout-minutes: 15
             - name: 'TESTS: packaging'
               if: steps.compare.outputs.equals != 'true'
               run: npm run ci:e2e:package
-              timeout-minutes: 7
             - name: 'TESTS: Start docker-compose containers for e2e tests'
               if: steps.compare.outputs.equals != 'true'
               run: npm run ci:e2e:prepare
-              timeout-minutes: 5
             - name: 'E2E: Run'
               id: e2e
               if: steps.compare.outputs.equals != 'true'
               run: npm run ci:e2e:run --if-present
-              timeout-minutes: 20
             - name: 'BACKEND: Store failure logs'
               uses: actions/upload-artifact@v3
               if: always() && steps.backend.outcome == 'failure'
diff --git a/generators/entity-server/templates/src/main/kotlin/package/domain/EntityCallback.java.ejs b/generators/entity-server/templates/src/main/kotlin/package/domain/EntityCallback.java.ejs
deleted file mode 100644
index dc0c84e..0000000
--- a/generators/entity-server/templates/src/main/kotlin/package/domain/EntityCallback.java.ejs
+++ /dev/null
@@ -1,41 +0,0 @@
-<%#
- Copyright 2013-2022 the original author or authors from the JHipster project.
-
- This file is part of the JHipster project, see https://www.jhipster.tech/
- for more information.
-
- Licensed under the Apache License, Version 2.0 (the "License");
- you may not use this file except in compliance with the License.
- You may obtain a copy of the License at
-
-      https://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing, software
- distributed under the License is distributed on an "AS IS" BASIS,
- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- See the License for the specific language governing permissions and
- limitations under the License.
--%>
-package <%= entityAbsolutePackage %>.domain
-
-import org.reactivestreams.Publisher
-import org.springframework.data.r2dbc.mapping.OutboundRow
-import org.springframework.data.r2dbc.mapping.event.AfterConvertCallback
-import org.springframework.data.r2dbc.mapping.event.AfterSaveCallback
-import org.springframework.data.relational.core.sql.SqlIdentifier
-import org.springframework.stereotype.Component
-
-import reactor.core.publisher.Mono
-
-@Component
-class <%= persistClass %>Callback: AfterSaveCallback<<%= persistClass %>>, AfterConvertCallback<<%= persistClass %>> {
-
-    override fun onAfterConvert(entity: <%= persistClass %>, table: SqlIdentifier): Publisher<<%= persistClass %>> {
-        return Mono.just(entity.setIsPersisted())
-    }
-
-    override fun  onAfterSave(entity: <%= persistClass %>, outboundRow: OutboundRow,
-            table: SqlIdentifier): Publisher<<%= persistClass %>> {
-        return Mono.just(entity.setIsPersisted())
-    }
-}
diff --git a/generators/entity-server/templates/src/main/kotlin/package/domain/EntityCallback.kt.ejs b/generators/entity-server/templates/src/main/kotlin/package/domain/EntityCallback.kt.ejs
new file mode 100644
index 0000000..dc0c84e
--- /dev/null
+++ b/generators/entity-server/templates/src/main/kotlin/package/domain/EntityCallback.kt.ejs
@@ -0,0 +1,41 @@
+<%#
+ Copyright 2013-2022 the original author or authors from the JHipster project.
+
+ This file is part of the JHipster project, see https://www.jhipster.tech/
+ for more information.
+
+ Licensed under the Apache License, Version 2.0 (the "License");
+ you may not use this file except in compliance with the License.
+ You may obtain a copy of the License at
+
+      https://www.apache.org/licenses/LICENSE-2.0
+
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License.
+-%>
+package <%= entityAbsolutePackage %>.domain
+
+import org.reactivestreams.Publisher
+import org.springframework.data.r2dbc.mapping.OutboundRow
+import org.springframework.data.r2dbc.mapping.event.AfterConvertCallback
+import org.springframework.data.r2dbc.mapping.event.AfterSaveCallback
+import org.springframework.data.relational.core.sql.SqlIdentifier
+import org.springframework.stereotype.Component
+
+import reactor.core.publisher.Mono
+
+@Component
+class <%= persistClass %>Callback: AfterSaveCallback<<%= persistClass %>>, AfterConvertCallback<<%= persistClass %>> {
+
+    override fun onAfterConvert(entity: <%= persistClass %>, table: SqlIdentifier): Publisher<<%= persistClass %>> {
+        return Mono.just(entity.setIsPersisted())
+    }
+
+    override fun  onAfterSave(entity: <%= persistClass %>, outboundRow: OutboundRow,
+            table: SqlIdentifier): Publisher<<%= persistClass %>> {
+        return Mono.just(entity.setIsPersisted())
+    }
+}
