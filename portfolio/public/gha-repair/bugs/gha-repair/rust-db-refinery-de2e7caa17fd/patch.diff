diff --git a/.circleci/config.yml b/.circleci/config.yml
deleted file mode 100644
index 439c1ee..0000000
--- a/.circleci/config.yml
+++ /dev/null
@@ -1,209 +0,0 @@
-restore_registry: &RESTORE_REGISTRY
-  restore_cache:
-    key: registry
-save_registry: &SAVE_REGISTRY
-  save_cache:
-    key: registry-{{ .BuildNum }}
-    paths:
-    - /usr/local/cargo/registry/index
-deps_key: &DEPS_KEY
-  key: deps-{{ checksum "~/rust-version" }}-{{ checksum "Cargo.lock" }}
-restore_deps: &RESTORE_DEPS
-  restore_cache:
-    <<: *DEPS_KEY
-save_deps: &SAVE_DEPS
-  save_cache:
-    <<: *DEPS_KEY
-    paths:
-    - target
-    - /usr/local/cargo/registry/cache
-
-version: 2.1
-orbs:
-  win: circleci/windows@2.2.0
-parameters:
-  stable:
-    type: string
-    default: "1.53"
-  previous:
-    type: string
-    default: "1.52"
-  nightly:
-    type: string
-    default: "rustlang/rust:nightly"
-jobs:
-  test-macros-and-cli-previous:
-    docker:
-      - image: rust:<< pipeline.parameters.previous >>
-    steps:
-      - checkout
-      - run: rustup self update
-      - run: cd refinery_macros && cargo test
-      - run: cd refinery_cli && cargo test --features=mysql,postgresql,sqlite-bundled --no-default-features
-  cargo-fmt-clippy-and-test-macros-and-cli-stable:
-    docker:
-      - image: rust:<< pipeline.parameters.stable >>
-    steps:
-      - checkout
-      - run: rustup self update
-      - run: rustup component add clippy
-      - run: rustup component add rustfmt
-      - run: cargo fmt --all -- --check
-      - run: cd refinery_core && cargo test --all-features -- --test-threads 1
-      - run: cd refinery && cargo build --all-features
-      - run: cd refinery_macros && cargo clippy
-      - run: cd refinery_cli && cargo clippy
-      - run: cd refinery_macros && cargo test
-      - run: cd refinery_cli && cargo test
-  test-macros-and-cli-nightly:
-    docker:
-      - image: << pipeline.parameters.nightly >>
-    steps:
-      - checkout
-      - run: rustup self update
-      - run: RUSTFLAGS="-D warnings" cd refinery && cargo build --all-features
-      - run: cd refinery_macros && cargo test
-      - run: cd refinery_cli && cargo test
-  test-sqlite-previous:
-    docker:
-      - image: rust:<< pipeline.parameters.previous >>
-    steps:
-      - checkout
-      - run: cargo install --path ./refinery_cli --no-default-features --features=sqlite-bundled
-      - run: cd refinery && cargo test --features rusqlite --test rusqlite
-  test-sqlite-stable:
-    docker:
-      - image: rust:<< pipeline.parameters.stable >>
-    steps:
-      - checkout
-      - run: cargo install --path ./refinery_cli --no-default-features --features=sqlite-bundled
-      - run: cd refinery && cargo test --features rusqlite --test rusqlite
-  test-sqlite-nightly:
-    docker:
-      - image: << pipeline.parameters.nightly >>
-    steps:
-      - checkout
-      - run: cargo install --path ./refinery_cli --no-default-features --features=sqlite-bundled
-      - run: cd refinery && cargo test --features rusqlite --test rusqlite
-  test-postgres-previous:
-    docker:
-      - image: rust:<< pipeline.parameters.previous >>
-      - image: postgres:9.6.13-alpine
-    steps:
-      - checkout
-      - run: cargo install --path ./refinery_cli --no-default-features --features=postgresql
-      - run: cd refinery && cargo test --features postgres --test postgres -- --test-threads 1
-  test-postgres-stable:
-    docker:
-      - image: rust:<< pipeline.parameters.stable >>
-      - image: postgres:9.6.13-alpine
-    steps:
-      - checkout
-      - run: cargo install --path ./refinery_cli --no-default-features --features=postgresql
-      - run: cd refinery && cargo test --features postgres --test postgres -- --test-threads 1
-  test-postgres-nightly:
-    docker:
-      - image: << pipeline.parameters.nightly >>
-      - image: postgres:9.6.13-alpine
-    steps:
-      - checkout
-      - run: cargo install --path ./refinery_cli --no-default-features --features=postgresql
-      - run: cd refinery && cargo test --features postgres --test postgres -- --test-threads 1
-  test-tokio-postgres-stable:
-    docker:
-      - image: rust:<< pipeline.parameters.stable >>
-      - image: postgres:9.6.13-alpine
-    steps:
-      - checkout
-      - run: cd refinery && cargo test --features tokio,tokio-postgres --test tokio_postgres -- --test-threads 1
-  test-tokio-postgres-nightly:
-    docker:
-      - image: << pipeline.parameters.nightly >>
-      - image: postgres:9.6.13-alpine
-    steps:
-      - checkout
-      - run: cd refinery && cargo test --features tokio,tokio-postgres --test tokio_postgres -- --test-threads 1
-  test-mysql-previous:
-    docker:
-      - image: rust:<< pipeline.parameters.previous >>
-      - image: mysql:latest
-        environment:
-          MYSQL_ROOT_PASSWORD: root
-          MYSQL_USER: refinery
-          MYSQL_PASSWORD: root
-          MYSQL_DATABASE: refinery_test
-    steps:
-      - checkout
-      - run: cargo install --path ./refinery_cli --no-default-features --features=mysql
-      - run: cd refinery && cargo test --features mysql --test mysql -- --test-threads 1
-  test-mysql-stable:
-    docker:
-      - image: rust:<< pipeline.parameters.stable >>
-      - image: mysql:latest
-        environment:
-          MYSQL_ROOT_PASSWORD: root
-          MYSQL_USER: refinery
-          MYSQL_PASSWORD: root
-          MYSQL_DATABASE: refinery_test
-    steps:
-      - checkout
-      - run: cargo install --path ./refinery_cli --no-default-features --features=mysql
-      - run: cd refinery && cargo test --features mysql --test mysql -- --test-threads 1
-  test-mysql-nightly:
-    docker:
-      - image: << pipeline.parameters.nightly >>
-      - image: mysql:latest
-        environment:
-          MYSQL_ROOT_PASSWORD: root
-          MYSQL_USER: refinery
-          MYSQL_PASSWORD: root
-          MYSQL_DATABASE: refinery_test
-    steps:
-      - checkout
-      - run: cargo install --path ./refinery_cli --no-default-features --features=mysql
-      - run: cd refinery && cargo test --features mysql --test mysql -- --test-threads 1
-  test-mysql-async-stable:
-    docker:
-      - image: rust:<< pipeline.parameters.stable >>
-      - image: mysql:latest
-        environment:
-          MYSQL_ROOT_PASSWORD: root
-          MYSQL_USER: refinery
-          MYSQL_PASSWORD: root
-          MYSQL_DATABASE: refinery_test
-    steps:
-      - checkout
-      - run: cd refinery && cargo test --features tokio,mysql_async --test mysql_async -- --test-threads 1
-  test-mysql-async-nightly:
-    docker:
-      - image: << pipeline.parameters.nightly >>
-      - image: mysql:latest
-        environment:
-          MYSQL_ROOT_PASSWORD: root
-          MYSQL_USER: refinery
-          MYSQL_PASSWORD: root
-          MYSQL_DATABASE: refinery_test
-    steps:
-      - checkout
-      - run: cd refinery && cargo test --features tokio,mysql_async --test mysql_async -- --test-threads 1
-workflows:
-  version: 2
-  build_and_test:
-    jobs:
-      - test-macros-and-cli-previous
-      - cargo-fmt-clippy-and-test-macros-and-cli-stable
-      - test-macros-and-cli-nightly
-      - test-sqlite-previous
-      - test-sqlite-stable
-      - test-sqlite-nightly
-      - test-postgres-previous
-      - test-postgres-stable
-      - test-postgres-nightly
-      - test-tokio-postgres-stable
-      - test-tokio-postgres-nightly
-      - test-mysql-previous
-      - test-mysql-stable
-      - test-mysql-nightly
-      - test-mysql-async-stable
-      - test-mysql-async-nightly
-      # - test-windows
diff --git a/.github/workflows/ci.yml b/.github/workflows/ci.yml
index f1992c0..a125e76 100644
--- a/.github/workflows/ci.yml
+++ b/.github/workflows/ci.yml
@@ -1,11 +1,153 @@
 on: [push, pull_request]
+name: "CI"
+
 jobs:
-  test-windows:
-    name: Test Windows
-    runs-on: windows-latest
+  ci-pass:
+    name: CI is green
+    runs-on: ubuntu-latest
+    needs:
+      - cargo-fmt-clippy-and-test-macros-and-cli
+      - test-sqlite
+      - test-postgres
+      - test-tokio-postgres
+      - test-mysql
+      - test-mysql-async
+      - doc
+    steps:
+      - run: exit 0
+
+  cargo-fmt-clippy-and-test-macros-and-cli:
+    name: Cargo fmt/clippy/test-macros-and-cli
+    runs-on: ${{ matrix.os }}
+    strategy:
+      matrix:
+        os: [windows-latest, ubuntu-latest]
+        rust: [stable, nightly, 1.52.0]
+    steps:
+      - uses: actions/checkout@v2
+      - uses: actions-rs/toolchain@v1
+        with:
+          toolchain: ${{ matrix.rust }}
+      - run: rustup self update
+      - run: rustup component add clippy
+      - run: rustup component add rustfmt
+      - run: cargo fmt --all -- --check
+      - run: cd refinery_core && cargo test --all-features -- --test-threads 1
+      - run: cd refinery && cargo build --all-features
+      - run: cd refinery_macros && cargo clippy
+      - run: cd refinery_cli && cargo clippy
+      - run: cd refinery_macros && cargo test
+      - run: cd refinery_cli && cargo test
+
+  test-sqlite:
+    name: Test Sqlite
+    runs-on: ubuntu-latest
+    strategy:
+      matrix:
+        rust: [stable, nightly, 1.52.0]
+    steps:
+      - uses: actions/checkout@v2
+      - uses: actions-rs/toolchain@v1
+        with:
+          toolchain: ${{ matrix.rust }}
+      - run: cargo install --path ./refinery_cli --no-default-features --features=sqlite-bundled
+      - run: cd refinery && cargo test --features rusqlite --test rusqlite
+
+  test-postgres:
+    name: Test postgres
+    runs-on: ubuntu-latest
+    strategy:
+      matrix:
+        rust: [stable, nightly, 1.52.0]
+    services:
+      postgres:
+        image: postgres:9.6.13-alpine
+        ports:
+          - 5432:5432
     steps:
       - uses: actions/checkout@v2
       - uses: actions-rs/toolchain@v1
         with:
-          toolchain: stable
-      - run: cd refinery_core && cargo test --lib --all-features -- --test-threads 1
+          toolchain: ${{ matrix.rust }}
+      - run: cargo install --path ./refinery_cli --no-default-features --features=postgresql
+      - run: cd refinery && cargo test --features postgres --test postgres -- --test-threads 1
+
+  test-tokio-postgres:
+    name: Test tokio-postgres
+    runs-on: ubuntu-latest
+    strategy:
+      matrix:
+        rust: [stable, nightly, 1.52.0]
+    services:
+      postgres:
+        image: postgres:9.6.13-alpine
+        ports:
+          - 5432:5432
+    steps:
+      - uses: actions/checkout@v2
+      - uses: actions-rs/toolchain@v1
+        with:
+          toolchain: ${{ matrix.rust }}
+      - run: cd refinery && cargo test --features tokio,tokio-postgres --test tokio_postgres -- --test-threads 1
+
+  test-mysql:
+    name: Test mysql
+    runs-on: ubuntu-latest
+    strategy:
+      matrix:
+        rust: [stable, nightly, 1.52.0]
+    services:
+      postgres:
+        image: mysql:latest
+        ports:
+          - 3306:3306
+        env:
+          MYSQL_ROOT_PASSWORD: root
+          MYSQL_USER: refinery
+          MYSQL_PASSWORD: root
+          MYSQL_DATABASE: refinery_test
+    steps:
+      - uses: actions/checkout@v2
+      - uses: actions-rs/toolchain@v1
+        with:
+          toolchain: ${{ matrix.rust }}
+      - run: cargo install --path ./refinery_cli --no-default-features --features=mysql
+      - run: cd refinery && cargo test --features mysql --test mysql -- --test-threads 1
+
+  test-mysql-async:
+    name: Test mysql-async
+    runs-on: ubuntu-latest
+    strategy:
+      matrix:
+        rust: [stable, nightly, 1.52.0]
+    services:
+      postgres:
+        image: mysql:latest
+        ports:
+          - 3306:3306
+        env:
+          MYSQL_ROOT_PASSWORD: root
+          MYSQL_USER: refinery
+          MYSQL_PASSWORD: root
+          MYSQL_DATABASE: refinery_test
+    steps:
+      - uses: actions/checkout@v2
+      - uses: actions-rs/toolchain@v1
+        with:
+          toolchain: ${{ matrix.rust }}
+      - run: cd refinery && cargo test --features tokio,mysql_async --test mysql_async -- --test-threads 1
+
+  doc:
+    name: Build docs
+    runs-on: ubuntu-latest
+    steps:
+      - name: Checkout
+        uses: actions/checkout@v1
+
+      - name: Install Rust
+        uses: actions-rs/toolchain@v1
+        with:
+          profile: minimal
+          toolchain: nightly
+          override: true
+      - run: cd refinery && cargo rustdoc --all-features -- -D broken_intra_doc_links
