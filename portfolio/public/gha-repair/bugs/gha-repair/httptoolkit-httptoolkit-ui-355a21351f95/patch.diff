diff --git a/.dockerignore b/.dockerignore
new file mode 100644
index 0000000..c8dbc49
--- /dev/null
+++ b/.dockerignore
@@ -0,0 +1,2 @@
+.git/
+node_modules/
diff --git a/.github/workflows/ci.yml b/.github/workflows/ci.yml
index 778a024..9cac278 100644
--- a/.github/workflows/ci.yml
+++ b/.github/workflows/ci.yml
@@ -44,8 +44,8 @@ jobs:
           path: dist/*
           if-no-files-found: error
 
-  publish:
-    name: Deploy ${{ (github.ref == 'refs/heads/master' && 'to production') || 'preview' }}
+  publish-netlify:
+    name: Deploy ${{ (github.ref == 'refs/heads/master' && 'to Netlify production') || 'Netlify preview' }}
     if: github.event_name == 'push'
     runs-on: ubuntu-latest
     container: httptoolkit/act-build-base
@@ -73,4 +73,63 @@ jobs:
         env:
           NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
           NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
-        timeout-minutes: 1
\ No newline at end of file
+        timeout-minutes: 1
+
+  publish-hidora:
+    name: Deploy to Docker Hub & Hidora
+    if: github.event_name != 'pull_request'
+    runs-on: ubuntu-latest
+    container: httptoolkit/act-build-base
+    needs: build
+    steps:
+      - uses: actions/checkout@v2
+
+      - uses: actions/download-artifact@v2
+        with:
+          name: dist
+          path: dist
+
+      - uses: docker/setup-buildx-action@v1
+      - name: Login to DockerHub
+        if: github.event_name != 'pull_request'
+        uses: docker/login-action@v2
+        with:
+          username: ${{ secrets.DOCKERHUB_USERNAME }}
+          password: ${{ secrets.DOCKERHUB_TOKEN }}
+
+      - name: Extract Docker metadata
+        id: meta
+        uses: docker/metadata-action@v3
+        with:
+          github-token: ${{ secrets.GITHUB_TOKEN }}
+          images: httptoolkit/ui
+          tags: |
+            type=raw,value=prod,enable={{is_default_branch}}
+            type=raw,value=latest,enable={{is_default_branch}}
+            type=sha
+
+      - name: Deploy to Docker Hub
+        uses: docker/build-push-action@v2
+        with:
+          context: .
+          push: ${{ github.event_name != 'pull_request' }}
+          tags: ${{ steps.meta.outputs.tags }}
+          labels: ${{ steps.meta.outputs.labels }}
+
+      - name: Redeploy site
+        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
+        run: |
+          sleep 30 # Wait for Docker Hub to fully publish
+
+          # Trigger a container redeploy:
+          curl "https://app.hidora.com/1.0/environment/control/rest/redeploycontainersbygroup?session=$HIDORA_API_TOKEN&envName=htk-ui&nodeGroup=cp&tag=prod&useExistingVolumes=true" | \
+             tee /dev/stderr | \
+             grep -q 'Node has been successfully updated'
+
+          # Clear CDN cache to re-request content:
+          curl -f --request POST \
+            --url https://api.bunny.net/pullzone/1110200/purgeCache \
+            --header "AccessKey: $BUNNY_SITE_API_KEY"
+        env:
+          HIDORA_API_TOKEN: ${{ secrets.HIDORA_API_TOKEN }}
+          BUNNY_SITE_API_KEY: ${{ secrets.BUNNY_SITE_API_KEY }}
\ No newline at end of file
diff --git a/Caddyfile b/Caddyfile
new file mode 100644
index 0000000..5646ae0
--- /dev/null
+++ b/Caddyfile
@@ -0,0 +1,18 @@
+{$DOMAIN:http://localhost} {
+    encode zstd gzip
+
+    header *.wasm Content-Type "application/wasm"
+
+    root * /site
+    try_files {path} /index.html
+    file_server
+
+    # Cache responses for 1 minute, validate async during next 10 minutes, or
+    # continue serving old data as-is for up to 24 hours if this server stops
+    # responding/returns errors.
+    @get method GET
+    header @get Cache-Control "public, max-age=60, stale-while-revalidate=600, stale-if-error=86400"
+
+    header Content-Security-Policy "frame-ancestors 'none'"
+    header X-Clacks-Overhead "GNU Terry Pratchett" # https://xclacksoverhead.org
+}
\ No newline at end of file
diff --git a/Dockerfile b/Dockerfile
new file mode 100644
index 0000000..832c236
--- /dev/null
+++ b/Dockerfile
@@ -0,0 +1,8 @@
+FROM caddy:2.6.1-alpine
+
+RUN mkdir /site
+
+WORKDIR /site
+
+COPY ./dist /site
+COPY ./Caddyfile /etc/caddy/Caddyfile
\ No newline at end of file
