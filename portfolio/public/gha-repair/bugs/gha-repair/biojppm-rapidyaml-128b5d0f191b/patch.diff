diff --git a/.github/workflows/ci.yml b/.github/workflows/ci.yml
index e2056ac..02b6f0a 100644
--- a/.github/workflows/ci.yml
+++ b/.github/workflows/ci.yml
@@ -527,6 +527,7 @@ jobs:
       - {name: install requirements, run: source .github/reqs.sh && c4_install_test_requirements $OS}
       - {name: show info, run: source .github/setenv.sh && c4_show_info }
       - {name: add_subdirectory, run: cmany b -t $BT samples/add_subdirectory }
+      - {name: fetch_content, run: cmany b -t $BT samples/fetch_content }
 
   #----------------------------------------------------------------------------
   test_api:
diff --git a/samples/CMakeLists.txt b/samples/CMakeLists.txt
new file mode 100644
index 0000000..ef1a191
--- /dev/null
+++ b/samples/CMakeLists.txt
@@ -0,0 +1,5 @@
+cmake_minimum_required(VERSION 3.12)
+project(ryml-samples LANGUAGES CXX)
+
+add_subdirectory(add_subdirectory)
+add_subdirectory(fetch_content)
diff --git a/samples/fetch_content/CMakeLists.txt b/samples/fetch_content/CMakeLists.txt
new file mode 100644
index 0000000..13cf7c1
--- /dev/null
+++ b/samples/fetch_content/CMakeLists.txt
@@ -0,0 +1,21 @@
+cmake_minimum_required(VERSION 3.12)
+project(ryml-sample-importing-fetch_content LANGUAGES CXX)
+
+set(CMAKE_CXX_STANDARD 11)
+
+include(FetchContent)
+FetchContent_Declare(
+    ryml-fetch_content
+    GIT_REPOSITORY https://github.com/biojppm/rapidyaml.git
+    GIT_TAG samples
+    GIT_SHALLOW FALSE
+)
+FetchContent_MakeAvailable(ryml-fetch_content)
+
+set(exe ryml-consumer-fetch_content)
+
+add_executable(${exe} main.cpp)
+target_link_libraries(${exe} ryml)
+add_custom_command(TARGET ${exe} POST_BUILD
+    COMMAND $<TARGET_FILE:${exe}>
+    COMMENT "running test: $<TARGET_FILE:${exe}>")
diff --git a/samples/fetch_content/main.cpp b/samples/fetch_content/main.cpp
new file mode 100644
index 0000000..3508192
--- /dev/null
+++ b/samples/fetch_content/main.cpp
@@ -0,0 +1,33 @@
+#include <ryml.hpp>
+
+namespace ryml {
+using substr = c4::substr;
+} // namespace ryml
+
+int main()
+{
+    // ryml can parse in situ (and read-only buffers too):
+    char src[] = "{foo: 1, bar: [2, 3]}";
+    ryml::substr srcview = src; // a mutable view to the source buffer
+    ryml::Tree tree = ryml::parse(srcview); // you can also reuse the tree and/or parser
+    ryml::NodeRef root = tree.rootref(); // get a reference to the root
+
+    // after parsing, the tree holds views to the source buffer:
+    C4_CHECK(root["foo"].val() == "1");
+    C4_CHECK(root["foo"].val().data() == src + strlen("{foo: "));
+
+    C4_CHECK(root["bar"][0].val() == "2");
+    C4_CHECK(root["bar"][0].val().data() == src + strlen("{foo: 1, bar: ["));
+
+    C4_CHECK(root["bar"][1].val() == "3");
+    C4_CHECK(root["bar"][1].val().data() == src + strlen("{foo: 1, bar: [2, "));
+
+    // deserializing:
+    int foo = 0, bar0 = 0, bar1 = 0;
+    root["foo"] >> foo;
+    root["bar"][0] >> bar0;
+    root["bar"][1] >> bar1;
+    C4_CHECK(foo == 1);
+    C4_CHECK(bar0 == 2);
+    C4_CHECK(bar1 == 3);
+}
