diff --git a/src/test/java/net/snowflake/client/jdbc/ConnectStringParseTest.java b/src/test/java/net/snowflake/client/jdbc/ConnectStringParseTest.java
index 0536d0c..871a6cf 100644
--- a/src/test/java/net/snowflake/client/jdbc/ConnectStringParseTest.java
+++ b/src/test/java/net/snowflake/client/jdbc/ConnectStringParseTest.java
@@ -2,6 +2,7 @@ package net.snowflake.client.jdbc;
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
+import static org.junit.Assert.assertEquals;
 
 import java.util.Properties;
 import net.snowflake.client.core.SFSessionProperty;
@@ -58,4 +59,13 @@ public class ConnectStringParseTest {
         is("abc_test"));
     assertThat(cstring.getHost(), is("abc-test.us-east-1.snowflakecomputing.com"));
   }
+
+  @Test
+  public void testParseWithIllegalUriCharacters() {
+    Properties info = new Properties();
+    String jdbcConnectString =
+        "jdbc:snowflake://abc-test.us-east-1.snowflakecomputing.com/?private_key_file=C:\\temp\\rsa_key.p8&private_key_file_pwd=test_password&user=test_user";
+    SnowflakeConnectString cstring = SnowflakeConnectString.parse(jdbcConnectString, info);
+    assertEquals("://:-1", cstring.toString());
+  }
 }
diff --git a/src/test/java/net/snowflake/client/jdbc/SnowflakeDriverTest.java b/src/test/java/net/snowflake/client/jdbc/SnowflakeDriverTest.java
index 9b276b7..416a390 100644
--- a/src/test/java/net/snowflake/client/jdbc/SnowflakeDriverTest.java
+++ b/src/test/java/net/snowflake/client/jdbc/SnowflakeDriverTest.java
@@ -362,10 +362,10 @@ public class SnowflakeDriverTest {
     assertFalse(snowflakeDriver.acceptsURL("jdbc:mysql://localhost:3306/dbname"));
   }
 
-  @Test
+  @Test(expected = SQLException.class)
   public void testInvalidNullConnect() throws SQLException {
     SnowflakeDriver snowflakeDriver = SnowflakeDriver.INSTANCE;
-    assertNull(snowflakeDriver.connect(null, null));
+    snowflakeDriver.connect(null, null);
   }
 
   @Test
@@ -405,4 +405,18 @@ public class SnowflakeDriverTest {
     // Just to make sure this function won't break anything
     SnowflakeDriver.disableIllegalReflectiveAccessWarning();
   }
+
+  @Test
+  public void testParseConnectStringException() {
+    SnowflakeDriver snowflakeDriver = SnowflakeDriver.INSTANCE;
+    Properties info = new Properties();
+    String jdbcConnectString =
+        "jdbc:snowflake://abc-test.us-east-1.snowflakecomputing.com/?private_key_file=C:\\temp\\rsa_key.p8&private_key_file_pwd=test_password&user=test_user";
+    try {
+      snowflakeDriver.connect(jdbcConnectString, info);
+      fail();
+    } catch (Exception ex) {
+      assertEquals("Connection string is invalid. Unable to parse.", ex.getMessage());
+    }
+  }
 }
