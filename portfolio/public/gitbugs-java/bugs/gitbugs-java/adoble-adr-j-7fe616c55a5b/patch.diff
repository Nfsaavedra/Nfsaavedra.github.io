diff --git a/src/main/java/org/doble/commands/CommandADR.java b/src/main/java/org/doble/commands/CommandADR.java
index 216e3db..6e545e8 100644
--- a/src/main/java/org/doble/commands/CommandADR.java
+++ b/src/main/java/org/doble/commands/CommandADR.java
@@ -19,7 +19,7 @@ import picocli.CommandLine.HelpCommand;
 
 @Command(name = "adr",
 		 description = "Creation and management of architectural decision records (ADRs)",
-		 version = "2.1",
+		 version = "3.2.1",
 		 exitCodeListHeading = "Exit Codes:%n",
 		 exitCodeList        = { " 0:Successful program execution.",
 				 				 "64:Invalid input: an unknown option or invalid parameter was specified.",
diff --git a/src/main/java/org/doble/commands/CommandNew.java b/src/main/java/org/doble/commands/CommandNew.java
index ea37e42..cd2f34a 100644
--- a/src/main/java/org/doble/commands/CommandNew.java
+++ b/src/main/java/org/doble/commands/CommandNew.java
@@ -236,7 +236,7 @@ public class CommandNew implements Callable<Integer> {
 
 	/**
 	 * Find the highest index of the ADRs in the adr directory by iterating
-	 * through all the files
+	 * through all the files that start with an  adr index number (i.e. dddd where d is a digit)
 	 *
 	 * @return int The highest index found. If no files are found returns 0.
 	 */
@@ -248,19 +248,58 @@ public class CommandNew implements Callable<Integer> {
 		Path adrPath = rootPath.resolve(docPath);
 
 		try {
-			highestIndex = Files.list(adrPath).mapToInt(CommandNew::toInt).max();
+			highestIndex = Files.list(adrPath).filter(CommandNew::wellFormedADR).mapToInt(CommandNew::toInt).max();
+			
 		} catch (IOException e) {
 			throw new ADRException("FATAL: Unable to determine the indexes of the ADRs.", e);
-		}
+		} 
 
 		return (highestIndex.isPresent() ? highestIndex.getAsInt() : 0);
 	}
 
+	// Convert a ADR file name to its id number
+	// Assumes that the ADR file name is well formed.
 	private static int toInt(Path p) {
 		String name = p.getFileName().toString();
 
-		// Extract the first 4 characters
-		String id = name.substring(0, 4);
-		return new Integer(id);
+		// Extract the first 4 characters and creat an integer from them
+		String id = name.substring(0, ADR.MAX_ID_LENGTH);
+		return Integer.parseInt(id);
+		
 	}
+
+	/*
+	 * A well formed ADR has the form:
+	 *     dddd-*
+	 * where 'd' is a digit
+	 * and * refers to any number of charaters.
+	 */
+	private static boolean wellFormedADR(Path p) {
+		
+		String name = p.getFileName().toString();
+
+		// Instead of using a regex do some simple, and fast, checks
+
+		// Check that the file is longer than the id length and the '-'
+		if (name.length() < ADR.MAX_ID_LENGTH + 1) {
+			return false;
+		}
+
+		// Check that the 5th character is a '-'
+		if (name.indexOf('-') != ADR.MAX_ID_LENGTH) return false;
+
+		// Check that the first 4 characters are digits
+		boolean is_adr_with_index = name.chars().mapToObj(i -> (char)i).limit(ADR.MAX_ID_LENGTH).allMatch(c -> Character.isDigit(c));
+		if (!is_adr_with_index) {
+			return false;
+		}
+
+		
+
+		// All checks passed
+		return true;
+
+	}
+
+	
 }
diff --git a/src/main/java/org/doble/commands/CommandVersion.java b/src/main/java/org/doble/commands/CommandVersion.java
index a15bd3e..164d270 100644
--- a/src/main/java/org/doble/commands/CommandVersion.java
+++ b/src/main/java/org/doble/commands/CommandVersion.java
@@ -28,7 +28,7 @@ public class CommandVersion implements Callable<Integer> {
 	 * Version numbers adhere to to Semantic Versioning:  https://semver.org/spec/v2.0.0.html  *
 	 *                                                                                         *
 	 *******************************************************************************************/
-	private String version = "3.2.0";  // Minor release, backwards compatible 
+	private String version = "3.2.1";  // Minor release, backwards compatible 
 		
 	
 	@ParentCommand
