diff --git a/src/main/java/com/mapr/synth/LogGenerator.java b/src/main/java/com/mapr/synth/LogGenerator.java
index c379925..26a3fd7 100644
--- a/src/main/java/com/mapr/synth/LogGenerator.java
+++ b/src/main/java/com/mapr/synth/LogGenerator.java
@@ -41,7 +41,7 @@ public class LogGenerator implements Sampler<LogLine> {
     private PriorityQueue<LogLine> eventBuffer = Queues.newPriorityQueue();
     private PriorityQueue<User> users = Queues.newPriorityQueue();
 
-    private LongTail<InetAddress> ipGenerator = new LongTail<InetAddress>(1, 0.5) {
+    private LongTail<InetAddress> ipGenerator = new LongTail<>(1, 0.5) {
         Random gen = new Random();
 
         @Override
@@ -60,9 +60,9 @@ public class LogGenerator implements Sampler<LogLine> {
         }
     };
 
-    private WordGenerator words = new WordGenerator("word-frequency-seed", "other-words");
+    private WordGenerator words = new WordGenerator("word-frequency-seed", "/other-words");
     private TermGenerator terms = new TermGenerator(words, 1, 0.8);
-    private TermGenerator geo = new TermGenerator(new WordGenerator(null, "geo-codes"), 10, 0);
+    private TermGenerator geo = new TermGenerator(new WordGenerator(null, "/geo-codes"), 10, 0);
 
     // the average user visits once per day, but there is a LOT of variation between users
     private AbstractContinousDistribution sessionRateDistribution = new Uniform(1.0 / 24 / 3600, 1.0 / 24 / 3600, RandomUtils.getRandom());
diff --git a/src/main/java/com/mapr/synth/distributions/TermGenerator.java b/src/main/java/com/mapr/synth/distributions/TermGenerator.java
index ef8ef33..37fc2d3 100644
--- a/src/main/java/com/mapr/synth/distributions/TermGenerator.java
+++ b/src/main/java/com/mapr/synth/distributions/TermGenerator.java
@@ -36,7 +36,7 @@ public class TermGenerator implements Sampler<String> {
 
     public TermGenerator(WordGenerator words, final int alpha, final double discount) {
         this.words = words;
-        distribution = new LongTail<String>(alpha, discount) {
+        distribution = new LongTail<>(alpha, discount) {
             private int count = TermGenerator.this.words.size();
 
             @Override
diff --git a/src/main/java/com/mapr/synth/distributions/WordGenerator.java b/src/main/java/com/mapr/synth/distributions/WordGenerator.java
index 131196a..2a63cc5 100644
--- a/src/main/java/com/mapr/synth/distributions/WordGenerator.java
+++ b/src/main/java/com/mapr/synth/distributions/WordGenerator.java
@@ -30,8 +30,9 @@ import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import java.io.BufferedReader;
-import java.io.File;
 import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
@@ -55,7 +56,7 @@ public class WordGenerator {
             try {
                 //noinspection UnstableApiUsage
                 Resources.readLines(Resources.getResource(seed), Charsets.UTF_8,
-                        new LineProcessor<Object>() {
+                        new LineProcessor<>() {
                             private boolean header = true;
                             private final Splitter onTabs = Splitter.on("\t");
 
@@ -84,14 +85,13 @@ public class WordGenerator {
             }
         }
 
-        try {
-            //noinspection UnstableApiUsage
-            wordReader = Files.newReader(new File(Resources.getResource(others).getFile()), Charsets.UTF_8);
-        } catch (IOException e) {
+        InputStream s = this.getClass().getResourceAsStream(others);
+        if (s == null) {
             log.error("Can't read resource \"{}\", will continue without realistic words", others);
             wordReader = null;
+        } else {
+            wordReader = new BufferedReader(new InputStreamReader(s, Charsets.UTF_8));
         }
-
     }
 
     public String getString(int n) {
@@ -99,7 +99,7 @@ public class WordGenerator {
             synchronized (this) {
                 while (n >= words.size()) {
                     try {
-                        String w = wordReader.readLine();
+                        String w = wordReader != null ? wordReader.readLine() : null;
                         if (w != null) {
                             words.add(w);
                         } else {
