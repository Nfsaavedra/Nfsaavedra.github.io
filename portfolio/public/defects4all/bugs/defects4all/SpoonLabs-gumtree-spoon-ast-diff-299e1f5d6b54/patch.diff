diff --git a/src/main/java/gumtree/spoon/AstComparator.java b/src/main/java/gumtree/spoon/AstComparator.java
index ecff517..ae683bd 100644
--- a/src/main/java/gumtree/spoon/AstComparator.java
+++ b/src/main/java/gumtree/spoon/AstComparator.java
@@ -2,9 +2,6 @@ package gumtree.spoon;
 
 import java.io.File;
 import java.util.Map;
-
-import com.github.gumtreediff.matchers.GumtreeProperties;
-
 import gumtree.spoon.builder.SpoonGumTreeBuilder;
 import gumtree.spoon.diff.Diff;
 import gumtree.spoon.diff.DiffConfiguration;
@@ -27,41 +24,7 @@ import spoon.support.compiler.jdt.JDTBasedSpoonCompiler;
  * @author Matias Martinez, matias.martinez@inria.fr
  */
 public class AstComparator {
-	// For the moment, let's create a factory each type we get a type.
-	// Sharing the factory produces a bug when asking the path of different types
-	// (>1)
-	// private final Factory factory;
-
-	static {
-		// default 0.3
-		// it seems that default value is really bad
-		// 0.1 one failing much more changes
-		// 0.2 one failing much more changes
-		// 0.3 one failing test_t_224542
-		// 0.4 fails for issue31
-		// 0.5 fails for issue31
-		// 0.6 OK
-		// 0.7 1 failing
-		// 0.8 2 failing
-		// 0.9 two failing tests with more changes
-		// see GreedyBottomUpMatcher.java in Gumtree
-		System.setProperty("gt.bum.smt", "0.6");
-
-		// default 2
-		// 0 is really bad for 211903 t_224542 225391 226622
-		// 1 is required for t_225262 and t_213712 to pass
-		System.setProperty("gt.stm.mh", "1");
-
-		// default 1000
-		// 0 fails
-		// 1 fails
-		// 10 fails
-		// 100 OK
-		// 1000 OK
-		// see AbstractBottomUpMatcher#SIZE_THRESHOD in Gumtree
-		// System.setProperty("gumtree.match.bu.size","10");
-		// System.setProperty("gt.bum.szt", "1000");
-	}
+
 	/**
 	 * By default, comments are ignored
 	 */
@@ -104,27 +67,6 @@ public class AstComparator {
 		return compare(getCtType(left), getCtType(right));
 	}
 
-	/**
-	 * compares two java files
-	 */
-	public Diff compare(File f1, File f2, GumtreeProperties properties) throws Exception {
-		return this.compare(getCtType(f1), getCtType(f2), properties);
-	}
-
-	/**
-	 * compares two snippets
-	 */
-	public Diff compare(String left, String right, GumtreeProperties properties) {
-		return compare(getCtType(left), getCtType(right), properties);
-	}
-
-	/**
-	 * compares two snippets that come from the files given as argument
-	 */
-	public Diff compare(String left, String right, String filenameLeft, String filenameRight,
-			GumtreeProperties properties) {
-		return compare(getCtType(left, filenameLeft), getCtType(right, filenameRight), properties);
-	}
 
 	/**
 	 * compares two snippets that come from the files given as argument
@@ -141,13 +83,6 @@ public class AstComparator {
 		return new DiffImpl(scanner.getTreeContext(), scanner.getTree(left), scanner.getTree(right));
 	}
 
-	/**
-	 * compares two AST nodes
-	 */
-	public Diff compare(CtElement left, CtElement right, GumtreeProperties properties) {
-		final SpoonGumTreeBuilder scanner = new SpoonGumTreeBuilder();
-		return new DiffImpl(scanner.getTreeContext(), scanner.getTree(left), scanner.getTree(right), properties);
-	}
 
 	public Diff compare(File f1, File f2, DiffConfiguration configuration) throws Exception {
 		final SpoonGumTreeBuilder scanner = new SpoonGumTreeBuilder();
diff --git a/src/main/java/gumtree/spoon/diff/DiffConfiguration.java b/src/main/java/gumtree/spoon/diff/DiffConfiguration.java
index fc99331..37a26d9 100644
--- a/src/main/java/gumtree/spoon/diff/DiffConfiguration.java
+++ b/src/main/java/gumtree/spoon/diff/DiffConfiguration.java
@@ -1,21 +1,30 @@
 package gumtree.spoon.diff;
 
+import com.github.gumtreediff.matchers.GumtreeProperties;
 import com.github.gumtreediff.matchers.Matcher;
 
 /**
- * Stores configuration to compute Diff. This is different from {@link com.github.gumtreediff.matchers.GumtreeProperties}.
- * `DiffConfiguration` stores properties which are more general in nature and are not specific to matchers.
- *
- * In the future, this class can also be wrapper to store all types of configuration, whether required by gumtree or gumtree-spoon.
+ * Stores configuration to compute Diff
  */
 public class DiffConfiguration {
-    private Matcher matcher;
+	
+	private Matcher matcher;
 
-    public Matcher getMatcher() {
-        return matcher;
-    }
+	private GumtreeProperties gumtreeProperties;
 
-    public void setMatcher(Matcher matcher) {
-        this.matcher = matcher;
-    }
+	public GumtreeProperties getGumtreeProperties() {
+		return gumtreeProperties;
+	}
+
+	public void setGumtreeProperties(GumtreeProperties gumtreeProperties) {
+		this.gumtreeProperties = gumtreeProperties;
+	}
+
+	public Matcher getMatcher() {
+		return matcher;
+	}
+
+	public void setMatcher(Matcher matcher) {
+		this.matcher = matcher;
+	}
 }
diff --git a/src/main/java/gumtree/spoon/diff/DiffImpl.java b/src/main/java/gumtree/spoon/diff/DiffImpl.java
index bdecef5..4f89f11 100644
--- a/src/main/java/gumtree/spoon/diff/DiffImpl.java
+++ b/src/main/java/gumtree/spoon/diff/DiffImpl.java
@@ -19,6 +19,7 @@ import com.github.gumtreediff.actions.model.TreeDelete;
 import com.github.gumtreediff.actions.model.TreeInsert;
 import com.github.gumtreediff.actions.model.Update;
 import com.github.gumtreediff.matchers.CompositeMatchers;
+import com.github.gumtreediff.matchers.ConfigurationOptions;
 import com.github.gumtreediff.matchers.GumtreeProperties;
 import com.github.gumtreediff.matchers.MappingStore;
 import com.github.gumtreediff.matchers.Matcher;
@@ -65,21 +66,25 @@ public class DiffImpl implements Diff {
 
 	private GumtreeProperties properties = null;
 
-	private Matcher matcher = new CompositeMatchers.ClassicGumtree();
+	private Matcher matcher = new CompositeMatchers.SimpleGumtree();
 
-	public DiffImpl(TreeContext context, Tree rootSpoonLeft, Tree rootSpoonRight, GumtreeProperties properties) {
-		this.properties = properties;
+	public DiffImpl(TreeContext context, Tree rootSpoonLeft, Tree rootSpoonRight) {
+		
+		matcher = new CompositeMatchers.SimpleGumtree();
+		properties = new GumtreeProperties();
+		properties.tryConfigure(ConfigurationOptions.st_minprio, 1);
+		properties.tryConfigure(ConfigurationOptions.st_priocalc, "size");
+		
 		computeDiff(context, rootSpoonLeft, rootSpoonRight);
 	}
 
 	public DiffImpl(TreeContext context, Tree rootSpoonLeft, Tree rootSpoonRight, DiffConfiguration configuration) {
 		this.matcher = configuration.getMatcher();
-		computeDiff(context, rootSpoonLeft, rootSpoonRight);
-	}
+		this.properties= configuration.getGumtreeProperties();
 
-	public DiffImpl(TreeContext context, Tree rootSpoonLeft, Tree rootSpoonRight) {
 		computeDiff(context, rootSpoonLeft, rootSpoonRight);
 	}
+	
 
 	public void computeDiff(TreeContext context, Tree rootSpoonLeft, Tree rootSpoonRight) {
 		if (context == null) {
@@ -88,8 +93,11 @@ public class DiffImpl implements Diff {
 		final MappingStore mappingsComp = new MappingStore(rootSpoonLeft, rootSpoonRight);
 		this.context = context;
 
-		if (properties != null)
+	
+		if (properties != null) {
 			matcher.configure(properties);
+		}
+	
 		MappingStore mappings = matcher.match(rootSpoonLeft, rootSpoonRight, mappingsComp);
 
 		// all actions
