diff --git a/src/test/java/de/siegmar/logbackgelf/GelfEncoderTest.java b/src/test/java/de/siegmar/logbackgelf/GelfEncoderTest.java
index 07113f8..eafb161 100644
--- a/src/test/java/de/siegmar/logbackgelf/GelfEncoderTest.java
+++ b/src/test/java/de/siegmar/logbackgelf/GelfEncoderTest.java
@@ -32,6 +32,8 @@ import java.nio.charset.StandardCharsets;
 import org.junit.Before;
 import org.junit.Test;
 import org.slf4j.LoggerFactory;
+import org.slf4j.Marker;
+import org.slf4j.MarkerFactory;
 
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.ObjectMapper;
@@ -375,6 +377,46 @@ public class GelfEncoderTest {
         assertFalse(httpStatus.isNumber());
     }
 
+    @Test
+    public void singleMarker() throws IOException {
+        encoder.setLoggerNameKey("Logger");
+        encoder.start();
+
+        final LoggerContext lc = (LoggerContext) LoggerFactory.getILoggerFactory();
+        final Logger logger = lc.getLogger(LOGGER_NAME);
+
+        final LoggingEvent event = simpleLoggingEvent(logger, null);
+        event.setMarker(MarkerFactory.getMarker("SINGLE"));
+
+        final String logMsg = encodeToStr(event);
+
+        final ObjectMapper om = new ObjectMapper();
+        final JsonNode jsonNode = om.readTree(logMsg);
+        coreValidation(jsonNode);
+        assertEquals("SINGLE", jsonNode.get("_marker").textValue());
+    }
+
+    @Test
+    public void multipleMarker() throws IOException {
+        encoder.setLoggerNameKey("Logger");
+        encoder.start();
+
+        final LoggerContext lc = (LoggerContext) LoggerFactory.getILoggerFactory();
+        final Logger logger = lc.getLogger(LOGGER_NAME);
+
+        final LoggingEvent event = simpleLoggingEvent(logger, null);
+        final Marker marker = MarkerFactory.getMarker("FIRST");
+        marker.add(MarkerFactory.getMarker("SECOND"));
+        event.setMarker(marker);
+
+        final String logMsg = encodeToStr(event);
+
+        final ObjectMapper om = new ObjectMapper();
+        final JsonNode jsonNode = om.readTree(logMsg);
+        coreValidation(jsonNode);
+        assertEquals("FIRST, SECOND", jsonNode.get("_marker").textValue());
+    }
+
     private String encodeToStr(final LoggingEvent event) {
         return new String(encoder.encode(event), StandardCharsets.UTF_8);
     }
