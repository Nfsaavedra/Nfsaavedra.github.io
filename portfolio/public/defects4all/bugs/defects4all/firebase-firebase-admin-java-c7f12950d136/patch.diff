diff --git a/src/main/java/com/google/firebase/database/DataSnapshot.java b/src/main/java/com/google/firebase/database/DataSnapshot.java
index 19e7b2a..700fa2a 100644
--- a/src/main/java/com/google/firebase/database/DataSnapshot.java
+++ b/src/main/java/com/google/firebase/database/DataSnapshot.java
@@ -16,6 +16,7 @@
 
 package com.google.firebase.database;
 
+import com.google.firebase.database.annotations.Nullable;
 import com.google.firebase.database.core.Path;
 import com.google.firebase.database.snapshot.IndexedNode;
 import com.google.firebase.database.snapshot.NamedNode;
@@ -116,8 +117,10 @@ public class DataSnapshot {
    * <p>This list is recursive; the possible types for {@link java.lang.Object} in the above list
    * is given by the same list. These types correspond to the types available in JSON.
    *
-   * @return The data contained in this snapshot as native types
+   * @return The data contained in this snapshot as native types or null if there is no data at this
+   *     location.
    */
+  @Nullable
   public Object getValue() {
     return node.getNode().getValue();
   }
@@ -143,8 +146,10 @@ public class DataSnapshot {
    * a map, the map will also include a .value key with the data.
    *
    * @param useExportFormat Whether or not to include priority information
-   * @return The data, along with its priority, in native types
+   * @return The data, along with its priority, in native types or null if there is no data at this
+   *     location.
    */
+  @Nullable
   public Object getValue(boolean useExportFormat) {
     return node.getNode().getValue(useExportFormat);
   }
@@ -190,8 +195,10 @@ public class DataSnapshot {
    *
    * @param valueType The class into which this snapshot should be marshalled
    * @param <T> The type to return. Implicitly defined from the class passed in
-   * @return An instance of the class passed in, populated with the data from this snapshot
+   * @return An instance of the class passed in, populated with the data from this snapshot, or null
+   *     if there is no data at this location.
    */
+  @Nullable
   public <T> T getValue(Class<T> valueType) {
     Object value = node.getNode().getValue();
     return CustomClassMapper.convertToCustomClass(value, valueType);
@@ -216,8 +223,10 @@ public class DataSnapshot {
    *     to be returned.
    * @param <T> The type to return. Implicitly defined from the {@link GenericTypeIndicator} passed
    *     in
-   * @return A properly typed collection, populated with the data from this snapshot
+   * @return A properly typed collection, populated with the data from this snapshot, or null if
+   *     there is no data at this location.
    */
+  @Nullable
   public <T> T getValue(GenericTypeIndicator<T> t) {
     Object value = node.getNode().getValue();
     return CustomClassMapper.convertToCustomClass(value, t);
diff --git a/src/main/java/com/google/firebase/database/DatabaseReference.java b/src/main/java/com/google/firebase/database/DatabaseReference.java
index fe24c59..1c1b9db 100644
--- a/src/main/java/com/google/firebase/database/DatabaseReference.java
+++ b/src/main/java/com/google/firebase/database/DatabaseReference.java
@@ -226,7 +226,7 @@ public class DatabaseReference extends Query {
    * @deprecated Use {@link #setValueAsync(Object)}
    */
   public Task<Void> setValue(Object value) {
-    return setValueInternal(value, PriorityUtilities.parsePriority(null), null);
+    return setValueInternal(value, PriorityUtilities.parsePriority(this.path, null), null);
   }
 
   /**
@@ -238,7 +238,7 @@ public class DatabaseReference extends Query {
    * @deprecated Use {@link #setValueAsync(Object, Object)}
    */
   public Task<Void> setValue(Object value, Object priority) {
-    return setValueInternal(value, PriorityUtilities.parsePriority(priority), null);
+    return setValueInternal(value, PriorityUtilities.parsePriority(this.path, priority), null);
   }
 
   /**
@@ -275,7 +275,7 @@ public class DatabaseReference extends Query {
    * @param listener A listener that will be triggered with the results of the operation
    */
   public void setValue(Object value, CompletionListener listener) {
-    setValueInternal(value, PriorityUtilities.parsePriority(null), listener);
+    setValueInternal(value, PriorityUtilities.parsePriority(this.path, null), listener);
   }
 
   /**
@@ -312,7 +312,7 @@ public class DatabaseReference extends Query {
    * @param listener A listener that will be triggered with the results of the operation
    */
   public void setValue(Object value, Object priority, CompletionListener listener) {
-    setValueInternal(value, PriorityUtilities.parsePriority(priority), listener);
+    setValueInternal(value, PriorityUtilities.parsePriority(this.path, priority), listener);
   }
 
   private Task<Void> setValueInternal(Object value, Node priority, CompletionListener optListener) {
@@ -375,7 +375,7 @@ public class DatabaseReference extends Query {
    * @deprecated Use {@link #setPriorityAsync(Object)}
    */
   public Task<Void> setPriority(Object priority) {
-    return setPriorityInternal(PriorityUtilities.parsePriority(priority), null);
+    return setPriorityInternal(PriorityUtilities.parsePriority(this.path, priority), null);
   }
 
   /**
@@ -408,7 +408,7 @@ public class DatabaseReference extends Query {
    * @param listener A listener that will be triggered with results of the operation
    */
   public void setPriority(Object priority, CompletionListener listener) {
-    setPriorityInternal(PriorityUtilities.parsePriority(priority), listener);
+    setPriorityInternal(PriorityUtilities.parsePriority(this.path, priority), listener);
   }
 
   // Remove
diff --git a/src/main/java/com/google/firebase/database/MutableData.java b/src/main/java/com/google/firebase/database/MutableData.java
index 3a1d6b8..79e87f2 100644
--- a/src/main/java/com/google/firebase/database/MutableData.java
+++ b/src/main/java/com/google/firebase/database/MutableData.java
@@ -16,6 +16,7 @@
 
 package com.google.firebase.database;
 
+import com.google.firebase.database.annotations.Nullable;
 import com.google.firebase.database.core.Path;
 import com.google.firebase.database.core.SnapshotHolder;
 import com.google.firebase.database.core.ValidationPath;
@@ -179,8 +180,10 @@ public class MutableData {
    * <p>This list is recursive; the possible types for {@link java.lang.Object} in the above list is
    * given by the same list. These types correspond to the types available in JSON.
    *
-   * @return The data contained in this instance as native types
+   * @return The data contained in this instance as native types, or null if there is no data at
+   *     this location.
    */
+  @Nullable
   public Object getValue() {
     return getNode().getValue();
   }
@@ -203,8 +206,10 @@ public class MutableData {
    *     to be returned.
    * @param <T> The type to return. Implicitly defined from the {@link GenericTypeIndicator} passed
    *     in
-   * @return A properly typed collection, populated with the data from this instance
+   * @return A properly typed collection, populated with the data from this instance, or null if
+   *     there is no data at this location.
    */
+  @Nullable
   public <T> T getValue(GenericTypeIndicator<T> t) {
     Object value = getNode().getValue();
     return CustomClassMapper.convertToCustomClass(value, t);
@@ -251,8 +256,10 @@ public class MutableData {
    *
    * @param valueType The class into which this data in this instance should be marshalled
    * @param <T> The type to return. Implicitly defined from the class passed in
-   * @return An instance of the class passed in, populated with the data from this instance
+   * @return An instance of the class passed in, populated with the data from this instance, or null
+   *     if there is no data at this location.
    */
+  @Nullable
   public <T> T getValue(Class<T> valueType) {
     Object value = getNode().getValue();
     return CustomClassMapper.convertToCustomClass(value, valueType);
@@ -320,7 +327,8 @@ public class MutableData {
    * @param priority The desired priority
    */
   public void setPriority(Object priority) {
-    holder.update(prefixPath, getNode().updatePriority(PriorityUtilities.parsePriority(priority)));
+    holder.update(prefixPath, getNode().updatePriority(
+        PriorityUtilities.parsePriority(prefixPath, priority)));
   }
 
   @Override
diff --git a/src/main/java/com/google/firebase/database/OnDisconnect.java b/src/main/java/com/google/firebase/database/OnDisconnect.java
index 7cc5acf..3b02987 100644
--- a/src/main/java/com/google/firebase/database/OnDisconnect.java
+++ b/src/main/java/com/google/firebase/database/OnDisconnect.java
@@ -72,7 +72,7 @@ public class OnDisconnect {
    * @deprecated Use {@link #setValueAsync(Object, String)}
    */
   public Task<Void> setValue(Object value, String priority) {
-    return onDisconnectSetInternal(value, PriorityUtilities.parsePriority(priority), null);
+    return onDisconnectSetInternal(value, PriorityUtilities.parsePriority(path, priority), null);
   }
 
   /**
@@ -84,7 +84,7 @@ public class OnDisconnect {
    * @deprecated Use {@link #setValueAsync(Object, double)}
    */
   public Task<Void> setValue(Object value, double priority) {
-    return onDisconnectSetInternal(value, PriorityUtilities.parsePriority(priority), null);
+    return onDisconnectSetInternal(value, PriorityUtilities.parsePriority(path, priority), null);
   }
 
   /**
@@ -113,7 +113,7 @@ public class OnDisconnect {
    * @param listener A listener that will be triggered once the server has queued up the operation
    */
   public void setValue(Object value, String priority, CompletionListener listener) {
-    onDisconnectSetInternal(value, PriorityUtilities.parsePriority(priority), listener);
+    onDisconnectSetInternal(value, PriorityUtilities.parsePriority(path, priority), listener);
   }
 
   /**
@@ -128,7 +128,7 @@ public class OnDisconnect {
    * @param listener A listener that will be triggered once the server has queued up the operation
    */
   public void setValue(Object value, double priority, CompletionListener listener) {
-    onDisconnectSetInternal(value, PriorityUtilities.parsePriority(priority), listener);
+    onDisconnectSetInternal(value, PriorityUtilities.parsePriority(path, priority), listener);
   }
 
   /**
@@ -143,7 +143,7 @@ public class OnDisconnect {
    * @param listener A listener that will be triggered once the server has queued up the operation
    */
   public void setValue(Object value, Map priority, CompletionListener listener) {
-    onDisconnectSetInternal(value, PriorityUtilities.parsePriority(priority), listener);
+    onDisconnectSetInternal(value, PriorityUtilities.parsePriority(path, priority), listener);
   }
 
   /**
diff --git a/src/main/java/com/google/firebase/database/snapshot/PriorityUtilities.java b/src/main/java/com/google/firebase/database/snapshot/PriorityUtilities.java
index 4fccbd2..14c758f 100644
--- a/src/main/java/com/google/firebase/database/snapshot/PriorityUtilities.java
+++ b/src/main/java/com/google/firebase/database/snapshot/PriorityUtilities.java
@@ -17,6 +17,7 @@
 package com.google.firebase.database.snapshot;
 
 import com.google.firebase.database.DatabaseException;
+import com.google.firebase.database.core.Path;
 
 public class PriorityUtilities {
 
@@ -35,6 +36,10 @@ public class PriorityUtilities {
   }
 
   public static Node parsePriority(Object value) {
+    return parsePriority(null, value);
+  }
+
+  public static Node parsePriority(Path nodePath, Object value) {
     Node priority = NodeUtilities.NodeFromJSON(value);
     if (priority instanceof LongNode) {
       priority =
@@ -43,7 +48,8 @@ public class PriorityUtilities {
     }
     if (!isValidPriority(priority)) {
       throw new DatabaseException(
-          "Invalid Firebase Database priority (must be a string, double, ServerValue, or null)");
+          (nodePath != null ? "Path '" + nodePath + "'" : "Node")
+              + " contains invalid priority: Must be a string, double, ServerValue, or null");
     }
     return priority;
   }
diff --git a/src/main/java/com/google/firebase/database/utilities/Validation.java b/src/main/java/com/google/firebase/database/utilities/Validation.java
index f6f94c4..8a0bfcf 100644
--- a/src/main/java/com/google/firebase/database/utilities/Validation.java
+++ b/src/main/java/com/google/firebase/database/utilities/Validation.java
@@ -83,6 +83,12 @@ public class Validation {
     }
   }
 
+  private static void validateDoubleValue(double d) {
+    if (Double.isInfinite(d) || Double.isNaN(d)) {
+      throw new DatabaseException("Invalid value: Value cannot be NaN, Inf or -Inf.");
+    }
+  }
+
   private static boolean isWritablePath(Path path) {
     // Getting a path with invalid keys will throw earlier in the process, so we should just
     // check the first token
@@ -107,6 +113,8 @@ public class Validation {
       for (Object child : list) {
         validateWritableObject(child);
       }
+    } else if (object instanceof Double || object instanceof Float) {
+      validateDoubleValue((double) object);
     } else {
       // It's a primitive, should be fine
     }
@@ -138,17 +146,14 @@ public class Validation {
         throw new DatabaseException(
             "Path '" + updatePath + "' contains disallowed child name: " + childName);
       }
+      Node parsedValue;
       if (childName.equals(".priority")) {
-        if (!PriorityUtilities.isValidPriority(NodeUtilities.NodeFromJSON(newValue))) {
-          throw new DatabaseException(
-              "Path '"
-                  + updatePath
-                  + "' contains invalid priority "
-                  + "(must be a string, double, ServerValue, or null).");
-        }
+        parsedValue = PriorityUtilities.parsePriority(updatePath, newValue);
+      } else {
+        parsedValue = NodeUtilities.NodeFromJSON(newValue);
       }
       Validation.validateWritableObject(newValue);
-      parsedUpdate.put(updatePath, NodeUtilities.NodeFromJSON(newValue));
+      parsedUpdate.put(updatePath, parsedValue);
     }
     // Check that update keys are not ancestors of each other.
     Path prevPath = null;
diff --git a/src/main/java/com/google/firebase/database/utilities/encoding/CustomClassMapper.java b/src/main/java/com/google/firebase/database/utilities/encoding/CustomClassMapper.java
index 28542c1..5b14fc2 100644
--- a/src/main/java/com/google/firebase/database/utilities/encoding/CustomClassMapper.java
+++ b/src/main/java/com/google/firebase/database/utilities/encoding/CustomClassMapper.java
@@ -115,14 +115,20 @@ public class CustomClassMapper {
     if (obj == null) {
       return null;
     } else if (obj instanceof Number) {
-      if (obj instanceof Float) {
-        return ((Float) obj).doubleValue();
+      if (obj instanceof Float || obj instanceof Double) {
+        double doubleValue = ((Number) obj).doubleValue();
+        if (doubleValue <= Long.MAX_VALUE
+            && doubleValue >= Long.MIN_VALUE
+            && Math.floor(doubleValue) == doubleValue) {
+          return ((Number) obj).longValue();
+        }
+        return doubleValue;
       } else if (obj instanceof Short) {
         throw new DatabaseException("Shorts are not supported, please use int or long");
       } else if (obj instanceof Byte) {
         throw new DatabaseException("Bytes are not supported, please use int or long");
       } else {
-        // Long, Integer, Double
+        // Long, Integer
         return obj;
       }
     } else if (obj instanceof String) {
