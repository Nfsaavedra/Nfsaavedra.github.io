diff --git a/src/main/java/com/worksap/nlp/sudachi/PartialPOS.java b/src/main/java/com/worksap/nlp/sudachi/PartialPOS.java
index b49eb12..d43bab8 100644
--- a/src/main/java/com/worksap/nlp/sudachi/PartialPOS.java
+++ b/src/main/java/com/worksap/nlp/sudachi/PartialPOS.java
@@ -33,7 +33,7 @@ public class PartialPOS extends AbstractList<String> {
             throw new IllegalArgumentException("Partial POS can have at most 6 components, was " + data);
         }
         for (String component : data) {
-            if (component.length() > POS.MAX_COMPONENT_LENGTH) {
+            if (component != null && component.length() > POS.MAX_COMPONENT_LENGTH) {
                 throw new IllegalArgumentException("Component length can't be more than " + POS.MAX_COMPONENT_LENGTH
                         + ", was " + component.length() + ":" + component);
             }
diff --git a/src/main/java/com/worksap/nlp/sudachi/PosMatcher.java b/src/main/java/com/worksap/nlp/sudachi/PosMatcher.java
index 795ebce..3353319 100644
--- a/src/main/java/com/worksap/nlp/sudachi/PosMatcher.java
+++ b/src/main/java/com/worksap/nlp/sudachi/PosMatcher.java
@@ -20,6 +20,7 @@ import com.worksap.nlp.sudachi.dictionary.POS;
 
 import java.util.BitSet;
 import java.util.Iterator;
+import java.util.NoSuchElementException;
 import java.util.function.Predicate;
 import java.util.stream.IntStream;
 
@@ -139,6 +140,9 @@ public class PosMatcher implements Predicate<Morpheme>, Iterable<POS> {
 
             @Override
             public POS next() {
+                if (index < 0) {
+                    throw new NoSuchElementException();
+                }
                 short posId = (short) index;
                 POS result = dictionary.getGrammar().getPartOfSpeechString(posId);
                 index = matching.nextSetBit(index + 1);
