diff --git a/src/main/java/com/github/davidmoten/rtree/ImageSaver.java b/src/main/java/com/github/davidmoten/rtree/ImageSaver.java
index add4ef0..3676401 100644
--- a/src/main/java/com/github/davidmoten/rtree/ImageSaver.java
+++ b/src/main/java/com/github/davidmoten/rtree/ImageSaver.java
@@ -2,16 +2,35 @@ package com.github.davidmoten.rtree;
 
 import java.awt.image.BufferedImage;
 import java.io.File;
-import java.io.IOException;
+import java.util.concurrent.Callable;
 
 import javax.imageio.ImageIO;
 
 final class ImageSaver {
-    
-    static void save(BufferedImage image, File file, String imageFormat) {
+
+    private ImageSaver() {
+        // prevent instantiation
+    }
+
+    static void save(final BufferedImage image, final File file, final String imageFormat) {
+        // this is an ugly workaround to achieve 100% coverage (the pesky
+        // IOException catch)
+        // The performance hit of making this allocation should be negligible
+        // compared to the cost of IO
+        Callable<Void> callable = new Callable<Void>() {
+            @Override
+            public Void call() throws Exception {
+                ImageIO.write(image, imageFormat, file);
+                return null;
+            }
+        };
+        run(callable);
+    }
+
+    static void run(Callable<Void> callable) {
         try {
-            ImageIO.write(image, imageFormat, file);
-        } catch (final IOException e) {
+            callable.call();
+        } catch (Exception e) {
             throw new RuntimeException(e);
         }
     }
diff --git a/src/main/java/com/github/davidmoten/rtree/geometry/Circle.java b/src/main/java/com/github/davidmoten/rtree/geometry/Circle.java
index d07b391..9f45ac9 100644
--- a/src/main/java/com/github/davidmoten/rtree/geometry/Circle.java
+++ b/src/main/java/com/github/davidmoten/rtree/geometry/Circle.java
@@ -32,10 +32,6 @@ public final class Circle implements Geometry {
         return radius;
     }
 
-    public float diameter() {
-        return 2 * radius;
-    }
-
     @Override
     public Rectangle mbr() {
         return mbr;
diff --git a/src/main/java/com/github/davidmoten/rtree/geometry/Line.java b/src/main/java/com/github/davidmoten/rtree/geometry/Line.java
index 078f994..eddaab3 100644
--- a/src/main/java/com/github/davidmoten/rtree/geometry/Line.java
+++ b/src/main/java/com/github/davidmoten/rtree/geometry/Line.java
@@ -31,7 +31,11 @@ public final class Line implements Geometry {
             return 0;
         } else {
             double d1 = distance(r.x1(), r.y1(), r.x1(), r.y2());
+            if (d1 == 0)
+                return 0;
             double d2 = distance(r.x1(), r.y2(), r.x2(), r.y2());
+            if (d2 == 0)
+                return 0;
             double d3 = distance(r.x2(), r.y2(), r.x2(), r.y1());
             double d4 = distance(r.x2(), r.y1(), r.x1(), r.y1());
             return Math.min(d1, Math.min(d2, Math.min(d3, d4)));
@@ -41,13 +45,17 @@ public final class Line implements Geometry {
     private double distance(float x1, float y1, float x2, float y2) {
         Float line = new Line2D.Float(x1, y1, x2, y2);
         double d1 = line.ptSegDist(this.x1, this.y1);
-        if (d1 == 0)
-            return 0;
         double d2 = line.ptSegDist(this.x2, this.y2);
-        if (d1 < d2)
-            return d1;
+        Float line2 = new Line2D.Float(this.x1, this.y1, this.x2, this.y2);
+        double d3 = line2.ptSegDist(x1, y1);
+        if (d3 == 0)
+            return 0;
+        double d4 = line2.ptSegDist(x2, y2);
+        if (d4 == 0)
+            return 0;
         else
-            return d2;
+            return Math.min(d1, Math.min(d2, Math.min(d3, d4)));
+
     }
 
     @Override
@@ -108,7 +116,7 @@ public final class Line implements Geometry {
         }
     }
 
-    private static class Vector {
+    private static final class Vector {
         final float x;
         final float y;
 
@@ -141,11 +149,6 @@ public final class Line implements Geometry {
             return x * x + y * y;
         }
 
-        @Override
-        public String toString() {
-            return "Vector [x=" + x + ", y=" + y + "]";
-        }
-
     }
 
 }
