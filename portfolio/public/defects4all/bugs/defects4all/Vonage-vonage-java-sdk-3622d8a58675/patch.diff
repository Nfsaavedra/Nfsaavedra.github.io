diff --git a/CHANGELOG.md b/CHANGELOG.md
index 2dee0b2..864b626 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -8,6 +8,7 @@ and this project adheres to [Semantic Versioning](http://semver.org/).
 
 ## Fixed
 - Added header (application/json) for Redact client.
+- Fixed Application Update to send json body as it is what the API now expects.
 
 ## [4.2.1] - 2019-04-02
 
diff --git a/src/main/java/com/nexmo/client/applications/ApplicationType.java b/src/main/java/com/nexmo/client/applications/ApplicationType.java
index 367895a..0b40648 100644
--- a/src/main/java/com/nexmo/client/applications/ApplicationType.java
+++ b/src/main/java/com/nexmo/client/applications/ApplicationType.java
@@ -21,10 +21,12 @@
  */
 package com.nexmo.client.applications;
 
+import com.fasterxml.jackson.annotation.JsonValue;
+
 public enum ApplicationType {
     VOICE;
 
-
+    @JsonValue
     @Override
     public String toString() {
         return this.name().toLowerCase();
diff --git a/src/main/java/com/nexmo/client/applications/UpdateApplicationMethod.java b/src/main/java/com/nexmo/client/applications/UpdateApplicationMethod.java
index 676546a..0fe3809 100644
--- a/src/main/java/com/nexmo/client/applications/UpdateApplicationMethod.java
+++ b/src/main/java/com/nexmo/client/applications/UpdateApplicationMethod.java
@@ -27,6 +27,7 @@ import com.nexmo.client.NexmoClientException;
 import com.nexmo.client.auth.TokenAuthMethod;
 import org.apache.http.HttpResponse;
 import org.apache.http.client.methods.RequestBuilder;
+import org.apache.http.entity.StringEntity;
 import org.apache.http.impl.client.BasicResponseHandler;
 
 import java.io.IOException;
@@ -49,14 +50,19 @@ class UpdateApplicationMethod extends AbstractMethod<UpdateApplicationRequest, A
 
     @Override
     public RequestBuilder makeRequest(UpdateApplicationRequest request) throws NexmoClientException, UnsupportedEncodingException {
-        RequestBuilder requestBuilder = RequestBuilder.put(
-                httpWrapper.getHttpConfig().getVersionedApiBaseUri("v1") + PATH + request.getApplicationId());
-        request.addParams(requestBuilder);
-        return requestBuilder;
+        return RequestBuilder.put(
+                httpWrapper.getHttpConfig().getVersionedApiBaseUri("v1") + PATH + request.getApplicationId())
+                .setHeader("Content-Type", "application/json")
+                .setEntity(new StringEntity(request.toJson()));
     }
 
     @Override
     public ApplicationDetails parseResponse(HttpResponse response) throws IOException {
         return ApplicationDetails.fromJson(new BasicResponseHandler().handleResponse(response));
     }
+
+    @Override
+    protected RequestBuilder applyAuth(RequestBuilder request) throws NexmoClientException {
+        return getAuthMethod(getAcceptableAuthMethods()).applyAsJsonProperties(request);
+    }
 }
diff --git a/src/main/java/com/nexmo/client/applications/UpdateApplicationRequest.java b/src/main/java/com/nexmo/client/applications/UpdateApplicationRequest.java
index be8536d..e7076bb 100644
--- a/src/main/java/com/nexmo/client/applications/UpdateApplicationRequest.java
+++ b/src/main/java/com/nexmo/client/applications/UpdateApplicationRequest.java
@@ -21,8 +21,15 @@
  */
 package com.nexmo.client.applications;
 
+import com.fasterxml.jackson.annotation.JsonIgnore;
+import com.fasterxml.jackson.annotation.JsonInclude;
+import com.fasterxml.jackson.annotation.JsonProperty;
+import com.fasterxml.jackson.core.JsonProcessingException;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.nexmo.client.NexmoUnexpectedException;
 import org.apache.http.client.methods.RequestBuilder;
 
+@JsonInclude(value = JsonInclude.Include.NON_NULL)
 public class UpdateApplicationRequest {
     private final String applicationId;
     private final String name;
@@ -50,6 +57,7 @@ public class UpdateApplicationRequest {
         this.eventMethod = eventMethod;
     }
 
+    @JsonIgnore
     public String getApplicationId() {
         return applicationId;
     }
@@ -62,14 +70,17 @@ public class UpdateApplicationRequest {
         return type;
     }
 
+    @JsonProperty("answer_url")
     public String getAnswerUrl() {
         return answerUrl;
     }
 
+    @JsonProperty("event_url")
     public String getEventUrl() {
         return eventUrl;
     }
 
+    @JsonProperty("answer_method")
     public String getAnswerMethod() {
         return answerMethod;
     }
@@ -78,6 +89,7 @@ public class UpdateApplicationRequest {
         this.answerMethod = answerMethod;
     }
 
+    @JsonProperty("event_method")
     public String getEventMethod() {
         return eventMethod;
     }
@@ -86,6 +98,15 @@ public class UpdateApplicationRequest {
         this.eventMethod = eventMethod;
     }
 
+    public String toJson() {
+        try {
+            ObjectMapper mapper = new ObjectMapper();
+            return mapper.writeValueAsString(this);
+        } catch (JsonProcessingException jpe) {
+            throw new NexmoUnexpectedException("Failed to produce json from UpdateApplicationRequest object.", jpe);
+        }
+    }
+
     public void addParams(RequestBuilder request) {
         request.addParameter("name", this.name)
                 .addParameter("type", this.type.toString())
diff --git a/src/main/java/com/nexmo/client/auth/AbstractAuthMethod.java b/src/main/java/com/nexmo/client/auth/AbstractAuthMethod.java
index deb837d..d46505a 100644
--- a/src/main/java/com/nexmo/client/auth/AbstractAuthMethod.java
+++ b/src/main/java/com/nexmo/client/auth/AbstractAuthMethod.java
@@ -36,4 +36,10 @@ public abstract class AbstractAuthMethod implements AuthMethod {
         throw new UnsupportedOperationException(
                 "applyAsBasicAuth not implemented for " + this.getClass().getCanonicalName());
     }
+
+    @Override
+    public RequestBuilder applyAsJsonProperties(RequestBuilder request) {
+        throw new UnsupportedOperationException(
+                "applyAsJsonProperties not implemented for " + this.getClass().getCanonicalName());
+    }
 }
\ No newline at end of file
diff --git a/src/main/java/com/nexmo/client/auth/AuthMethod.java b/src/main/java/com/nexmo/client/auth/AuthMethod.java
index 6cdbf36..28b376c 100644
--- a/src/main/java/com/nexmo/client/auth/AuthMethod.java
+++ b/src/main/java/com/nexmo/client/auth/AuthMethod.java
@@ -25,7 +25,7 @@ import org.apache.http.client.methods.RequestBuilder;
 
 
 public interface AuthMethod extends Comparable<AuthMethod> {
-    public RequestBuilder apply(RequestBuilder request);
+    RequestBuilder apply(RequestBuilder request);
 
     /**
      * Apply the authentication to the header as basic authentication.
@@ -34,7 +34,16 @@ public interface AuthMethod extends Comparable<AuthMethod> {
      *
      * @return RequestBuilder for more building of the request.
      */
-    public RequestBuilder applyAsBasicAuth(RequestBuilder requestBuilder);
+    RequestBuilder applyAsBasicAuth(RequestBuilder requestBuilder);
 
-    public int getSortKey();
+    /**
+     * Apply the authentication by adding it to the entity payload.
+     *
+     * @param requestBuilder The request being built
+     *
+     * @return RequestBuilder for more building of the request.
+     */
+    RequestBuilder applyAsJsonProperties(RequestBuilder requestBuilder);
+
+    int getSortKey();
 }
\ No newline at end of file
diff --git a/src/main/java/com/nexmo/client/auth/TokenAuthMethod.java b/src/main/java/com/nexmo/client/auth/TokenAuthMethod.java
index 538b54b..2e60715 100644
--- a/src/main/java/com/nexmo/client/auth/TokenAuthMethod.java
+++ b/src/main/java/com/nexmo/client/auth/TokenAuthMethod.java
@@ -21,10 +21,18 @@
  */
 package com.nexmo.client.auth;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.node.ObjectNode;
+import com.nexmo.client.NexmoUnexpectedException;
 import org.apache.commons.codec.binary.Base64;
 import org.apache.http.Header;
+import org.apache.http.HttpEntity;
 import org.apache.http.client.methods.RequestBuilder;
+import org.apache.http.entity.StringEntity;
 import org.apache.http.message.BasicHeader;
+import org.apache.http.util.EntityUtils;
+
+import java.io.IOException;
 
 public class TokenAuthMethod extends AbstractAuthMethod {
     private final int SORT_KEY = 30;
@@ -50,6 +58,20 @@ public class TokenAuthMethod extends AbstractAuthMethod {
     }
 
     @Override
+    public RequestBuilder applyAsJsonProperties(RequestBuilder request) {
+        HttpEntity entity = request.getEntity();
+        try {
+            ObjectNode json = (ObjectNode) new ObjectMapper().readTree(EntityUtils.toString(entity));
+            json.put("api_key", this.apiKey);
+            json.put("api_secret", this.apiSecret);
+
+            return request.setEntity(new StringEntity(json.toString()));
+        } catch (IOException e) {
+            throw new NexmoUnexpectedException("Failed to attach api key and secret to json.", e);
+        }
+    }
+
+    @Override
     public int getSortKey() {
         return SORT_KEY;
     }
diff --git a/src/test/java/com/nexmo/client/auth/TokenAuthMethodTest.java b/src/test/java/com/nexmo/client/auth/TokenAuthMethodTest.java
new file mode 100644
index 0000000..9e0f277
--- /dev/null
+++ b/src/test/java/com/nexmo/client/auth/TokenAuthMethodTest.java
@@ -0,0 +1,43 @@
+/*
+ * Copyright (c) 2011-2019 Nexmo Inc
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+ * THE SOFTWARE.
+ */
+package com.nexmo.client.auth;
+
+import org.apache.http.client.methods.RequestBuilder;
+import org.apache.http.entity.StringEntity;
+import org.apache.http.util.EntityUtils;
+import org.junit.Test;
+
+import static org.junit.Assert.assertEquals;
+
+public class TokenAuthMethodTest {
+    @Test
+    public void testAddingApiKeyAndSecretToJson() throws Exception {
+        AuthMethod auth = new TokenAuthMethod("apikey", "secret");
+        String before = "{\"name\":\"app name\",\"type\":\"voice\",\"answer_url\":\"https://example.com/answer\",\"event_url\":\"https://example.com/event\"}";
+        RequestBuilder requestBuilder = RequestBuilder.get().setEntity(new StringEntity(before));
+
+        RequestBuilder requestBuilderWithAuthentication = auth.applyAsJsonProperties(requestBuilder);
+
+        String after = "{\"name\":\"app name\",\"type\":\"voice\",\"answer_url\":\"https://example.com/answer\",\"event_url\":\"https://example.com/event\",\"api_key\":\"apikey\",\"api_secret\":\"secret\"}";
+        assertEquals(after, EntityUtils.toString(requestBuilderWithAuthentication.getEntity()));
+    }
+}
