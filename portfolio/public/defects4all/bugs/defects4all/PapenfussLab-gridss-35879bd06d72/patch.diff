diff --git a/scripts/virusbreakend-build.sh b/scripts/virusbreakend-build.sh
index 40f075b..cf753e6 100755
--- a/scripts/virusbreakend-build.sh
+++ b/scripts/virusbreakend-build.sh
@@ -72,7 +72,7 @@ fi
 write_status() {
 	echo "$(date): $1" 1>&2
 }
-for tool in kraken2-build samtools gunzip tar dustmasker rsync java ; do
+for tool in kraken2-build samtools gunzip tar dustmasker rsync java wget ; do
 	if ! which $tool >/dev/null; then
 		echo "Error: unable to find $tool on \$PATH" 1>&2
 		exit $EX_CONFIG
@@ -104,16 +104,18 @@ for f in $(find $dbname/ -name '*.fna') ; do
 	java -cp $GRIDSS_JAR \
 		picard.cmdline.PicardCommandLine \
 		CreateSequenceDictionary \
-		I=$f \
-		R=$f.dict
+		R=$f \
+		O=$f.dict
 done
 
 cd $dbname
+wget --output-document=taxid10239.nbr "https://www.ncbi.nlm.nih.gov/genomes/GenomesGroup.cgi?taxid=10239&cmd=download2"
 cd ..
 tar -czvf virusbreakend.db.$(basename $dbname).tar.gz \
 	$(basename $dbname)/*.k2d \
 	$(basename $dbname)/taxonomy/nodes.dmp \
 	$(basename $dbname)/library/viral/*.fna* \
+	$(basename $dbname)/taxid10239.nbr
 
 write_status "VIRUSBreakend build successful"
 write_status "The full build (including intermediate files) can be found in $dbname"
diff --git a/scripts/virusbreakend.sh b/scripts/virusbreakend.sh
index c8186cc..89cc206 100755
--- a/scripts/virusbreakend.sh
+++ b/scripts/virusbreakend.sh
@@ -27,7 +27,9 @@ threads=8
 kraken2args=""
 gridssargs="--jvmheap 13g"
 rmargs="--species human"
+host=human
 nodesdmp=""
+virusnbr=""
 minreads="50"
 metricsrecords=10000000
 metricsmaxcoverage=100000
@@ -44,6 +46,7 @@ Usage: virusbreakend.sh [options] input.bam
 	-j/--jar: location of GRIDSS jar
 	-t/--threads: number of threads to use. (Default: $threads).
 	-w/--workingdir: directory to place intermediate and temporary files. (Default: $workingdir).
+	--host: NBCI host filter. Valid values are algae, archaea, bacteria, eukaryotic algae, fungi, human, invertebrates, land plants, plants, protozoa, vertebrates (Default: $host)
 	--db: path to virusbreakenddb database directory. Use the supplied virusbreakend-build.sh to build.
 	--kraken2args: additional kraken2 arguments
 	--gridssargs: additional GRIDSS arguments
@@ -55,7 +58,7 @@ Usage: virusbreakend.sh [options] input.bam
 #--virushostdb: location of virushostdb.tsv. Available from ftp://ftp.genome.jp/pub/db/virushostdb/virushostdb.tsv (Default: {kraken2db}/virushostdb.tsv)
 #--nodesdmp: location of NCBI nodes.dmp. Can be downloaded from https://ftp.ncbi.nlm.nih.gov/pub/taxonomy/taxdmp.zip. (Default: {kraken2db}/taxonomy/nodes.dmp)
 OPTIONS=ho:t:j:w:r:f
-LONGOPTS=help,output:,jar:,threads:,reference:,workingdir:,db:,kraken2db:,kraken2args:,gridssargs:,rmargs:,nodesdmp:,minreads:,force,forceunpairedfastq
+LONGOPTS=help,output:,jar:,threads:,reference:,workingdir:,db:,kraken2db:,kraken2args:,gridssargs:,rmargs:,nodesdmp:,minreads:,force,forceunpairedfastq,host:
 ! PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name "$0" -- "$@")
 if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
     # e.g. return value is 1
@@ -83,6 +86,10 @@ while true; do
 			output_vcf="$2"
 			shift 2
 			;;
+		--host)
+			host="$2"
+			shift 2
+			;;
 		-j|--jar)
 			GRIDSS_JAR="$2"
 			shift 2
@@ -253,6 +260,16 @@ fi
 if [[ "$nodesdmp" == "" ]] ; then
 	nodesdmp="$kraken2db/taxonomy/nodes.dmp"
 fi
+if [[ "$virusnbr" == "" ]] ; then
+	virusnbr="$kraken2db/taxid10239.nbr"
+fi
+if [[ ! -f "$virusnbr" ]] ; then
+	echo "$USAGE_MESSAGE"
+	write_status "Unable to find $virusnbr."
+	write_status "Use virusbreakend-build.sh to generate or download from"
+	write_status "https://www.ncbi.nlm.nih.gov/genomes/GenomesGroup.cgi?taxid=10239&cmd=download2"
+	exit $EX_NOINPUT
+fi
 if [[ ! -f "$nodesdmp" ]] ; then
 	echo "$USAGE_MESSAGE"
 	write_status "Unable to find NCBI nodes.dmp file. Specify with --nodesdmp."
@@ -377,6 +394,7 @@ file_report=$prefix_working.kraken2.report.all.txt
 file_viral_report=$prefix_working.kraken2.report.viral.txt
 file_extracted_report=$prefix_working.kraken2.report.viral.extracted.txt
 file_summary_csv=$prefix_working.summary.csv
+file_summary_annotated_csv=$prefix_working.summary.ann.csv
 exec_concat_fastq=$prefix_working.cat_input_as_fastq.sh
 if [[ ! -f $file_readname ]] ; then
 	write_status "Identifying viral sequences"
@@ -405,6 +423,17 @@ else
 	write_status "Identifying viral sequences	Skipped: found	$file_readname"
 fi
 if [[ ! -f $file_extracted_report ]] ; then
+	taxid_args=""
+	if [[ "$host" != "" ]] ; then
+		# get the taxid for every contig in $virusnbr
+		taxid_args=$(cat $(find $kraken2db -path '**/library/**/*.fna.fai' | grep -v human | grep -v UniVec_Core) \
+			| cut -f 1 \
+			| grep -F -f <(grep $host $virusnbr | cut -f 1,2 | tr ',\t' '\n\n' | sort -u | sed 's/$/./' | grep -v "^.$") \
+			| cut -d '|' -f 2 \
+			| sed 's/^/--TAXONOMY_IDS /' \
+			| tr '\n' ' ')
+		taxid_args="--TAXONOMY_IDS null $taxid_args"
+	fi
 	write_status "Identifying viruses in sample based on kraken2 summary report"
 	# The sort is so we will include any library/added before the default RefSeq sequences (in library/viral)
 	kraken_references_arg=$(for fa in $(find $kraken2db -path '**/library/**/*.fna' | sort) ; do echo -n "--KRAKEN_REFERENCES $fa "; done)
@@ -419,6 +448,7 @@ if [[ ! -f $file_extracted_report ]] ; then
 		$kraken_references_arg \
 		--MIN_SUPPORTING_READS $minreads \
 		--TAXONOMIC_DEDUPLICATION_LEVEL Genus \
+		$taxid_args \
 	; } 1>&2 2>> $logfile
 else
 	write_status "Identifying viruses	Skipped: found	$file_extracted_report"
@@ -650,37 +680,35 @@ else
 fi
 if [[ ! -f $file_filtered_vcf ]] ; then
 	write_status "Filtering to host integrations"
+	hosttaxid_arg=""
+	if [[ "$host" == "human" ]] ; then
+		hosttaxid_arg="--TAXONOMY_IDS 9606"
+	fi
 	{ $timecmd java -Xmx64m $jvm_args -cp $gridss_jar gridss.VirusBreakendFilter \
 		--INPUT $file_rm_annotated_vcf \
 		--OUTPUT $file_filtered_vcf \
 		--REFERENCE_SEQUENCE $reference \
-		--TAXONOMY_IDS $hosttaxid \
+		$hosttaxid_arg \
 	; } 1>&2 2>> $logfile
 fi
-# if not summary file
-if [[ ! -f $file_summary ]] ; then
-	for row in extracted ; done
-		append to summary file
-	done
-fi
-if [[ ! -f $file_wgs_metrics ]] ; then
-	write_status "Calculating virus WGS metrics"
-	{ $timecmd java -Xmx1g $jvm_args \
-			-cp $gridss_jar picard.cmdline.PicardCommandLine CollectWgsMetrics \
-			--INPUT $prefix_adjusted.merged.bam \
-			--OUTPUT $file_wgs_metrics \
-			--REFERENCE_SEQUENCE $prefix_adjusted.viral.fa \
-			--COVERAGE_CAP 10000 \
-			--COUNT_UNPAIRED true \
-	; } 1>&2 2>> $logfile
+if [[ ! -f $file_summary_annotated_csv ]] ; then
+	write_status "Writing annotated summary to $file_summary_annotated_csv"
+	rm -f $prefix_adjusted.merged.bam.coverage
+	samtools coverage $prefix_adjusted.merged.bam > $prefix_adjusted.merged.bam.coverage
+	while read inline; do
+		if [[ $inline = taxid_genus* ]] ; then
+			echo "$inline	$(head -1 $prefix_adjusted.merged.bam.coverage)	integrations" >> $file_summary_annotated_csv
+		else
+			taxid=$(echo "$inline" | cut -f 7)
+			coverage_stats=$(grep _taxid_${taxid}_ $prefix_adjusted.merged.bam.coverage)
+			contig=$(echo "$coverage_stats" | cut -f 1)
+			hits=$(grep -E ^adj $file_filtered_vcf | grep -F $contig | wc -l || true)
+			echo "$inline	$coverage_stats	$hits"  >> $file_summary_annotated_csv
+		fi
+	done < $file_summary_csv
 fi
 cp $file_filtered_vcf $output_vcf
-cp $file_extracted_report $output_vcf.kraken2.summary.csv
-cp $file_wgs_metrics $output_vcf.wgs_metrics.txt
-
-# TODO summary results file:
-#taxid_genus,name_genus,taxid_species,name_species,taxid,name,ref,reads_genus,reads_species,reads_direct,meandepth,integration_sites
-
+cp $file_summary_annotated_csv $output_vcf.summary.csv
 
 write_status "Generated $output_vcf"
 write_status "Done"
diff --git a/scripts/virusbreakend_manuscript/scripts/cleanup_gce.sh b/scripts/virusbreakend_manuscript/scripts/cleanup_gce.sh
new file mode 100644
index 0000000..f273779
--- /dev/null
+++ b/scripts/virusbreakend_manuscript/scripts/cleanup_gce.sh
@@ -0,0 +1,6 @@
+#!/bin/bash
+while true ; do
+	echo "$(date) Awake"
+	gcloud compute instances delete -q $( gcloud compute instances list --filter="name~virusbreakend" | grep TERMINATED | cut -f 1 -d ' ' )
+	sleep 180
+done
diff --git a/scripts/virusbreakend_manuscript/scripts/gce_bucket_stream_virusbreakend.sh b/scripts/virusbreakend_manuscript/scripts/gce_bucket_stream_virusbreakend.sh
index 81ccc31..ea9bc74 100644
--- a/scripts/virusbreakend_manuscript/scripts/gce_bucket_stream_virusbreakend.sh
+++ b/scripts/virusbreakend_manuscript/scripts/gce_bucket_stream_virusbreakend.sh
@@ -5,7 +5,7 @@ sample=$1
 cram=$2
 bucket_user=$3
 ref=/opt/resources/reference_genome/hg19/Homo_sapiens.GRCh37.GATK.illumina.fasta
-db=/opt/resources/virusbreakend/virusbreakenddb/
+db=./virusbreakenddb/
 export PATH=/opt/tools/repeatmasker/4.1.1:$PATH
 export PATH=/opt/tools/trf/4.0.9:$PATH
 export PATH=/opt/tools/rmblast/2.10.0/bin:$PATH
@@ -18,9 +18,9 @@ export PATH=/opt/tools/samtools/1.10:$PATH
 export PATH=/opt/tools/bcftools/1.9:$PATH
 export PATH=/opt/tools/bwa/1.10:$PATH
 export PATH=/opt/tools/bwa/0.7.17:$PATH
-export GRIDSS_JAR=/opt/tools/gridss/2.10.0/gridss.jar
+export GRIDSS_JAR=./gridss-2.10.2-gridss-jar-with-dependencies.jar
 # Nifty hack in which we don't even need to download the file - we can stream directly from the bucket
 gce_file_direct_from_bucket="<( gsutil -u $bucket_user cat $cram )"
-./virusbreakend.sh --force -t $(nproc) -r $ref --db $db -o ${sample}.virusbreakend.vcf -j $GRIDSS_JAR "$gce_file_direct_from_bucket" --gridssargs "--jvmheap 13g" 2>&1 > ${sample}.virusbreakend.log
+./virusbreakend.sh --force -t $(nproc) -r $ref --db $db -o ${sample}.virusbreakend.vcf -j $GRIDSS_JAR --gridssargs "--jvmheap 13g" "$gce_file_direct_from_bucket" 2>&1 > ${sample}.virusbreakend.log
 gsutil -u $bucket_user -m cp -r ${sample}.virusbreakend* gs://virusbreakend/
 echo sudo shutdown -P now
diff --git a/src/main/java/gridss/kraken/ExtractBestSequencesBasedOnReport.java b/src/main/java/gridss/kraken/ExtractBestSequencesBasedOnReport.java
index 64543ee..6cf7f51 100644
--- a/src/main/java/gridss/kraken/ExtractBestSequencesBasedOnReport.java
+++ b/src/main/java/gridss/kraken/ExtractBestSequencesBasedOnReport.java
@@ -129,6 +129,8 @@ public class ExtractBestSequencesBasedOnReport extends CommandLineProgram {
             for (IndexedFastaSequenceFile fa : ref) {
                 sequenceIndexesToExport.add(new ArrayList<>());
             }
+            List<String> summary = new ArrayList<>();
+            summary.add(createSummaryHeader());
             Map<KrakenReportLine, List<String>> exportedRefs = new HashMap<>();
             for (KrakenReportLine taxaToExport : interestingNodes) {
                 List<String> refsForThisTaxa = new ArrayList<>();
@@ -141,6 +143,7 @@ public class ExtractBestSequencesBasedOnReport extends CommandLineProgram {
                         if (seqTaxId == taxid && contigsFound < CONTIGS_PER_TAXID) {
                             contigsFound++;
                             sequenceIndexesToExport.get(i).add(ssr.getSequenceIndex());
+                            summary.add(createSummaryLine(fullReport, taxa, taxaToExport, ssr.getSequenceName()));
                         }
                     }
                 }
@@ -150,11 +153,6 @@ public class ExtractBestSequencesBasedOnReport extends CommandLineProgram {
             }
             if (SUMMARY_OUTPUT != null) {
                 log.info("Writing summary csv report to ", SUMMARY_OUTPUT);
-                List<String> summary = new ArrayList<>();
-                summary.add(createSummaryHeader());
-                for (Map.Entry<KrakenReportLine, List<String>> in : exportedRefs.entrySet()) {
-                    summary.add(createSummaryLine(fullReport, taxa, in.getKey(), in.getValue()));
-                }
                 Files.write(SUMMARY_OUTPUT.toPath(), summary);
             }
             if (sequenceIndexesToExport.stream().anyMatch(list -> !list.isEmpty())) {
@@ -189,7 +187,7 @@ public class ExtractBestSequencesBasedOnReport extends CommandLineProgram {
         return "taxid_genus\tname_genus\treads_genus\ttaxid_species\treads_species\tname_species\ttaxid\tname\treads\treference";
     }
 
-    private String createSummaryLine(List<KrakenReportLine> fullReport, Map<Integer, MinimalTaxonomyNode> taxa, KrakenReportLine line, List<String> ref) {
+    private String createSummaryLine(List<KrakenReportLine> fullReport, Map<Integer, MinimalTaxonomyNode> taxa, KrakenReportLine line, String ref) {
         Map<Integer, KrakenReportLine> lookup = fullReport.stream().collect(Collectors.toMap(x -> x.taxonomyId, x -> x));
         KrakenReportLine genus = line;
         KrakenReportLine species = line;
@@ -197,10 +195,10 @@ public class ExtractBestSequencesBasedOnReport extends CommandLineProgram {
         while (current != null && current.taxonomyId > 1) {
             switch (current.rank) {
                 case "S":
-                    species = line;
+                    species = current;
                     break;
                 case "G":
-                    genus = line;
+                    genus = current;
                     break;
             }
             int parent_taxid = taxa.get(current.taxonomyId).parentTaxId;
@@ -209,9 +207,9 @@ public class ExtractBestSequencesBasedOnReport extends CommandLineProgram {
         }
         return String.format("%d\t%s\t%d\t%d\t%s\t%d\t%d\t%s\t%d\t%s",
                 genus.taxonomyId, genus.scientificName.trim(),genus.countAssignedToTree,
-                genus.taxonomyId, species.scientificName.trim(),species.countAssignedToTree,
+                species.taxonomyId, species.scientificName.trim(),species.countAssignedToTree,
                 line.taxonomyId, line.scientificName.trim(),line.countAssignedToTree,
-                ref.stream().collect(Collectors.joining(",")));
+                ref);
     }
 
     /**
