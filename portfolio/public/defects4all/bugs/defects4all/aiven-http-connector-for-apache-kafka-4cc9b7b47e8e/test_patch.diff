diff --git a/src/test/java/io/aiven/kafka/connect/http/converter/RecordValueConverterTest.java b/src/test/java/io/aiven/kafka/connect/http/converter/RecordValueConverterTest.java
index 01fd2eb..ed40656 100644
--- a/src/test/java/io/aiven/kafka/connect/http/converter/RecordValueConverterTest.java
+++ b/src/test/java/io/aiven/kafka/connect/http/converter/RecordValueConverterTest.java
@@ -16,7 +16,11 @@
 
 package io.aiven.kafka.connect.http.converter;
 
+import java.util.HashMap;
+import java.util.Map;
+
 import org.apache.kafka.connect.data.Field;
+import org.apache.kafka.connect.data.Schema;
 import org.apache.kafka.connect.data.SchemaBuilder;
 import org.apache.kafka.connect.data.Struct;
 import org.apache.kafka.connect.errors.DataException;
@@ -63,6 +67,22 @@ class RecordValueConverterTest {
     }
 
     @Test
+    void convertHashMapRecord() {
+        final var recordSchema = SchemaBuilder.map(Schema.STRING_SCHEMA, Schema.STRING_SCHEMA);
+
+        final Map value = new HashMap();
+        value.put("key", "value");
+
+        final var sinkRecord = new SinkRecord(
+                "some-topic", 0,
+                SchemaBuilder.string(),
+                "some-key", recordSchema, value, 1L);
+
+        assertEquals("{\"key\":\"value\"}", recordValueConverter.convert(sinkRecord));
+    }
+
+
+    @Test
     void throwsDataExceptionForUknownRecordValueClass() {
         final var recordSchema = SchemaBuilder.int64();
         final var sinkRecord = new SinkRecord(
