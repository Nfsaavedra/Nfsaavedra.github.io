diff --git a/src/main/java/com/googlecode/aviator/lexer/ExpressionLexer.java b/src/main/java/com/googlecode/aviator/lexer/ExpressionLexer.java
index cf9daef..d420886 100644
--- a/src/main/java/com/googlecode/aviator/lexer/ExpressionLexer.java
+++ b/src/main/java/com/googlecode/aviator/lexer/ExpressionLexer.java
@@ -442,7 +442,11 @@ public class ExpressionLexer {
   }
 
   public String getScanString() {
-    return this.expression.substring(0, this.iterator.getIndex());
+    Token<?> firstPushbackToken = this.tokenBuffer != null ? this.tokenBuffer.peekFirst() : null;
+    return this.expression.substring(0,
+        (firstPushbackToken != null && firstPushbackToken.getStartIndex() > 0)
+            ? firstPushbackToken.getEndIndex()
+            : this.iterator.getIndex());
   }
 
   private String getBigNumberLexeme(final StringBuilder sb) {
diff --git a/src/main/java/com/googlecode/aviator/lexer/token/AbstractToken.java b/src/main/java/com/googlecode/aviator/lexer/token/AbstractToken.java
index 9d695ec..e3d6f9b 100644
--- a/src/main/java/com/googlecode/aviator/lexer/token/AbstractToken.java
+++ b/src/main/java/com/googlecode/aviator/lexer/token/AbstractToken.java
@@ -107,6 +107,11 @@ public abstract class AbstractToken<T> implements Token<T>, Serializable {
     return this.lineIndex;
   }
 
+  @Override
+  public int getEndIndex() {
+    return this.lineIndex + (this.lexeme != null ? this.lexeme.length() : 0);
+  }
+
 
   @Override
   public String toString() {
diff --git a/src/main/java/com/googlecode/aviator/lexer/token/Token.java b/src/main/java/com/googlecode/aviator/lexer/token/Token.java
index ee754b1..4d5c10a 100644
--- a/src/main/java/com/googlecode/aviator/lexer/token/Token.java
+++ b/src/main/java/com/googlecode/aviator/lexer/token/Token.java
@@ -48,5 +48,7 @@ public interface Token<T> {
 
   int getStartIndex();
 
+  int getEndIndex();
+
   int getLineNo();
 }
diff --git a/src/main/java/com/googlecode/aviator/parser/ExpressionParser.java b/src/main/java/com/googlecode/aviator/parser/ExpressionParser.java
index 3c06080..fadd3cf 100644
--- a/src/main/java/com/googlecode/aviator/parser/ExpressionParser.java
+++ b/src/main/java/com/googlecode/aviator/parser/ExpressionParser.java
@@ -1051,7 +1051,7 @@ public class ExpressionParser implements Parser {
     this.inPattern = true;
     StringBuilder sb = new StringBuilder();
     while (this.lookhead != null) {
-      while (!expectChar('/')) {
+      while (!expectChar('/') && this.lookhead != null) {
         sb.append(this.lookhead.getLexeme());
         move(false);
       }
@@ -1886,6 +1886,16 @@ public class ExpressionParser implements Parser {
       ensureDepthState();
     }
     ensureNoStatementAfterReturn(stmtType);
+    // If the last statement is ternary,it must be ended with END TOKEN such as null token, '}',
+    // 'end' keyword, or ';'
+    // Otherwise report syntax error.
+    if (stmtType == StatementType.Ternary) {
+      if (lookhead != null && !expectChar(';') && !expectChar('}') && lookhead != Variable.END) {
+        this.back();
+        reportSyntaxError("unexpect token '" + currentTokenLexeme()
+            + "', maybe forget to insert ';' to complete last expression ");
+      }
+    }
 
     return stmtType;
   }
