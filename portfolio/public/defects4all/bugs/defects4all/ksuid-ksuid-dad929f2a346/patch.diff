diff --git a/src/main/java/com/github/ksuid/Base62.java b/src/main/java/com/github/ksuid/Base62.java
index 97990ed..06a4992 100644
--- a/src/main/java/com/github/ksuid/Base62.java
+++ b/src/main/java/com/github/ksuid/Base62.java
@@ -58,7 +58,13 @@ final class Base62 {
         final int size = (int) ceil((bytes.length * BYTE_BITS) / DIGIT_BITS);
         final StringBuilder sb = new StringBuilder(size);
 
-        BigInteger value = new BigInteger(bytes);
+        // Allocate an extra zero value byte in the first position, so that the unsigned 32bit UTC
+        // timestamp value is not treated as negative value and thus being encoded as
+        // "000000000000000000000000000"
+        final byte[] tempBuffer = new byte[bytes.length + 1];
+        System.arraycopy(bytes, 0, tempBuffer, 1, bytes.length);
+
+        BigInteger value = new BigInteger(tempBuffer);
         while (value.compareTo(ZERO) > 0) {
             final BigInteger[] quotientAndRemainder = value.divideAndRemainder(BASE);
             sb.append(BASE_62_CHARACTERS[abs(quotientAndRemainder[1].intValue())]);
diff --git a/src/main/java/com/github/ksuid/Ksuid.java b/src/main/java/com/github/ksuid/Ksuid.java
index 1b013df..5a2c748 100644
--- a/src/main/java/com/github/ksuid/Ksuid.java
+++ b/src/main/java/com/github/ksuid/Ksuid.java
@@ -78,16 +78,16 @@ public class Ksuid implements Comparable<Ksuid> {
     }
 
     /**
-     * Get the KSUID as a string.
+     * Get the KSUID as a display string. e.g. <code>0ujtsYcgvSTl8PAuAdqWYSMnLOv</code>
      *
-     * @return KSUID string
+     * @return KSUID display string
      */
     public String asString() {
         return base62Encode(ksuidBytes, PAD_TO_LENGTH);
     }
 
     /**
-     * Get the KSUID as a hex string.
+     * Get the KSUID as a hex string. e.g. <code>0669F7EFB5A1CD34B5F99D1154FB6853345C9735</code>
      *
      * @return KSUID hex string
      */
@@ -105,7 +105,7 @@ public class Ksuid implements Comparable<Ksuid> {
     }
 
     /**
-     * Get the KSUID time component in the system default timezone.
+     * Get the KSUID time component in the system default timezone. e.g. <code>2017-10-09 21:00:47 -0700 PDT</code>
      *
      * @return KSUID time component string
      */
@@ -114,7 +114,7 @@ public class Ksuid implements Comparable<Ksuid> {
     }
 
     /**
-     * Get the KSUID time component in the provided timezone.
+     * Get the KSUID time component in the provided timezone. e.g. <code>2017-10-10 04:00:47 +0000 UTC</code>
      *
      * @param zoneId the timezone
      * @return KSUID time component string
@@ -133,7 +133,7 @@ public class Ksuid implements Comparable<Ksuid> {
     }
 
     /**
-     * Get the KSUID payload component.
+     * Get the KSUID payload component. e.g. <code>B5A1CD34B5F99D1154FB6853345C9735</code>
      *
      * @return KSUID payload component
      */
@@ -142,7 +142,19 @@ public class Ksuid implements Comparable<Ksuid> {
     }
 
     /**
-     * Get the KSUID inspect formatting string representation.
+     * Get the KSUID inspect formatting string representation. e.g.
+     * <pre>
+     *  REPRESENTATION:
+     *  
+     *    String: 0ujtsYcgvSTl8PAuAdqWYSMnLOv
+     *       Raw: 0669F7EFB5A1CD34B5F99D1154FB6853345C9735
+     *  
+     *  COMPONENTS:
+     *  
+     *         Time: 2017-10-09 21:00:47 -0700 PDT
+     *    Timestamp: 107608047
+     *      Payload: B5A1CD34B5F99D1154FB6853345C9735
+     * </pre>
      *
      * @return KSUID inspect formatting string
      */
@@ -175,9 +187,18 @@ public class Ksuid implements Comparable<Ksuid> {
         return result;
     }
 
+    /**
+     * Get toString representation. e.g.
+     * <pre>
+     * Ksuid[asString = 0ujtsYcgvSTl8PAuAdqWYSMnLOv, timestamp = 107608047, payload = [-75, ...], ksuidBytes = [6, ...]]
+     * </pre>
+     * 
+     * @see {@link #asString()}
+     */
     @Override
     public String toString() {
         return new StringJoiner(", ", this.getClass().getSimpleName() + "[", "]")
+                .add("asString = " + asString())
                 .add("timestamp = " + timestamp)
                 .add("payload = " + Arrays.toString(payload))
                 .add("ksuidBytes = " + Arrays.toString(ksuidBytes))
