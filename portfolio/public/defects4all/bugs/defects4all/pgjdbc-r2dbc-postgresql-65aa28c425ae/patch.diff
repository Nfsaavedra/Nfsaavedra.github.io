diff --git a/.gitignore b/.gitignore
index 305ef84..dc9148d 100644
--- a/.gitignore
+++ b/.gitignore
@@ -43,3 +43,6 @@ hs_err_pid*
 .project
 .settings
 /bin/
+
+# VSCode
+.vscode/
diff --git a/src/main/java/io/r2dbc/postgresql/codec/HStoreCodec.java b/src/main/java/io/r2dbc/postgresql/codec/HStoreCodec.java
index c3f9530..6f13ad9 100644
--- a/src/main/java/io/r2dbc/postgresql/codec/HStoreCodec.java
+++ b/src/main/java/io/r2dbc/postgresql/codec/HStoreCodec.java
@@ -25,6 +25,8 @@ import io.r2dbc.postgresql.util.Assert;
 import reactor.core.publisher.Mono;
 
 import javax.annotation.Nullable;
+
+import java.nio.charset.StandardCharsets;
 import java.util.LinkedHashMap;
 import java.util.Map;
 
@@ -52,10 +54,10 @@ final class HStoreCodec implements Codec<Map> {
 
     }
 
+    private static final Class<Map> TYPE = Map.class;
+    
     private final ByteBufAllocator byteBufAllocator;
 
-    private final Class<Map> type = Map.class;
-
     private final int oid;
 
     /**
@@ -73,23 +75,21 @@ final class HStoreCodec implements Codec<Map> {
         Assert.requireNonNull(format, "format must not be null");
         Assert.requireNonNull(type, "type must not be null");
 
-        Assert.requireNonNull(type, "type must not be null");
-
-        return dataType == this.oid && type.isAssignableFrom(this.type);
+        return dataType == this.oid && type.isAssignableFrom(TYPE);
     }
 
     @Override
     public boolean canEncode(Object value) {
         Assert.requireNonNull(value, "value must not be null");
 
-        return this.type.isInstance(value);
+        return TYPE.isInstance(value);
     }
 
     @Override
     public boolean canEncodeNull(Class<?> type) {
         Assert.requireNonNull(type, "type must not be null");
 
-        return this.type.isAssignableFrom(type);
+        return TYPE.isAssignableFrom(type);
     }
 
     @Override
@@ -126,10 +126,9 @@ final class HStoreCodec implements Codec<Map> {
 
     private static Map<String, String> decodeTextFormat(ByteBuf buffer) {
         Map<String, String> map = new LinkedHashMap<>();
-        StringBuilder mutableBuffer = new StringBuilder();
 
         while (buffer.isReadable()) {
-            String key = readString(mutableBuffer, buffer);
+            String key = readString(buffer);
             if (key == null) {
                 break;
             }
@@ -140,7 +139,7 @@ final class HStoreCodec implements Codec<Map> {
                 value = null;
                 buffer.skipBytes(4);// skip 'NULL'.
             } else {
-                value = readString(mutableBuffer, buffer);
+                value = readString(buffer);
             }
             map.put(key, value);
 
@@ -163,9 +162,10 @@ final class HStoreCodec implements Codec<Map> {
     }
 
     @Nullable
-    private static String readString(StringBuilder mutableBuffer, ByteBuf buffer) {
-        mutableBuffer.setLength(0);
-        int position = buffer.forEachByte(new IndexOfProcessor((byte) '"'));
+    private static String readString(ByteBuf buffer) {
+        final ByteBuf accBuffer = buffer.alloc().buffer();
+        final int position = buffer.forEachByte(new IndexOfProcessor((byte) '"'));
+
         if (position > buffer.writerIndex()) {
             return null;
         }
@@ -175,17 +175,18 @@ final class HStoreCodec implements Codec<Map> {
         }
 
         while (buffer.isReadable()) {
-            char c = (char) buffer.readByte();
-            if (c == '"') {
+            final byte current = buffer.readByte();
+            
+            if (current == '"') {
                 break;
-            } else if (c == '\\') {
-                c = (char) buffer.readByte();
             }
-            mutableBuffer.append(c);
+
+            accBuffer.writeByte(current == '\\' ? buffer.readByte() : current);
         }
 
-        String result = mutableBuffer.toString();
-        mutableBuffer.setLength(0);
+        final String result = accBuffer.toString(StandardCharsets.UTF_8);
+
+        accBuffer.release();
         return result;
     }
 
@@ -233,7 +234,7 @@ final class HStoreCodec implements Codec<Map> {
 
     @Override
     public Class<?> type() {
-        return this.type;
+        return TYPE;
     }
 
 }
