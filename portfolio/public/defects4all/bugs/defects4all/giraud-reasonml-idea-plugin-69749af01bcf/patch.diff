diff --git a/src/main/java/com/reason/lang/ocaml/OclParser.java b/src/main/java/com/reason/lang/ocaml/OclParser.java
index 3b8cd97..88c58ba 100644
--- a/src/main/java/com/reason/lang/ocaml/OclParser.java
+++ b/src/main/java/com/reason/lang/ocaml/OclParser.java
@@ -1,8 +1,6 @@
 package com.reason.lang.ocaml;
 
 import com.intellij.lang.*;
-import com.intellij.openapi.project.*;
-import com.intellij.psi.*;
 import com.intellij.psi.tree.*;
 import com.reason.lang.*;
 import com.reason.lang.core.type.*;
@@ -15,16 +13,6 @@ public class OclParser extends CommonPsiParser {
         super(isSafe);
     }
 
-    public static ASTNode parseOcamlNode(@NotNull ILazyParseableElementType root, @NotNull ASTNode chameleon) {
-        PsiElement parentElement = chameleon.getTreeParent().getPsi();
-        Project project = parentElement.getProject();
-
-        PsiBuilder builder = PsiBuilderFactory.getInstance().createBuilder(project, chameleon, new OclLexer(), root.getLanguage(), chameleon.getChars());
-        OclParser parser = new OclParser(true);
-
-        return parser.parse(root, builder).getFirstChildNode();
-    }
-
     @Override
     protected ORParser<OclTypes> getORParser(@NotNull PsiBuilder builder) {
         return new OclParserState(builder, myIsSafe);
@@ -344,8 +332,6 @@ public class OclParser extends CommonPsiParser {
                     popEndUntil(myTypes.C_OBJECT);
                     advance().end();
                     popEnd();
-                } else {
-                    //
                 }
             }
         }
@@ -753,6 +739,7 @@ public class OclParser extends CommonPsiParser {
             }
         }
 
+        @SuppressWarnings("StatementWithEmptyBody")
         private void parseEq() {
             if (in(myTypes.H_NAMED_PARAM_DECLARATION) && isFoundScope(myTypes.LPAREN)) {
                 // let fn ?(x |> = <| ...
@@ -774,12 +761,23 @@ public class OclParser extends CommonPsiParser {
                 popEndUntil(myTypes.C_SIG_EXPR).popEnd().advance();
             } else if (strictlyInAny(myTypes.C_LET_DECLARATION, myTypes.C_MODULE_DECLARATION)) {
                 // if inside a let binding, do nothing
-                if (isFound(myTypes.C_LET_DECLARATION) && !isCurrent(myTypes.C_LET_BINDING)) {
+                if (isFound(myTypes.C_LET_DECLARATION)) {
                     int letPos = getIndex();
-                    if (in(myTypes.C_LET_BINDING, null, letPos, false)) {
-                        // in a function ::  let (x) y z |> = <| ...
-                        popEndUntil(myTypes.C_FUNCTION_EXPR).advance()
-                                .mark(myTypes.C_FUNCTION_BODY);
+                    if (isCurrent(myTypes.C_LET_BINDING) && is(myTypes.H_PLACE_HOLDER)) {
+                        // inside a let binding, it might be a binary condition
+                        updateLatestComposite(myTypes.C_BINARY_CONDITION);
+                        markHolderBefore(0, myTypes.H_PLACE_HOLDER);
+                    } else if (in(myTypes.C_LET_BINDING, null, letPos, false)) {
+                        int letBinding = getIndex();
+                        if (in(myTypes.C_FUNCTION_EXPR, null, letBinding, false)) {
+                            // in a function ::  let (x) y z |> = <| ...
+                            popEndUntil(myTypes.C_FUNCTION_EXPR).advance()
+                                    .mark(myTypes.C_FUNCTION_BODY);
+                        } else {
+                            // inside a let binding, but not a function expression. it might be a binary condition
+                            markBefore(letBinding - 1, myTypes.C_BINARY_CONDITION).
+                                    popEndUntil(myTypes.C_BINARY_CONDITION);
+                        }
                     } else {
                         // let x |> = <| ...
                         popEndUntilIndex(letPos).advance().
@@ -1265,6 +1263,7 @@ public class OclParser extends CommonPsiParser {
             mark(myTypes.C_EXTERNAL_DECLARATION);
         }
 
+        @SuppressWarnings("StatementWithEmptyBody")
         private void parseType() {
             if (is(myTypes.C_MODULE_DECLARATION)) {
                 // module |>type<| M = ...
