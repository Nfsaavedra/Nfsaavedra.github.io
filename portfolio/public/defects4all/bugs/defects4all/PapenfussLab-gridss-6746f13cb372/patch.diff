diff --git a/src/main/java/au/edu/wehi/idsv/debruijn/positional/EvidenceTracker.java b/src/main/java/au/edu/wehi/idsv/debruijn/positional/EvidenceTracker.java
index 71c8eb5..51f0aa2 100644
--- a/src/main/java/au/edu/wehi/idsv/debruijn/positional/EvidenceTracker.java
+++ b/src/main/java/au/edu/wehi/idsv/debruijn/positional/EvidenceTracker.java
@@ -1,7 +1,6 @@
 package au.edu.wehi.idsv.debruijn.positional;
 
 import au.edu.wehi.idsv.Defaults;
-import au.edu.wehi.idsv.debruijn.positional.optimiseddatastructures.KmerEvidenceSet;
 import au.edu.wehi.idsv.util.IntervalUtil;
 import it.unimi.dsi.fastutil.ints.IntArrayList;
 import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
@@ -92,24 +91,20 @@ public class EvidenceTracker {
 		return traverse(contig, true);
 	}
 	public Set<KmerEvidence> traverse(Collection<KmerPathSubnode> contig, boolean remove) {
-		Set<KmerEvidence> evidence = Collections.newSetFromMap(new IdentityHashMap<KmerEvidence, Boolean>());
-		Set<KmerEvidence> test =  new KmerEvidenceSet();
+		Set<KmerEvidence> evidence = Defaults.USE_OPTIMISED_ASSEMBLY_DATA_STRUCTURES ? new ObjectOpenHashSet<>() : Collections.newSetFromMap(new IdentityHashMap<KmerEvidence, Boolean>());
 		for (KmerPathSubnode sn : contig) {
 			int start = sn.firstStart();
 			int end = sn.firstEnd();
 			for (int i = 0; i < sn.length(); i++) {
-				toCollection(evidence, test, sn.kmer(i), start + i, end + i, remove);
+				toCollection(evidence, sn.kmer(i), start + i, end + i, remove);
 			}
 			LongArrayList collapsed = sn.node().collapsedKmers();
 			IntArrayList collapsedOffset = sn.node().collapsedKmerOffsets();
 			for (int i = 0; i < collapsed.size(); i++) {
 				int offset = collapsedOffset.getInt(i);
-				toCollection(evidence, test, collapsed.getLong(i), start + offset, end + offset, remove);
+				toCollection(evidence, collapsed.getLong(i), start + offset, end + offset, remove);
 			}
 		}
-		assert(evidence.size() == test.size());
-		assert(evidence.containsAll(test));
-		assert(test.containsAll(evidence));
 		if (remove) {
 			for (KmerEvidence e : evidence) {
 				// remove any leftover evidence kmers not on the called path   
@@ -126,7 +121,7 @@ public class EvidenceTracker {
 	 * @param start
 	 * @param end
 	 */
-	private void toCollection(Collection<KmerEvidence> collection, Collection<KmerEvidence> test, long kmer, int start, int end, boolean remove) {
+	private void toCollection(Collection<KmerEvidence> collection, long kmer, int start, int end, boolean remove) {
 		LinkedList<KmerSupportNode> list = lookup.get(kmer);
 		if (list != null) {
 			ListIterator<KmerSupportNode> it = list.listIterator();
@@ -138,7 +133,6 @@ public class EvidenceTracker {
 					}
 					KmerEvidence e = n.evidence();
 					collection.add(e);
-					test.add(e);
 				}
 			}
 		}
diff --git a/src/main/java/au/edu/wehi/idsv/debruijn/positional/KmerEvidence.java b/src/main/java/au/edu/wehi/idsv/debruijn/positional/KmerEvidence.java
index 03f5a15..42067ca 100644
--- a/src/main/java/au/edu/wehi/idsv/debruijn/positional/KmerEvidence.java
+++ b/src/main/java/au/edu/wehi/idsv/debruijn/positional/KmerEvidence.java
@@ -328,24 +328,15 @@ public class KmerEvidence extends PackedKmerList {
 	}
 	@Override
 	public int hashCode() {
-		return evidence.getEvidenceID().hashCode();
+		return evidence.getEvidenceID().hashCode() + start;
+	}
+	public boolean equals(KmerEvidence other) {
+		// Need start in the equality check since discordant read pairs have both reads added
+		return start == other.start &&
+				evidence.getEvidenceID().equals(other.evidence.getEvidenceID());
 	}
 	@Override
 	public boolean equals(Object obj) {
-		if (this == obj)
-			return true;
-		if (obj == null)
-			return false;
-		if (getClass() != obj.getClass())
-			return false;
-		KmerEvidence other = (KmerEvidence) obj;
-		String id = evidence.getEvidenceID();
-		String oid = other.evidence.getEvidenceID();
-		if (id == null) {
-			if (oid != null)
-				return false;
-		} else if (!id.equals(oid))
-			return false;
-		return true;
+		return this == obj || (obj instanceof KmerEvidence && equals((KmerEvidence)obj));
 	}
 }
diff --git a/src/main/java/au/edu/wehi/idsv/debruijn/positional/optimiseddatastructures/KmerEvidenceSet.java b/src/main/java/au/edu/wehi/idsv/debruijn/positional/optimiseddatastructures/KmerEvidenceSet.java
deleted file mode 100644
index 19efe6a..0000000
--- a/src/main/java/au/edu/wehi/idsv/debruijn/positional/optimiseddatastructures/KmerEvidenceSet.java
+++ /dev/null
@@ -1,96 +0,0 @@
-package au.edu.wehi.idsv.debruijn.positional.optimiseddatastructures;
-
-import au.edu.wehi.idsv.debruijn.positional.KmerEvidence;
-
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.Set;
-
-public class KmerEvidenceSet implements Set<KmerEvidence> {
-    private HashMap<String, KmerEvidence> lookup = new HashMap<>();
-    private String lookupKey(KmerEvidence e) {
-        return e.evidence().getEvidenceID();
-    }
-    @Override
-    public int size() {
-        return lookup.size();
-    }
-
-    @Override
-    public boolean isEmpty() {
-        return lookup.isEmpty();
-    }
-
-    @Override
-    public boolean contains(Object o) {
-        if (o instanceof KmerEvidence) {
-            return lookup.containsKey(lookupKey((KmerEvidence)o));
-        }
-        return false;
-    }
-
-    @Override
-    public Iterator<KmerEvidence> iterator() {
-        return lookup.values().iterator();
-    }
-
-    @Override
-    public Object[] toArray() {
-        return lookup.values().toArray();
-    }
-
-    @Override
-    public <T> T[] toArray(T[] a) {
-        return lookup.values().toArray(a);
-    }
-
-    @Override
-    public boolean add(KmerEvidence kmerEvidence) {
-        return lookup.put(lookupKey(kmerEvidence), kmerEvidence) == null;
-    }
-
-    @Override
-    public boolean remove(Object o) {
-        if (o instanceof KmerEvidence) {
-            return lookup.remove(lookupKey((KmerEvidence)o)) != null;
-        }
-        return false;
-    }
-
-    @Override
-    public boolean containsAll(Collection<?> c) {
-        for (Object o : c) {
-            if (!contains(o)) return false;
-        }
-        return true;
-    }
-
-    @Override
-    public boolean addAll(Collection<? extends KmerEvidence> c) {
-        boolean changed = false;
-        for (KmerEvidence e : c) {
-            changed |= add(e);
-        }
-        return changed;
-    }
-
-    @Override
-    public boolean retainAll(Collection<?> c) {
-        throw new UnsupportedOperationException();
-    }
-
-    @Override
-    public boolean removeAll(Collection<?> c) {
-        boolean changed = false;
-        for (Object o : c) {
-            changed |= remove(o);
-        }
-        return changed;
-    }
-
-    @Override
-    public void clear() {
-        lookup.clear();
-    }
-}
