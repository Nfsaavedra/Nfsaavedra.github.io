diff --git a/src/main/java/de/neuland/pug4j/expression/JexlExpressionHandler.java b/src/main/java/de/neuland/pug4j/expression/JexlExpressionHandler.java
index 66d6e4f..be551e6 100644
--- a/src/main/java/de/neuland/pug4j/expression/JexlExpressionHandler.java
+++ b/src/main/java/de/neuland/pug4j/expression/JexlExpressionHandler.java
@@ -1,13 +1,16 @@
 package de.neuland.pug4j.expression;
 
-import org.apache.commons.jexl3.JexlScript;
-import de.neuland.pug4j.jexl3.internal.PugJexlEngine;
-import org.apache.commons.jexl3.JexlEngine;
-import org.apache.commons.jexl3.MapContext;
+import de.neuland.pug4j.jexl3.PugJexlArithmetic;
+import de.neuland.pug4j.jexl3.PugJexlBuilder;
+import de.neuland.pug4j.jexl3.internal.introspection.PugUberspect;
+import org.apache.commons.jexl3.*;
 
 import de.neuland.pug4j.exceptions.ExpressionException;
 import de.neuland.pug4j.model.PugModel;
+import org.apache.commons.jexl3.introspection.JexlUberspect;
+import org.apache.commons.logging.LogFactory;
 
+import java.util.Map;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
@@ -18,11 +21,39 @@ public class JexlExpressionHandler extends AbstractExpressionHandler {
 	public static Pattern isplusplus = Pattern.compile("\\+\\+\\s*;{0,1}\\s*$");
 	public static Pattern minusminus = Pattern.compile("([a-zA-Z0-9-_]*[a-zA-Z0-9])--\\s*;{0,1}\\s*$");
 	public static Pattern isminusminus = Pattern.compile("--\\s*;{0,1}\\s*$");
+
+	private final PugUberspect pugUberspect = new PugUberspect(LogFactory.getLog(JexlEngine.class),
+		(op, obj) -> {
+			if (obj instanceof Map) {
+				return JexlUberspect.MAP;
+			}
+			if (op == JexlOperator.ARRAY_GET) {
+				return JexlUberspect.MAP;
+			} else if (op == JexlOperator.ARRAY_SET) {
+				return JexlUberspect.MAP;
+			} else {
+				return op == null && obj instanceof Map ? JexlUberspect.MAP : JexlUberspect.POJO;
+			}
+		}
+	);
+
+	private final PugJexlArithmetic pugJexlArithmetic = new PugJexlArithmetic(false);
+
+	private JexlEngine getJexlEngine(final int maxEntries) {
+		return new PugJexlBuilder()
+				.arithmetic(pugJexlArithmetic)
+				.uberspect(pugUberspect)
+				.safe(true)
+				.silent(false)
+				.strict(false)
+				.cache(maxEntries)
+				.create();
+	}
+
 	private JexlEngine jexl;
 
 	public JexlExpressionHandler() {
-		jexl = new PugJexlEngine(MAX_ENTRIES);
-
+		jexl = getJexlEngine(MAX_ENTRIES);
 	}
 
 	public Boolean evaluateBooleanExpression(String expression, PugModel model) throws ExpressionException {
@@ -85,7 +116,7 @@ public class JexlExpressionHandler extends AbstractExpressionHandler {
 	}
 	
 	public void setCache(boolean cache) {
-		jexl = new PugJexlEngine(cache ? MAX_ENTRIES : 0);
+		jexl = getJexlEngine(cache ? MAX_ENTRIES : 0);
 	}
 
     public void clearCache() {
diff --git a/src/main/java/de/neuland/pug4j/jexl3/PugJexlArithmetic.java b/src/main/java/de/neuland/pug4j/jexl3/PugJexlArithmetic.java
index 0b27385..df0205e 100644
--- a/src/main/java/de/neuland/pug4j/jexl3/PugJexlArithmetic.java
+++ b/src/main/java/de/neuland/pug4j/jexl3/PugJexlArithmetic.java
@@ -6,6 +6,7 @@ import org.apache.commons.jexl3.JexlArithmetic;
 import java.math.BigDecimal;
 import java.math.BigInteger;
 import java.util.Collection;
+import java.util.concurrent.atomic.AtomicBoolean;
 
 public class PugJexlArithmetic extends JexlArithmetic {
 
@@ -13,61 +14,22 @@ public class PugJexlArithmetic extends JexlArithmetic {
         super(astrict);
     }
 
+    /**
+     * Prioritize String comparison
+     *
+     * @param left     the left operand
+     * @param right    the right operator
+     * @param operator the operator
+     * @return
+     */
     @Override
-    protected int compare(Object left, Object right, String operator) {
+    protected int compare(final Object left, final Object right, final String operator) {
         if (left != null && right != null) {
             if (left instanceof String || right instanceof String) {
                 return toString(left).compareTo(toString(right));
-            } else if (left instanceof BigDecimal || right instanceof BigDecimal) {
-                BigDecimal l = toBigDecimal(left);
-                BigDecimal r = toBigDecimal(right);
-                return l.compareTo(r);
-            } else if (left instanceof BigInteger || right instanceof BigInteger) {
-                BigInteger l = toBigInteger(left);
-                BigInteger r = toBigInteger(right);
-                return l.compareTo(r);
-            } else if (isFloatingPoint(left) || isFloatingPoint(right)) {
-                double lhs = toDouble(left);
-                double rhs = toDouble(right);
-                if (Double.isNaN(lhs)) {
-                    if (Double.isNaN(rhs)) {
-                        return 0;
-                    } else {
-                        return -1;
-                    }
-                } else if (Double.isNaN(rhs)) {
-                    // lhs is not NaN
-                    return +1;
-                } else if (lhs < rhs) {
-                    return -1;
-                } else if (lhs > rhs) {
-                    return +1;
-                } else {
-                    return 0;
-                }
-            } else if (isNumberable(left) || isNumberable(right)) {
-                long lhs = toLong(left);
-                long rhs = toLong(right);
-                if (lhs < rhs) {
-                    return -1;
-                } else if (lhs > rhs) {
-                    return +1;
-                } else {
-                    return 0;
-                }
-            } else if ("==".equals(operator)) {
-                return left.equals(right) ? 0 : -1;
-            } else if (left instanceof Comparable<?>) {
-                @SuppressWarnings("unchecked") // OK because of instanceof check above
-                final Comparable<Object> comparable = (Comparable<Object>) left;
-                return comparable.compareTo(right);
-            } else if (right instanceof Comparable<?>) {
-                @SuppressWarnings("unchecked") // OK because of instanceof check above
-                final Comparable<Object> comparable = (Comparable<Object>) right;
-                return comparable.compareTo(left);
             }
         }
-        throw new ArithmeticException("Object comparison:(" + left + " " + operator + " " + right + ")");
+        return super.compare(left,right,operator);
     }
 
     /**
@@ -76,23 +38,11 @@ public class PugJexlArithmetic extends JexlArithmetic {
      * defaulting to "true"
      */
     @Override
-    public boolean toBoolean(Object val) {
-        if (val == null) {
-            controlNullOperand();
-            return false;
-        } else if (val instanceof Boolean) {
-            return (Boolean) val;
-        } else if (val instanceof Number) {
-            double number = toDouble(val);
-            return !Double.isNaN(number) && number != 0.d;
-        } else if (val instanceof String) {
-            String strval = val.toString();
-            return strval.length() > 0 && !"false".equals(strval);
-        } else if (val instanceof Collection) {
+    public boolean toBoolean(final Object val) {
+        if (val instanceof Collection) {
             return CollectionUtils.isNotEmpty((Collection) val);
         }
-
-        return true;
+        return super.toBoolean(val);
     }
 
     @Override
@@ -100,10 +50,9 @@ public class PugJexlArithmetic extends JexlArithmetic {
         if (left instanceof String && right instanceof String) {
             return (String)left + right;
         }
-        else {
-            return super.add(left, right);
-        }
+        return super.add(left, right);
     }
+
     @Override
     public MapBuilder mapBuilder(int size) {
         return new de.neuland.pug4j.jexl3.internal.MapBuilder(size);
diff --git a/src/main/java/de/neuland/pug4j/jexl3/PugJexlBuilder.java b/src/main/java/de/neuland/pug4j/jexl3/PugJexlBuilder.java
new file mode 100644
index 0000000..d6ea29d
diff --git a/src/main/java/de/neuland/pug4j/jexl3/PugJexlBuilder.java b/src/main/java/de/neuland/pug4j/jexl3/PugJexlBuilder.java
new file mode 100644
index 0000000..d6ea29d
--- a/src/main/java/de/neuland/pug4j/jexl3/PugJexlBuilder.java
+++ b/src/main/java/de/neuland/pug4j/jexl3/PugJexlBuilder.java
@@ -0,0 +1,12 @@
+package de.neuland.pug4j.jexl3;
+
+import de.neuland.pug4j.jexl3.internal.PugJexlEngine;
+import org.apache.commons.jexl3.JexlBuilder;
+import org.apache.commons.jexl3.JexlEngine;
+
+public class PugJexlBuilder extends JexlBuilder {
+    @Override
+    public JexlEngine create() {
+        return new PugJexlEngine(this);
+    }
+}
diff --git a/src/main/java/de/neuland/pug4j/jexl3/internal/PugJexlEngine.java b/src/main/java/de/neuland/pug4j/jexl3/internal/PugJexlEngine.java
index 8faa447..1e603a3 100644
--- a/src/main/java/de/neuland/pug4j/jexl3/internal/PugJexlEngine.java
+++ b/src/main/java/de/neuland/pug4j/jexl3/internal/PugJexlEngine.java
@@ -1,40 +1,19 @@
 package de.neuland.pug4j.jexl3.internal;
 
 
-import de.neuland.pug4j.jexl3.PugJexlArithmetic;
 import org.apache.commons.jexl3.*;
 import org.apache.commons.jexl3.internal.Engine;
-import de.neuland.pug4j.jexl3.internal.introspection.PugUberspect;
 import org.apache.commons.jexl3.internal.Frame;
 import org.apache.commons.jexl3.internal.Interpreter;
-import org.apache.commons.jexl3.introspection.JexlUberspect;
-import org.apache.commons.logging.LogFactory;
-
-import java.util.List;
-import java.util.Map;
 
 public class PugJexlEngine extends Engine {
+    public PugJexlEngine(final JexlBuilder conf) {
+        super(conf);
+    }
 
-	/*
+    /*
 	 * using a semi strict interpreter and non strict arithmetic
 	 */
-	public PugJexlEngine(int cacheSize) {
-		super(new JexlBuilder().arithmetic(new PugJexlArithmetic(false)).uberspect(new PugUberspect(LogFactory.getLog(JexlEngine.class),
-                new JexlUberspect.ResolverStrategy() {
-                    public List<JexlUberspect.PropertyResolver> apply(JexlOperator op, Object obj) {
-                        if(obj instanceof Map){
-                            return JexlUberspect.MAP;
-                        }
-                        if (op == JexlOperator.ARRAY_GET) {
-                            return JexlUberspect.MAP;
-                        } else if (op == JexlOperator.ARRAY_SET) {
-                            return JexlUberspect.MAP;
-                        } else {
-                            return op == null && obj instanceof Map ? JexlUberspect.MAP : JexlUberspect.POJO;
-                        }
-                    }
-                })).strict(false).cache(cacheSize));
-	}
     protected Interpreter createInterpreter(final JexlContext context, final Frame frame, final JexlOptions opts) {
         return new PugJexlInterpreter(this, opts, context == null ? EMPTY_CONTEXT : context, frame);
     }
diff --git a/src/main/java/de/neuland/pug4j/jexl3/internal/PugJexlInterpreter.java b/src/main/java/de/neuland/pug4j/jexl3/internal/PugJexlInterpreter.java
index 40be944..a8bc8a3 100644
--- a/src/main/java/de/neuland/pug4j/jexl3/internal/PugJexlInterpreter.java
+++ b/src/main/java/de/neuland/pug4j/jexl3/internal/PugJexlInterpreter.java
@@ -7,7 +7,6 @@ import org.apache.commons.jexl3.JexlOptions;
 import org.apache.commons.jexl3.internal.Engine;
 import org.apache.commons.jexl3.internal.Frame;
 import org.apache.commons.jexl3.internal.Interpreter;
-import org.apache.commons.jexl3.internal.Scope;
 import org.apache.commons.jexl3.parser.ASTIdentifier;
 import org.apache.commons.jexl3.parser.ASTMethodNode;
 import org.apache.commons.jexl3.parser.ASTReference;
