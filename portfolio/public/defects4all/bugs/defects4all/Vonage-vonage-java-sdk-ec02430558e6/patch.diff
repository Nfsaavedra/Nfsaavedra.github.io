diff --git a/build.gradle b/build.gradle
index 88d080b..8c5f12d 100644
--- a/build.gradle
+++ b/build.gradle
@@ -14,7 +14,7 @@ apply plugin: "jacoco"
 apply plugin: 'maven'
 apply plugin: 'signing'
 apply plugin: 'eclipse'
-// apply plugin: 'war'
+
 
 group = "com.nexmo"
 archivesBaseName = "client"
diff --git a/src/main/java/com/nexmo/client/voice/ModifyCallMethod.java b/src/main/java/com/nexmo/client/voice/ModifyCallMethod.java
index 4800188..de5f4cd 100644
--- a/src/main/java/com/nexmo/client/voice/ModifyCallMethod.java
+++ b/src/main/java/com/nexmo/client/voice/ModifyCallMethod.java
@@ -38,9 +38,8 @@ import java.io.UnsupportedEncodingException;
 class ModifyCallMethod extends AbstractMethod<CallModifier, ModifyCallResponse> {
     private static final Log LOG = LogFactory.getLog(ModifyCallMethod.class);
 
-    private static final String DEFAULT_URI = "https://api.nexmo.com/v1/calls/";
+    private static final String PATH = "/calls/";
     private static final Class[] ALLOWED_AUTH_METHODS = new Class[]{JWTAuthMethod.class};
-    private String uri = DEFAULT_URI;
 
     ModifyCallMethod(HttpWrapper httpWrapper) {
         super(httpWrapper);
@@ -53,9 +52,8 @@ class ModifyCallMethod extends AbstractMethod<CallModifier, ModifyCallResponse> 
 
     @Override
     public RequestBuilder makeRequest(CallModifier request) throws UnsupportedEncodingException {
-        String uri = this.uri + request.getUuid();
         return RequestBuilder
-                .put(uri)
+                .put(httpWrapper.getHttpConfig().getVersionedApiBaseUri("v1") + PATH + request.getUuid())
                 .setHeader("Content-Type", "application/json")
                 .setEntity(new StringEntity(request.toJson(), ContentType.APPLICATION_JSON));
     }
@@ -69,8 +67,4 @@ class ModifyCallMethod extends AbstractMethod<CallModifier, ModifyCallResponse> 
             return null;
         }
     }
-
-    public void setUri(String uri) {
-        this.uri = uri;
-    }
 }
diff --git a/src/main/java/com/nexmo/client/voice/SendDtmfMethod.java b/src/main/java/com/nexmo/client/voice/SendDtmfMethod.java
index 91eb7c3..16eb3c7 100644
--- a/src/main/java/com/nexmo/client/voice/SendDtmfMethod.java
+++ b/src/main/java/com/nexmo/client/voice/SendDtmfMethod.java
@@ -28,6 +28,8 @@ import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.http.HttpResponse;
 import org.apache.http.client.methods.RequestBuilder;
+import org.apache.http.client.utils.URIBuilder;
+import org.apache.http.client.utils.URIUtils;
 import org.apache.http.entity.ContentType;
 import org.apache.http.entity.StringEntity;
 import org.apache.http.impl.client.BasicResponseHandler;
@@ -38,9 +40,9 @@ import java.io.UnsupportedEncodingException;
 class SendDtmfMethod extends AbstractMethod<DtmfRequest, DtmfResponse> {
     private static final Log LOG = LogFactory.getLog(SendDtmfMethod.class);
 
-    private static final String DEFAULT_URI = "https://api.nexmo.com/v1/calls/";
+    private static final String PATH = "/calls/";
     private static final Class[] ALLOWED_AUTH_METHODS = new Class[]{JWTAuthMethod.class};
-    private String uri = DEFAULT_URI;
+    public static final String DTMF_PATH = "/dtmf";
 
     SendDtmfMethod(HttpWrapper httpWrapper) {
         super(httpWrapper);
@@ -53,8 +55,8 @@ class SendDtmfMethod extends AbstractMethod<DtmfRequest, DtmfResponse> {
 
     @Override
     public RequestBuilder makeRequest(DtmfRequest request) throws UnsupportedEncodingException {
-        String uri = this.uri + request.getUuid() + "/dtmf";
-        return RequestBuilder.put(uri)
+        return RequestBuilder
+                .put(httpWrapper.getHttpConfig().getVersionedApiBaseUri("v1") + PATH + request.getUuid() + DTMF_PATH)
                 .setHeader("Content-Type", "application/json")
                 .setEntity(new StringEntity(request.toJson(), ContentType.APPLICATION_JSON));
     }
@@ -64,8 +66,4 @@ class SendDtmfMethod extends AbstractMethod<DtmfRequest, DtmfResponse> {
         String json = new BasicResponseHandler().handleResponse(response);
         return DtmfResponse.fromJson(json);
     }
-
-    public void setUri(String uri) {
-        this.uri = uri;
-    }
 }
diff --git a/src/main/java/com/nexmo/client/voice/StopStreamMethod.java b/src/main/java/com/nexmo/client/voice/StopStreamMethod.java
index 71a2d8d..e0c8e2f 100644
--- a/src/main/java/com/nexmo/client/voice/StopStreamMethod.java
+++ b/src/main/java/com/nexmo/client/voice/StopStreamMethod.java
@@ -37,8 +37,8 @@ class StopStreamMethod extends AbstractMethod<String, StreamResponse> {
     private static final Log LOG = LogFactory.getLog(StopStreamMethod.class);
 
     private static final String PATH = "/calls/";
+    public static final String STREAM_PATH = "/stream";
     private static final Class[] ALLOWED_AUTH_METHODS = new Class[]{JWTAuthMethod.class};
-    private String uri;
 
     StopStreamMethod(HttpWrapper httpWrapper) {
         super(httpWrapper);
@@ -52,7 +52,7 @@ class StopStreamMethod extends AbstractMethod<String, StreamResponse> {
     @Override
     public RequestBuilder makeRequest(String uuid) throws UnsupportedEncodingException {
         return RequestBuilder
-                .delete(httpWrapper.getHttpConfig().getVersionedApiBaseUri("v1") + PATH + uuid + "/stream")
+                .delete(httpWrapper.getHttpConfig().getVersionedApiBaseUri("v1") + PATH + uuid + STREAM_PATH)
                 .setHeader("Content-Type", "application/json");
     }
 
diff --git a/src/main/java/com/nexmo/client/voice/StopTalkMethod.java b/src/main/java/com/nexmo/client/voice/StopTalkMethod.java
index 85a54aa..dec9393 100644
--- a/src/main/java/com/nexmo/client/voice/StopTalkMethod.java
+++ b/src/main/java/com/nexmo/client/voice/StopTalkMethod.java
@@ -22,6 +22,7 @@
 package com.nexmo.client.voice;
 
 import com.nexmo.client.AbstractMethod;
+import com.nexmo.client.HttpConfig;
 import com.nexmo.client.HttpWrapper;
 import com.nexmo.client.auth.JWTAuthMethod;
 import org.apache.commons.logging.Log;
@@ -36,9 +37,9 @@ import java.io.UnsupportedEncodingException;
 class StopTalkMethod extends AbstractMethod<String, TalkResponse> {
     private static final Log LOG = LogFactory.getLog(StopTalkMethod.class);
 
-    private static final String DEFAULT_URI = "https://api.nexmo.com/v1/calls/";
+    private static final String PATH = "/calls/";
     private static final Class[] ALLOWED_AUTH_METHODS = new Class[]{JWTAuthMethod.class};
-    private String uri = DEFAULT_URI;
+    public static final String TALK_PATH = "/talk";
 
     StopTalkMethod(HttpWrapper httpWrapper) {
         super(httpWrapper);
@@ -51,8 +52,9 @@ class StopTalkMethod extends AbstractMethod<String, TalkResponse> {
 
     @Override
     public RequestBuilder makeRequest(String uuid) throws UnsupportedEncodingException {
-        String uri = this.uri + uuid + "/talk";
-        return RequestBuilder.delete(uri).setHeader("Content-Type", "application/json");
+        return RequestBuilder
+                .delete(httpWrapper.getHttpConfig().getVersionedApiBaseUri("v1") + PATH + uuid + TALK_PATH)
+                .setHeader("Content-Type", "application/json");
     }
 
     @Override
@@ -60,8 +62,4 @@ class StopTalkMethod extends AbstractMethod<String, TalkResponse> {
         String json = new BasicResponseHandler().handleResponse(response);
         return TalkResponse.fromJson(json);
     }
-
-    public void setUri(String uri) {
-        this.uri = uri;
-    }
 }
diff --git a/src/test/java/com/nexmo/client/voice/StopTalkMethodTest.java b/src/test/java/com/nexmo/client/voice/StopTalkMethodTest.java
new file mode 100644
index 0000000..e95983d
--- /dev/null
+++ b/src/test/java/com/nexmo/client/voice/StopTalkMethodTest.java
@@ -0,0 +1,77 @@
+package com.nexmo.client.voice;
+
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.nexmo.client.HttpConfig;
+import com.nexmo.client.HttpWrapper;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.http.HttpResponse;
+import org.apache.http.NameValuePair;
+import org.apache.http.ProtocolVersion;
+import org.apache.http.client.methods.RequestBuilder;
+import org.apache.http.entity.BasicHttpEntity;
+import org.apache.http.message.BasicHttpResponse;
+import org.apache.http.message.BasicStatusLine;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.UnsupportedEncodingException;
+import java.nio.charset.StandardCharsets;
+
+import static org.junit.Assert.*;
+
+public class StopTalkMethodTest {
+    private static final Log LOG = LogFactory.getLog(StopTalkMethodTest.class);
+
+    private StopTalkMethod method;
+
+    @Before
+    public void setUp() throws Exception {
+        method = new StopTalkMethod(new HttpWrapper());
+    }
+
+    @Test
+    public void makeRequestTest()throws Exception {
+        RequestBuilder request = method.makeRequest("63f61863-4a51-4f6b-86e1-46edebcf9356");
+
+        assertEquals("DELETE", request.getMethod());
+        assertEquals("application/json", request.getFirstHeader("Content-Type").getValue());
+
+        assertTrue(request.getUri().toString().contains("63f61863-4a51-4f6b-86e1-46edebcf9356"));
+        assertTrue(request.getUri().toString().contains("talk"));
+    }
+
+    @Test
+    public void parseResponseTest() throws IOException {
+
+        HttpResponse stubResponse = new BasicHttpResponse(
+                new BasicStatusLine(new ProtocolVersion("1.1", 1, 1), 200, "OK")
+        );
+
+        String json = "{\"message\":\"Talk stopped\", \"uuid\":\"63f61863-4a51-4f6b-86e1-46edebcf9356\" }";
+        InputStream jsonStream = new ByteArrayInputStream(json.getBytes(StandardCharsets.UTF_8));
+        BasicHttpEntity entity = new BasicHttpEntity();
+        entity.setContent(jsonStream);
+        stubResponse.setEntity(entity);
+
+        TalkResponse response = method.parseResponse(stubResponse);
+        assertEquals("Talk stopped", response.getMessage());
+        assertEquals("63f61863-4a51-4f6b-86e1-46edebcf9356", response.getUuid());
+    }
+
+    @Test
+    public void customUriTest() throws UnsupportedEncodingException {
+        String expectedUri = "https://example.com/v1/calls/63f61863-4a51-4f6b-86e1-46edebcf9356/talk";
+        HttpWrapper wrapper = new HttpWrapper(HttpConfig.builder().baseUri("https://example.com").build());
+
+        method = new StopTalkMethod(wrapper);
+        RequestBuilder builder = method.makeRequest("63f61863-4a51-4f6b-86e1-46edebcf9356");
+
+        assertEquals(expectedUri, builder.getUri().toString());
+
+    }
+}
\ No newline at end of file
