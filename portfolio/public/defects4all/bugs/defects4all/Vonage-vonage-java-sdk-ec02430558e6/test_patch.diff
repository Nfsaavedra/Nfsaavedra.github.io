diff --git a/src/test/java/com/nexmo/client/voice/ModifyCallMethodTest.java b/src/test/java/com/nexmo/client/voice/ModifyCallMethodTest.java
index 2ef1789..741669f 100644
--- a/src/test/java/com/nexmo/client/voice/ModifyCallMethodTest.java
+++ b/src/test/java/com/nexmo/client/voice/ModifyCallMethodTest.java
@@ -23,6 +23,7 @@ package com.nexmo.client.voice;
 
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.ObjectMapper;
+import com.nexmo.client.HttpConfig;
 import com.nexmo.client.HttpWrapper;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -32,11 +33,11 @@ import org.apache.http.client.methods.RequestBuilder;
 import org.apache.http.entity.BasicHttpEntity;
 import org.apache.http.message.BasicHttpResponse;
 import org.apache.http.message.BasicStatusLine;
+import org.junit.Before;
 import org.junit.Test;
 
 import java.io.ByteArrayInputStream;
 import java.io.InputStream;
-import java.net.URI;
 import java.nio.charset.StandardCharsets;
 
 import static org.junit.Assert.assertEquals;
@@ -45,12 +46,16 @@ import static org.junit.Assert.assertNull;
 public class ModifyCallMethodTest {
     private static final Log LOG = LogFactory.getLog(ModifyCallMethodTest.class);
 
+    private ModifyCallMethod method;
+
+    @Before
+    public void setUp() throws Exception {
+        method = new ModifyCallMethod(new HttpWrapper());
+    }
+
     @Test
     public void makeRequest() throws Exception {
-        HttpWrapper httpWrapper = new HttpWrapper();
-        ModifyCallMethod methodUnderTest = new ModifyCallMethod(httpWrapper);
-
-        RequestBuilder request = methodUnderTest.makeRequest(
+        RequestBuilder request = method.makeRequest(
                 new CallModifier("abc-123", ModifyCallAction.HANGUP)
         );
 
@@ -64,10 +69,7 @@ public class ModifyCallMethodTest {
 
     @Test
     public void earmuffRequest() throws Exception {
-        HttpWrapper httpWrapper = new HttpWrapper();
-        ModifyCallMethod methodUnderTest = new ModifyCallMethod(httpWrapper);
-
-        RequestBuilder request = methodUnderTest.makeRequest(
+        RequestBuilder request = method.makeRequest(
                 new CallModifier("abc-123", ModifyCallAction.EARMUFF)
         );
 
@@ -81,10 +83,7 @@ public class ModifyCallMethodTest {
 
     @Test
     public void unearmuffRequest() throws Exception {
-        HttpWrapper httpWrapper = new HttpWrapper();
-        ModifyCallMethod methodUnderTest = new ModifyCallMethod(httpWrapper);
-
-        RequestBuilder request = methodUnderTest.makeRequest(
+        RequestBuilder request = method.makeRequest(
                 new CallModifier("abc-123", ModifyCallAction.UNEARMUFF)
         );
 
@@ -98,10 +97,7 @@ public class ModifyCallMethodTest {
 
     @Test
     public void muteRequest() throws Exception {
-        HttpWrapper httpWrapper = new HttpWrapper();
-        ModifyCallMethod methodUnderTest = new ModifyCallMethod(httpWrapper);
-
-        RequestBuilder request = methodUnderTest.makeRequest(
+        RequestBuilder request = method.makeRequest(
                 new CallModifier("abc-123", ModifyCallAction.MUTE)
         );
 
@@ -115,10 +111,7 @@ public class ModifyCallMethodTest {
 
     @Test
     public void unmuteRequest() throws Exception {
-        HttpWrapper httpWrapper = new HttpWrapper();
-        ModifyCallMethod methodUnderTest = new ModifyCallMethod(httpWrapper);
-
-        RequestBuilder request = methodUnderTest.makeRequest(
+        RequestBuilder request = method.makeRequest(
                 new CallModifier("abc-123", ModifyCallAction.UNMUTE)
         );
 
@@ -132,9 +125,6 @@ public class ModifyCallMethodTest {
 
     @Test
     public void parseResponse() throws Exception {
-        HttpWrapper wrapper = new HttpWrapper();
-        ModifyCallMethod methodUnderTest = new ModifyCallMethod(wrapper);
-
         HttpResponse stubResponse = new BasicHttpResponse(
                 new BasicStatusLine(new ProtocolVersion("1.1", 1, 1), 200, "OK")
         );
@@ -145,30 +135,31 @@ public class ModifyCallMethodTest {
         entity.setContent(jsonStream);
         stubResponse.setEntity(entity);
 
-        ModifyCallResponse response = methodUnderTest.parseResponse(stubResponse);
+        ModifyCallResponse response = method.parseResponse(stubResponse);
         assertEquals("Received", response.getMessage());
     }
 
     @Test
     public void parseNullResponse() throws Exception {
-        HttpWrapper wrapper = new HttpWrapper();
-        ModifyCallMethod methodUnderTest = new ModifyCallMethod(wrapper);
-
         HttpResponse stubResponse = new BasicHttpResponse(
                 new BasicStatusLine(new ProtocolVersion("1.1", 1, 1), 204, "OK")
         );
 
-        ModifyCallResponse response = methodUnderTest.parseResponse(stubResponse);
+        ModifyCallResponse response = method.parseResponse(stubResponse);
         assertNull(response);
     }
 
     @Test
-    public void testSetUri() throws Exception {
-        ModifyCallMethod methodUnderTest = new ModifyCallMethod(null);
-        methodUnderTest.setUri("https://example.com/dummy/");
-        RequestBuilder req = methodUnderTest.makeRequest(
-                new CallModifier("uuid-1234", ModifyCallAction.HANGUP)
+    public void testCustomUri() throws Exception {
+        String expectedUri = "https://example.com/v1/calls/ssf61863-4a51-ef6b-11e1-w6edebcf93bA";
+
+        HttpWrapper wrapper = new HttpWrapper(HttpConfig.builder().baseUri("https://example.com").build());
+        method = new ModifyCallMethod(wrapper);
+
+        RequestBuilder builder = method.makeRequest(
+                new CallModifier("ssf61863-4a51-ef6b-11e1-w6edebcf93bA", ModifyCallAction.HANGUP)
         );
-        assertEquals(new URI("https://example.com/dummy/uuid-1234"), req.getUri());
+        assertEquals("PUT", builder.getMethod());
+        assertEquals(expectedUri, builder.build().getURI().toString());
     }
 }
diff --git a/src/test/java/com/nexmo/client/voice/ReadCallMethodTest.java b/src/test/java/com/nexmo/client/voice/ReadCallMethodTest.java
index 1a42d7c..24c3faf 100644
--- a/src/test/java/com/nexmo/client/voice/ReadCallMethodTest.java
+++ b/src/test/java/com/nexmo/client/voice/ReadCallMethodTest.java
@@ -39,7 +39,7 @@ public class ReadCallMethodTest {
 
     @Before
     public void setUp() throws Exception {
-        this.method = new ReadCallMethod(new HttpWrapper());
+        method = new ReadCallMethod(new HttpWrapper());
     }
 
     @Test
diff --git a/src/test/java/com/nexmo/client/voice/SendDtmfMethodTest.java b/src/test/java/com/nexmo/client/voice/SendDtmfMethodTest.java
index 87b961d..7fccd65 100644
--- a/src/test/java/com/nexmo/client/voice/SendDtmfMethodTest.java
+++ b/src/test/java/com/nexmo/client/voice/SendDtmfMethodTest.java
@@ -23,6 +23,7 @@ package com.nexmo.client.voice;
 
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.ObjectMapper;
+import com.nexmo.client.HttpConfig;
 import com.nexmo.client.HttpWrapper;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -32,6 +33,7 @@ import org.apache.http.client.methods.RequestBuilder;
 import org.apache.http.entity.BasicHttpEntity;
 import org.apache.http.message.BasicHttpResponse;
 import org.apache.http.message.BasicStatusLine;
+import org.junit.Before;
 import org.junit.Test;
 
 import java.io.ByteArrayInputStream;
@@ -45,6 +47,12 @@ import static org.junit.Assert.assertEquals;
 public class SendDtmfMethodTest {
     private static final Log LOG = LogFactory.getLog(SendDtmfMethodTest.class);
 
+    private SendDtmfMethod method;
+    @Before
+    public void setUp() throws Exception {
+        method = new SendDtmfMethod(new HttpWrapper());
+    }
+
     @Test
     public void makeRequest() throws Exception {
         HttpWrapper httpWrapper = new HttpWrapper();
@@ -86,4 +94,16 @@ public class SendDtmfMethodTest {
     public void testRequestThrottleResponse() throws Exception {
         test429(new SendDtmfMethod(null));
     }
+
+    @Test
+    public void testCustomUri() throws Exception {
+        String expectedUri = "https://example.com/v1/calls/ssf61863-4a51-ef6b-11e1-w6edebcf93bb/dtmf";
+
+        HttpWrapper wrapper = new HttpWrapper(HttpConfig.builder().baseUri("https://example.com").build());
+        method = new SendDtmfMethod(wrapper);
+
+        RequestBuilder builder = method.makeRequest(new DtmfRequest("ssf61863-4a51-ef6b-11e1-w6edebcf93bb", "1"));
+        assertEquals("PUT", builder.getMethod());
+        assertEquals(expectedUri, builder.build().getURI().toString());
+    }
 }
diff --git a/src/test/java/com/nexmo/client/voice/StopStreamMethodTest.java b/src/test/java/com/nexmo/client/voice/StopStreamMethodTest.java
index 8ff07f4..c11af0c 100644
--- a/src/test/java/com/nexmo/client/voice/StopStreamMethodTest.java
+++ b/src/test/java/com/nexmo/client/voice/StopStreamMethodTest.java
@@ -23,34 +23,88 @@ package com.nexmo.client.voice;
 
 import com.nexmo.client.HttpConfig;
 import com.nexmo.client.HttpWrapper;
+import org.apache.http.HttpResponse;
+import org.apache.http.ProtocolVersion;
 import org.apache.http.client.methods.RequestBuilder;
+import org.apache.http.entity.BasicHttpEntity;
+import org.apache.http.message.BasicHttpResponse;
+import org.apache.http.message.BasicStatusLine;
 import org.junit.Before;
 import org.junit.Test;
 
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.UnsupportedEncodingException;
+import java.nio.charset.StandardCharsets;
+
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
 
 public class StopStreamMethodTest {
     private StopStreamMethod method;
+    String httpMethod;
 
     @Before
     public void setUp() throws Exception {
         this.method = new StopStreamMethod(new HttpWrapper());
+        httpMethod = "DELETE";
+    }
+
+    @Test
+    public void makeRequestTest() throws UnsupportedEncodingException {
+        RequestBuilder builder = method.makeRequest("63f61863-4a51-4f6b-86e1-46edebcf9356");
+
+        assertEquals(httpMethod, builder.getMethod());
+        assertTrue(builder.getUri().toString().contains("63f61863-4a51-4f6b-86e1-46edebcf9356"));
+        assertTrue(builder.getUri().toString().contains("stream"));
+    }
+
+    @Test
+    public void parseResponseTest() throws IOException {
+        String expectedUuid = "63f61863-4a51-4f6b-86e1-46edebcf9356";
+        String expectedMessage = "Stream stopped";
+
+        HttpResponse stubResponse =
+                new BasicHttpResponse(
+                        new BasicStatusLine(
+                                new ProtocolVersion("1.1", 1, 1), 200, "OK")
+        );
+        String json = "{\"message\":\"Stream stopped\", \"uuid\":\"63f61863-4a51-4f6b-86e1-46edebcf9356\" }";
+        InputStream jsonStream = new ByteArrayInputStream(json.getBytes(StandardCharsets.UTF_8));
+        BasicHttpEntity entity = new BasicHttpEntity();
+        entity.setContent(jsonStream);
+        stubResponse.setEntity(entity);
+
+        StreamResponse response = method.parseResponse(stubResponse);
+
+        assertEquals(expectedMessage, response.getMessage());
+        assertEquals(expectedUuid, response.getUuid());
+
     }
 
     @Test
     public void testDefaultUri() throws Exception {
-        RequestBuilder builder = method.makeRequest("uuid");
-        assertEquals("DELETE", builder.getMethod());
-        assertEquals("https://api.nexmo.com/v1/calls/uuid/stream", builder.build().getURI().toString());
+        String expectedUri = "https://api.nexmo.com/v1/calls/63f61863-4a51-4f6b-86e1-46edebcf9356/stream";
+
+        RequestBuilder builder = method.makeRequest("63f61863-4a51-4f6b-86e1-46edebcf9356");
+
+        assertEquals(httpMethod, builder.getMethod());
+        assertEquals(expectedUri, builder.build().getURI().toString());
     }
 
     @Test
     public void testCustomUri() throws Exception {
+        String uuid = "63f61863-4a51-4f6b-86e1-46edebcf9356";
+        String expectedUri = "https://example.com/v1/calls/" + uuid + "/stream";
+        String httpMethod = "DELETE";
+
         HttpWrapper wrapper = new HttpWrapper(HttpConfig.builder().baseUri("https://example.com").build());
         StopStreamMethod method = new StopStreamMethod(wrapper);
 
-        RequestBuilder builder = method.makeRequest("uuid");
-        assertEquals("DELETE", builder.getMethod());
-        assertEquals("https://example.com/v1/calls/uuid/stream", builder.build().getURI().toString());
+        RequestBuilder builder = method.makeRequest(uuid);
+
+        assertEquals(httpMethod, builder.getMethod());
+        assertEquals(expectedUri, builder.build().getURI().toString());
     }
 }
