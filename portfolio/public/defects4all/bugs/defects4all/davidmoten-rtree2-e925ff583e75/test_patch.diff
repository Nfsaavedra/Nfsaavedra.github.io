diff --git a/src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java b/src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java
index 5ab9207..2943848 100644
--- a/src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java
+++ b/src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java
@@ -14,91 +14,91 @@ public final class LineTest {
     public void testDoesIntersectOtherLine() {
         Line a = Geometries.line(-1, 0, 1, 0);
         Line b = Geometries.line(0, -1, 0, 1);
-        assertTrue(a.intersects(b));
+        assertTrue(Intersects.lineIntersectsLine.call(a, b));
     }
 
     @Test
     public void testDoesNotIntersectLine() {
         Line a = Geometries.line(-1, 0, 1, 0);
         Line b = Geometries.line(1.1, -1, 1.1, 1);
-        assertFalse(a.intersects(b));
+        assertFalse(Intersects.lineIntersectsLine.call(a, b));
     }
 
     @Test
     public void testDoesIntersectRectangle() {
         Line a = Geometries.line(-1, 0, 1, 0);
         Rectangle b = Geometries.rectangle(0.2, -0.5, 0.8, 0.5);
-        assertTrue(a.intersects(b));
+        assertTrue(Intersects.lineIntersectsRectangle.call(a, b));
     }
 
     @Test
     public void testDoesNotIntersectRectangle() {
         Line a = Geometries.line(-1, 0, 1, 0);
         Rectangle b = Geometries.rectangle(1.2, -0.5, 1.8, 0.5);
-        assertFalse(a.intersects(b));
+        assertFalse(Intersects.lineIntersectsRectangle.call(a, b));
     }
 
     @Test
     public void testLineIntersectsCircle() {
         Line a = Geometries.line(-1, 0, 1, 0);
         Circle c = Geometries.circle(0, 0.5, 1);
-        assertTrue(a.intersects(c));
+        assertTrue(Intersects.lineIntersectsCircle.call(a, c));
     }
 
     @Test
     public void testLineDoesNotIntersectCircle() {
         Line a = Geometries.line(-1, 0, 1, 0);
         Circle c = Geometries.circle(0, 0.5, 0.4);
-        assertFalse(a.intersects(c));
+        assertFalse(Intersects.lineIntersectsCircle.call(a, c));
     }
 
     @Test
     public void testLineDoesNotIntersectCircleEast() {
         Line a = Geometries.line(-1, 0, 1, 0);
         Circle c = Geometries.circle(1.5, 0, 0.4);
-        assertFalse(a.intersects(c));
+        assertFalse(Intersects.lineIntersectsCircle.call(a, c));
     }
 
     @Test
     public void testLineDoesIntersectCircleEast() {
         Line a = Geometries.line(-1, 0, 1, 0);
         Circle c = Geometries.circle(1.5, 0, 0.6);
-        assertTrue(a.intersects(c));
+        assertTrue(Intersects.lineIntersectsCircle.call(a, c));
     }
 
     @Test
     public void testLineDoesNotIntersectCircleWest() {
         Line a = Geometries.line(-1, 0, 1, 0);
         Circle c = Geometries.circle(-1.5, 0, 0.4);
-        assertFalse(a.intersects(c));
+        assertFalse(Intersects.lineIntersectsCircle.call(a, c));
     }
 
     @Test
     public void testLineDoesIntersectCircleWest() {
         Line a = Geometries.line(-1, 0, 1, 0);
         Circle c = Geometries.circle(-1.5, 0, 0.6);
-        assertTrue(a.intersects(c));
+        assertTrue(Intersects.lineIntersectsCircle.call(a, c));
     }
 
     @Test
     public void testLineDoesNotIntersectCircleNorth() {
         Line a = Geometries.line(-1, 0, 1, 0);
         Circle c = Geometries.circle(0, 1.5, 0.4);
-        assertFalse(a.intersects(c));
+        assertFalse(Intersects.lineIntersectsCircle.call(a, c));
     }
 
     @Test
     public void testLineDoesNotIntersectCircleSouth() {
         Line a = Geometries.line(-1, 0, 1, 0);
         Circle c = Geometries.circle(0, 1.5, 0.4);
-        assertFalse(a.intersects(c));
+        assertFalse(Intersects.lineIntersectsCircle.call(a, c));
     }
 
     @Test
     public void testLineDoesIntersectCircleSouth() {
         Line a = Geometries.line(-1, 0, 1, 0);
         Circle c = Geometries.circle(0, 1.5, 0.6);
-        assertFalse(a.intersects(c));
+        assertFalse(Intersects.lineIntersectsCircle.call(a, c));
     }
 
     @Test
@@ -115,21 +115,21 @@ public final class LineTest {
     public void testLineSameXWithinCircle() {
         Line a = Geometries.line(1, 2, 1, 4);
         Circle c = Geometries.circle(1, 3, 2);
-        assertTrue(a.intersects(c));
+        assertTrue(Intersects.lineIntersectsCircle.call(a, c));
     }
 
     @Test
     public void testLineIsPointWithinCircle() {
         Line a = Geometries.line(1, 2, 1, 2);
         Circle c = Geometries.circle(1, 3, 2);
-        assertTrue(a.intersects(c));
+        assertTrue(Intersects.lineIntersectsCircle.call(a, c));
     }
 
     @Test
     public void testLineIsPointOutsideCircle() {
         Line a = Geometries.line(1, 10, 1, 10);
         Circle c = Geometries.circle(1, 3, 2);
-        assertFalse(a.intersects(c));
+        assertFalse(Intersects.lineIntersectsCircle.call(a, c));
     }
 
     @Test
@@ -139,4 +139,46 @@ public final class LineTest {
         assertEquals(Math.sqrt(5), a.distance(r), PRECISION);
     }
 
+    @Test
+    public void testLineDistanceToRectangleIsZeroWhenOneEndIsInside() {
+        Line a = Geometries.line(1, 2, 4, 4);
+        Rectangle r = Geometries.rectangle(3, 3, 7, 7);
+        assertEquals(0, a.distance(r), PRECISION);
+    }
+
+    @Test
+    public void testLineDistanceToRectangleIsZeroWhenOtherEndIsInside() {
+        Line a = Geometries.line(4, 4, 1, 2);
+        Rectangle r = Geometries.rectangle(3, 3, 7, 7);
+        assertEquals(0, a.distance(r), PRECISION);
+    }
+
+    @Test
+    public void testLineDistanceToRectangleIsZeroWhenContainsWestEdge() {
+        Line a = Geometries.line(3, 1, 3, 10);
+        Rectangle r = Geometries.rectangle(3, 3, 7, 7);
+        assertEquals(0, a.distance(r), PRECISION);
+    }
+
+    @Test
+    public void testLineDistanceToRectangleIsZeroWhenContainsNorthEdge() {
+        Line a = Geometries.line(2, 7, 10, 7);
+        Rectangle r = Geometries.rectangle(3, 3, 7, 7);
+        assertEquals(0, a.distance(r), PRECISION);
+    }
+
+    @Test
+    public void testLineDistanceToRectangleIsZeroWhenContainsSouthEdge() {
+        Line a = Geometries.line(2, 3, 10, 3);
+        Rectangle r = Geometries.rectangle(3, 3, 7, 7);
+        assertEquals(0, a.distance(r), PRECISION);
+    }
+
+    @Test
+    public void testLineDistanceToRectangleIsZeroWhenContainsEastEdge() {
+        Line a = Geometries.line(7, 1, 7, 10);
+        Rectangle r = Geometries.rectangle(3, 3, 7, 7);
+        assertEquals(0, a.distance(r), PRECISION);
+    }
+
 }
