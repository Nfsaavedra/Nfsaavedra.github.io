diff --git a/src/main/java/org/mvel2/integration/impl/ClassImportResolverFactory.java b/src/main/java/org/mvel2/integration/impl/ClassImportResolverFactory.java
index 577cd34..dbae4d8 100644
--- a/src/main/java/org/mvel2/integration/impl/ClassImportResolverFactory.java
+++ b/src/main/java/org/mvel2/integration/impl/ClassImportResolverFactory.java
@@ -59,7 +59,7 @@ public class ClassImportResolverFactory extends BaseVariableResolverFactory {
       nextFactory = new MapVariableResolverFactory(new HashMap());
     }
 
-    return nextFactory.createVariable(name, value);
+    return nextFactory.createVariable(name, value, type);
   }
 
   public Class addClass(Class clazz) {
diff --git a/src/main/java/org/mvel2/integration/impl/IndexVariableResolver.java b/src/main/java/org/mvel2/integration/impl/IndexVariableResolver.java
index 7f43990..ce5ee64 100644
--- a/src/main/java/org/mvel2/integration/impl/IndexVariableResolver.java
+++ b/src/main/java/org/mvel2/integration/impl/IndexVariableResolver.java
@@ -2,13 +2,18 @@ package org.mvel2.integration.impl;
 
 import org.mvel2.integration.VariableResolver;
 
+import static org.mvel2.integration.impl.SimpleSTValueResolver.handleTypeCoercion;
+import static org.mvel2.util.ParseTools.isNumeric;
+
 public class IndexVariableResolver implements VariableResolver {
   private int indexPos;
   private Object[] vars;
+  private Class type;
 
   public IndexVariableResolver(int indexPos, Object[] vars) {
     this.indexPos = indexPos;
     this.vars = vars;
+    initializeType(vars[indexPos]);
   }
 
   public String getName() {
@@ -16,10 +21,11 @@ public class IndexVariableResolver implements VariableResolver {
   }
 
   public Class getType() {
-    return null;
+    return type;
   }
 
   public void setStaticType(Class type) {
+      this.type = type;
   }
 
   public int getFlags() {
@@ -31,6 +37,27 @@ public class IndexVariableResolver implements VariableResolver {
   }
 
   public void setValue(Object value) {
-    vars[indexPos] = value;
+    initializeType(value); // Initialize type if not yet done
+
+    if (type == Object.class || type == null) {
+      // IndexVariableResolver doesn't know the original declared type, so cannot deal with polymorphism
+      // Just accept the value
+      vars[indexPos] = value;
+    } else {
+      // Coerce numeric types
+      vars[indexPos] = handleTypeCoercion(type, value);
+    }
+  }
+
+  private void initializeType(Object value) {
+    if (type == null && value != null) {
+      if (isNumeric(value)) {
+        // Use type only when numeric
+        type = value.getClass();
+      } else {
+        // Otherwise, accept any type
+        type = Object.class;
+      }
+    }
   }
 }
diff --git a/src/main/java/org/mvel2/integration/impl/IndexedVariableResolverFactory.java b/src/main/java/org/mvel2/integration/impl/IndexedVariableResolverFactory.java
index f6fb84f..7524306 100644
--- a/src/main/java/org/mvel2/integration/impl/IndexedVariableResolverFactory.java
+++ b/src/main/java/org/mvel2/integration/impl/IndexedVariableResolverFactory.java
@@ -75,6 +75,9 @@ public class IndexedVariableResolverFactory extends BaseVariableResolverFactory 
   public VariableResolver createVariable(String name, Object value, Class<?> type) {
     VariableResolver vr = getResolver(name);
     if (vr != null) {
+      if (vr instanceof SimpleSTValueResolver) {
+          ((SimpleSTValueResolver) vr).setStaticType(type);
+      }
       vr.setValue(value);
     }
     return vr;
diff --git a/src/main/java/org/mvel2/integration/impl/SimpleSTValueResolver.java b/src/main/java/org/mvel2/integration/impl/SimpleSTValueResolver.java
index 043b23d..bc9e020 100644
--- a/src/main/java/org/mvel2/integration/impl/SimpleSTValueResolver.java
+++ b/src/main/java/org/mvel2/integration/impl/SimpleSTValueResolver.java
@@ -64,7 +64,7 @@ public class SimpleSTValueResolver implements VariableResolver {
     this.value = handleTypeCoercion(type, value);
   }
 
-  private static Object handleTypeCoercion(Class type, Object value) {
+  public static Object handleTypeCoercion(Class type, Object value) {
     if (type != null && value != null && value.getClass() != type) {
       if (!canConvert(type, value.getClass())) {
         throw new RuntimeException("cannot assign " + value.getClass().getName() + " to type: "
diff --git a/src/main/java/org/mvel2/util/SimpleVariableSpaceModel.java b/src/main/java/org/mvel2/util/SimpleVariableSpaceModel.java
index f3304ae..51bc2b4 100644
--- a/src/main/java/org/mvel2/util/SimpleVariableSpaceModel.java
+++ b/src/main/java/org/mvel2/util/SimpleVariableSpaceModel.java
@@ -4,7 +4,7 @@ import org.mvel2.integration.VariableResolver;
 import org.mvel2.integration.VariableResolverFactory;
 import org.mvel2.integration.impl.IndexVariableResolver;
 import org.mvel2.integration.impl.IndexedVariableResolverFactory;
-import org.mvel2.integration.impl.SimpleValueResolver;
+import org.mvel2.integration.impl.SimpleSTValueResolver;
 
 /**
  * @author Mike Brock .
@@ -18,7 +18,7 @@ public class SimpleVariableSpaceModel extends VariableSpaceModel {
     VariableResolver[] resolvers = new VariableResolver[allVars.length];
     for (int i = 0; i < resolvers.length; i++) {
       if (i >= vals.length) {
-        resolvers[i] = new SimpleValueResolver(null);
+        resolvers[i] = new SimpleSTValueResolver(null, null);
       }
       else {
         resolvers[i] = new IndexVariableResolver(i, vals);
