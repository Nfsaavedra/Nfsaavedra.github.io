diff --git a/src/test/java/ch/jalu/configme/configurationdata/CommentsConfigurationTest.java b/src/test/java/ch/jalu/configme/configurationdata/CommentsConfigurationTest.java
index c3c30b3..7afed0a 100644
--- a/src/test/java/ch/jalu/configme/configurationdata/CommentsConfigurationTest.java
+++ b/src/test/java/ch/jalu/configme/configurationdata/CommentsConfigurationTest.java
@@ -11,6 +11,7 @@ import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.contains;
 import static org.hamcrest.Matchers.containsInAnyOrder;
 import static org.hamcrest.Matchers.equalTo;
+import static org.junit.jupiter.api.Assertions.assertThrows;
 
 /**
  * Test for {@link CommentsConfiguration}.
@@ -18,6 +19,22 @@ import static org.hamcrest.Matchers.equalTo;
 class CommentsConfigurationTest {
 
     @Test
+    void shouldThrowForExistingPath() {
+        // given
+        final String path = "config.me"; 
+        CommentsConfiguration conf = new CommentsConfiguration();
+        conf.setComment(path, "Old", "Comments", "1", "2", "3");
+        
+        // when
+        IllegalStateException ex = assertThrows(IllegalStateException.class, () -> conf.setComment(path, "New Comment"));
+
+        // then
+        assertThat(ex.getMessage(), equalTo("Comment lines already exists for the path 'config.me'"));
+        assertThat(conf.getAllComments().keySet(), contains(path));
+        assertThat(conf.getAllComments().get(path), contains("New Comment"));
+    }
+
+    @Test
     void shouldOverrideExistingComment() {
         // given
         CommentsConfiguration conf = new CommentsConfiguration();
@@ -25,9 +42,11 @@ class CommentsConfigurationTest {
         conf.setComment("other.path", "Some other", "path I am", "adding");
 
         // when
-        conf.setComment("com.acme", "Acme new comment", "1, 2, 3");
+        IllegalStateException ex = assertThrows(IllegalStateException.class, ()-> conf.setComment("com.acme", "Acme new comment", "1, 2, 3"));
 
         // then
+        assertThat(ex.getMessage(), equalTo("Comment lines already exists for the path 'com.acme'"));
+
         Map<String, List<String>> allComments = conf.getAllComments();
         assertThat(allComments.keySet(), containsInAnyOrder("com.acme", "other.path"));
         assertThat(allComments.get("com.acme"), contains("Acme new comment", "1, 2, 3"));
