diff --git a/libraries/list/list.ndbx b/libraries/list/list.ndbx
index 67ee32e..981b688 100644
--- a/libraries/list/list.ndbx
+++ b/libraries/list/list.ndbx
@@ -21,10 +21,10 @@
             <port name="list" range="list" type="list" widget="none" description="The input list."/>
             <port name="booleans" range="list" type="list" widget="none" description="A list of boolean values. If the corresponding value is true, the item will be retained."/>
         </node>
-        <node description="Take the first item of the list." function="list/first" image="first.png" name="first" outputType="list" position="1.00,4.00" category="list">
+        <node description="Take the first item of the list." function="list/first" image="first.png" name="first" outputType="data" position="1.00,4.00" category="list">
             <port name="list" range="list" type="list" widget="none" description="The input list."/>
         </node>
-        <node description="Take the last item of the list." function="list/last" image="last.png" name="last" outputType="list" position="1.00,7.00" category="list">
+        <node description="Take the last item of the list." function="list/last" image="last.png" name="last" outputType="data" position="1.00,7.00" category="list">
             <port name="list" range="list" type="list" widget="none" description="The input list."/>
         </node>
         <node description="Pick items from the list in random order." function="list/pick" image="generic.png" name="pick" outputRange="list" outputType="list" position="7.00,3.00" category="list">
@@ -43,7 +43,7 @@
         <node description="Reverse the list." function="list/reverse" image="generic.png" name="reverse" outputRange="list" outputType="list" position="4.00,5.00" category="list">
             <port name="list" range="list" type="list" widget="none" description="The input list."/>
         </node>
-        <node description="Take the second item of the list." function="list/second" image="second.png" name="second" outputType="list" position="1.00,5.00" category="list">
+        <node description="Take the second item of the list." function="list/second" image="second.png" name="second" outputType="data" position="1.00,5.00" category="list">
             <port name="list" range="list" type="list" widget="none" description="The input list."/>
         </node>
         <node description="Move items at the beginning of the list to the end." function="list/shift" image="generic.png" name="shift" outputRange="list" outputType="list" position="7.00,4.00" category="list">
diff --git a/src/main/java/nodebox/function/ListFunctions.java b/src/main/java/nodebox/function/ListFunctions.java
index bd40799..02d98f4 100644
--- a/src/main/java/nodebox/function/ListFunctions.java
+++ b/src/main/java/nodebox/function/ListFunctions.java
@@ -52,33 +52,33 @@ public class ListFunctions {
      * Take the first item of the list.
      *
      * @param iterable The list items.
-     * @return A new list with only the first item.
+     * @return The first item of the list.
      */
-    public static List<?> first(Iterable<?> iterable) {
-        if (iterable == null) return ImmutableList.of();
+    public static Object first(Iterable<?> iterable) {
+        if (iterable == null) return null;
         Iterator iterator = iterable.iterator();
         if (iterator.hasNext()) {
-            return ImmutableList.of(iterator.next());
+            return iterator.next();
         }
-        return ImmutableList.of();
+        return null;
     }
 
     /**
      * Take the second item of the list.
      *
      * @param iterable The list items.
-     * @return A new list with only the second item.
+     * @return The second item of the list.
      */
-    public static List<?> second(Iterable<?> iterable) {
-        if (iterable == null) return ImmutableList.of();
+    public static Object second(Iterable<?> iterable) {
+        if (iterable == null) return null;
         Iterator iterator = iterable.iterator();
         if (iterator.hasNext()) {
             iterator.next();
             if (iterator.hasNext()) {
-                return ImmutableList.of(iterator.next());
+                return iterator.next();
             }
         }
-        return ImmutableList.of();
+        return null;
     }
 
     /**
@@ -97,14 +97,14 @@ public class ListFunctions {
      * Take the last item of the list.
      *
      * @param iterable The list items.
-     * @return A new list with only the last item.
+     * @return The last item of the list.
      */
-    public static List<?> last(Iterable<?> iterable) {
-        if (iterable == null) return ImmutableList.of();
+    public static Object last(Iterable<?> iterable) {
+        if (iterable == null) return null;
         try {
-            return ImmutableList.of(Iterables.getLast(iterable));
+            return Iterables.getLast(iterable);
         } catch (NoSuchElementException e) {
-            return ImmutableList.of();
+            return null;
         }
     }
 
