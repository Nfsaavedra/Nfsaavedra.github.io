diff --git a/src/main/java/com/behl/cerberus/controller/UserController.java b/src/main/java/com/behl/cerberus/controller/UserController.java
index c37c8a9..ed1061a 100644
--- a/src/main/java/com/behl/cerberus/controller/UserController.java
+++ b/src/main/java/com/behl/cerberus/controller/UserController.java
@@ -4,6 +4,7 @@ import org.springframework.http.HttpStatus;
 import org.springframework.http.MediaType;
 import org.springframework.http.ResponseEntity;
 import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.web.bind.annotation.DeleteMapping;
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.PatchMapping;
 import org.springframework.web.bind.annotation.PostMapping;
@@ -60,5 +61,15 @@ public class UserController {
 		final var userDetail = userService.getById(userId);
 		return ResponseEntity.ok(userDetail);
 	}
+	
+	@DeleteMapping(value = "/deactivate")
+	@Operation(summary = "Deactivates current logged-in user's profile", description = "Deactivates user's profile: can only be undone by praying to a higher power or contacting our vanished customer support.")
+	@ApiResponse(responseCode = "204", description = "User profile successfully deactivated")
+	@PreAuthorize("hasAnyAuthority('userprofile.update', 'fullaccess')")
+	public ResponseEntity<HttpStatus> deactivateUser(){
+		final var userId = authenticatedUserIdProvider.getUserId();
+		userService.deactivate(userId);
+		return ResponseEntity.noContent().build();
+	}
 
 }
diff --git a/src/main/java/com/behl/cerberus/entity/UserStatus.java b/src/main/java/com/behl/cerberus/entity/UserStatus.java
index 19add1a..f867ff1 100644
--- a/src/main/java/com/behl/cerberus/entity/UserStatus.java
+++ b/src/main/java/com/behl/cerberus/entity/UserStatus.java
@@ -10,7 +10,8 @@ import lombok.RequiredArgsConstructor;
 public enum UserStatus {
 	
 	PENDING_APPROVAL("Pending Approval", List.of("userprofile.read", "userprofile.update", "useridentity.verify")),
-	APPROVED("Approved", List.of("fullaccess"));
+	APPROVED("Approved", List.of("fullaccess")),
+	DEACTIVATED("Deactivated", List.of("userprofile.read"));
 	
 	private final String value;
 	private final List<String> scopes;
diff --git a/src/main/java/com/behl/cerberus/exception/TokenVerificationException.java b/src/main/java/com/behl/cerberus/exception/TokenVerificationException.java
index 9e2ad2c..d280bc3 100644
--- a/src/main/java/com/behl/cerberus/exception/TokenVerificationException.java
+++ b/src/main/java/com/behl/cerberus/exception/TokenVerificationException.java
@@ -7,7 +7,7 @@ public class TokenVerificationException extends ResponseStatusException {
 	
 	private static final long serialVersionUID = 7439642984069939024L;
 	
-	private static final String DEFAULT_MESSAGE = "Authentication failure: Token missing, invalid, or expired";
+	private static final String DEFAULT_MESSAGE = "Authentication failure: Token missing, invalid, revoked or expired";
 
 	public TokenVerificationException() {
 		super(HttpStatus.UNAUTHORIZED, DEFAULT_MESSAGE);
diff --git a/src/main/java/com/behl/cerberus/filter/JwtAuthenticationFilter.java b/src/main/java/com/behl/cerberus/filter/JwtAuthenticationFilter.java
index 39e8d75..2bd5ae8 100644
--- a/src/main/java/com/behl/cerberus/filter/JwtAuthenticationFilter.java
+++ b/src/main/java/com/behl/cerberus/filter/JwtAuthenticationFilter.java
@@ -15,6 +15,8 @@ import org.springframework.util.AntPathMatcher;
 import org.springframework.web.filter.OncePerRequestFilter;
 
 import com.behl.cerberus.configuration.ApiPathExclusionConfigurationProperties;
+import com.behl.cerberus.exception.TokenVerificationException;
+import com.behl.cerberus.service.TokenRevocationService;
 import com.behl.cerberus.utility.JwtUtility;
 
 import io.swagger.v3.oas.models.PathItem.HttpMethod;
@@ -30,6 +32,7 @@ import lombok.SneakyThrows;
 public class JwtAuthenticationFilter extends OncePerRequestFilter {
 
 	private final JwtUtility jwtUtils;
+	private final TokenRevocationService tokenRevocationService; 
 	private final ApiPathExclusionConfigurationProperties apiPathExclusionConfigurationProperties;
 	
 	private static final String AUTHORIZATION_HEADER = "Authorization";
@@ -46,6 +49,11 @@ public class JwtAuthenticationFilter extends OncePerRequestFilter {
 			if (StringUtils.isNotEmpty(authorizationHeader)) {
 				if (authorizationHeader.startsWith(BEARER_PREFIX)) {
 					final var token = authorizationHeader.replace(BEARER_PREFIX, StringUtils.EMPTY);
+					final var isTokenRevoked = tokenRevocationService.isRevoked(token);
+					if (Boolean.TRUE.equals(isTokenRevoked)) {
+						throw new TokenVerificationException();
+					}
+					
 					final var userId = jwtUtils.extractUserId(token);
 					final var isTokenValid = jwtUtils.validateToken(token, userId);
 					final var authorities = jwtUtils.getAuthority(token);
diff --git a/src/main/java/com/behl/cerberus/service/TokenRevocationService.java b/src/main/java/com/behl/cerberus/service/TokenRevocationService.java
new file mode 100644
index 0000000..4e1bd72
diff --git a/src/main/java/com/behl/cerberus/service/TokenRevocationService.java b/src/main/java/com/behl/cerberus/service/TokenRevocationService.java
new file mode 100644
index 0000000..4e1bd72
--- a/src/main/java/com/behl/cerberus/service/TokenRevocationService.java
+++ b/src/main/java/com/behl/cerberus/service/TokenRevocationService.java
@@ -0,0 +1,34 @@
+package com.behl.cerberus.service;
+
+import java.util.Optional;
+
+import org.springframework.stereotype.Service;
+
+import com.behl.cerberus.utility.CacheManager;
+import com.behl.cerberus.utility.JwtUtility;
+
+import jakarta.servlet.http.HttpServletRequest;
+import lombok.NonNull;
+import lombok.RequiredArgsConstructor;
+
+@Service
+@RequiredArgsConstructor
+public class TokenRevocationService {
+
+	private final JwtUtility jwtUtility;
+	private final CacheManager cacheManager;
+	private final HttpServletRequest httpServletRequest;
+
+	public void revoke() {
+		final var authHeader = Optional.ofNullable(httpServletRequest.getHeader("Authorization")).orElseThrow(IllegalStateException::new);
+		final var jti = jwtUtility.getJti(authHeader);
+		final var ttl = jwtUtility.getTimeUntilExpiration(authHeader);
+		cacheManager.save(jti, ttl);
+	}
+
+	public boolean isRevoked(@NonNull final String authHeader) {
+		final var jti = jwtUtility.getJti(authHeader);
+		return cacheManager.fetch(jti, String.class).isPresent();
+	}
+
+}
diff --git a/src/main/java/com/behl/cerberus/service/UserService.java b/src/main/java/com/behl/cerberus/service/UserService.java
index cb9746d..1f0f226 100644
--- a/src/main/java/com/behl/cerberus/service/UserService.java
+++ b/src/main/java/com/behl/cerberus/service/UserService.java
@@ -11,6 +11,7 @@ import com.behl.cerberus.dto.UserCreationRequestDto;
 import com.behl.cerberus.dto.UserDetailDto;
 import com.behl.cerberus.dto.UserUpdationRequestDto;
 import com.behl.cerberus.entity.User;
+import com.behl.cerberus.entity.UserStatus;
 import com.behl.cerberus.exception.AccountAlreadyExistsException;
 import com.behl.cerberus.repository.UserRepository;
 
@@ -23,6 +24,7 @@ public class UserService {
 
 	private final UserRepository userRepository;
 	private final PasswordEncoder passwordEncoder;
+	private final TokenRevocationService tokenRevocationService;
 
 	public void create(@NonNull final UserCreationRequestDto userCreationRequestDto) {
 		final var emailId = userCreationRequestDto.getEmailId();
@@ -58,6 +60,14 @@ public class UserService {
 				.createdAt(user.getCreatedAt())
 				.build();
 	}
+	
+	public void deactivate(@NonNull final UUID userId) {
+		final var user = getUserById(userId);
+		user.setUserStatus(UserStatus.DEACTIVATED);
+		userRepository.save(user);
+		
+		tokenRevocationService.revoke();
+	}
 
 	private User getUserById(@NonNull final UUID userId) {
 		return userRepository.findById(userId).orElseThrow(IllegalStateException::new);
diff --git a/src/main/java/com/behl/cerberus/utility/CacheManager.java b/src/main/java/com/behl/cerberus/utility/CacheManager.java
index 97453f3..c694c18 100644
--- a/src/main/java/com/behl/cerberus/utility/CacheManager.java
+++ b/src/main/java/com/behl/cerberus/utility/CacheManager.java
@@ -2,6 +2,8 @@ package com.behl.cerberus.utility;
 
 import java.time.Duration;
 import java.util.Optional;
+
+import org.apache.commons.lang3.StringUtils;
 import org.springframework.data.redis.core.RedisTemplate;
 import org.springframework.stereotype.Component;
 import com.fasterxml.jackson.databind.ObjectMapper;
@@ -21,6 +23,11 @@ public class CacheManager {
         redisTemplate.opsForValue().set(key, value, timeToLive);
         log.info("Cached value with key '{}' for {} seconds", key, timeToLive.toSeconds());
     }
+    
+    public void save(@NonNull final String key, @NonNull final Duration timeToLive) {
+        redisTemplate.opsForValue().set(key, StringUtils.EMPTY, timeToLive);
+        log.info("Cached non value key '{}' for {} seconds", key, timeToLive.toSeconds());
+    }
 
     public <T> Optional<T> fetch(@NonNull final String key, @NonNull final Class<T> targetClass) {
         final var value = Optional.ofNullable(redisTemplate.opsForValue().get(key));
diff --git a/src/main/java/com/behl/cerberus/utility/JwtUtility.java b/src/main/java/com/behl/cerberus/utility/JwtUtility.java
index 0079073..8f9aed9 100644
--- a/src/main/java/com/behl/cerberus/utility/JwtUtility.java
+++ b/src/main/java/com/behl/cerberus/utility/JwtUtility.java
@@ -1,5 +1,6 @@
 package com.behl.cerberus.utility;
 
+import java.time.Duration;
 import java.time.LocalDateTime;
 import java.time.ZoneOffset;
 import java.util.Arrays;
@@ -45,7 +46,12 @@ public class JwtUtility {
 		return UUID.fromString(audience);
 	}
 	
+	public String getJti(@NonNull final String token) {
+		return extractClaim(token, Claims::getId);
+	}
+	
 	public String generateAccessToken(final User user) {
+		final var jti = String.valueOf(UUID.randomUUID());
 		final var accessTokenValidity = jwtConfigurationProperties.getJwt().getAccessToken().getValidity();
 		final var expiration = TimeUnit.MINUTES.toMillis(accessTokenValidity);
 		final var secretKey = jwtConfigurationProperties.getJwt().getSecretKey();
@@ -58,6 +64,7 @@ public class JwtUtility {
 		
 		return Jwts.builder()
 				.setClaims(claims)
+				.setId(jti)
 				.setIssuer(issuer)
 				.setIssuedAt(currentTimestamp)
 				.setExpiration(expirationTimestamp)
@@ -86,6 +93,12 @@ public class JwtUtility {
 		final var expiration = extractClaim(token, Claims::getExpiration);
 		return expiration.toInstant().atZone(ZoneOffset.UTC).toLocalDateTime();
 	}
+	
+	public Duration getTimeUntilExpiration(@NonNull final String token) {
+	    final var expirationTimestamp = extractClaim(token, Claims::getExpiration).toInstant();
+	    final var currentTimestamp = new Date().toInstant();
+	    return Duration.between(currentTimestamp, expirationTimestamp);
+	}
 
 	private <T> T extractClaim(final String token, final Function<Claims, T> claimsResolver) {
 		final var secretKey = jwtConfigurationProperties.getJwt().getSecretKey();
