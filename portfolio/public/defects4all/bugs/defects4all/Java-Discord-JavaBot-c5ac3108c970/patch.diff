diff --git a/src/main/java/net/javadiscord/javabot/systems/user_commands/format_code/FormatAndIndentCodeMessageContext.java b/src/main/java/net/javadiscord/javabot/systems/user_commands/format_code/FormatAndIndentCodeMessageContext.java
new file mode 100644
index 0000000..e844a36
diff --git a/src/main/java/net/javadiscord/javabot/systems/user_commands/format_code/FormatAndIndentCodeMessageContext.java b/src/main/java/net/javadiscord/javabot/systems/user_commands/format_code/FormatAndIndentCodeMessageContext.java
new file mode 100644
index 0000000..e844a36
--- a/src/main/java/net/javadiscord/javabot/systems/user_commands/format_code/FormatAndIndentCodeMessageContext.java
+++ b/src/main/java/net/javadiscord/javabot/systems/user_commands/format_code/FormatAndIndentCodeMessageContext.java
@@ -0,0 +1,33 @@
+package net.javadiscord.javabot.systems.user_commands.format_code;
+
+
+import net.dv8tion.jda.api.events.interaction.command.MessageContextInteractionEvent;
+import net.dv8tion.jda.api.interactions.commands.build.Commands;
+import net.javadiscord.javabot.util.IndentationHelper;
+import net.javadiscord.javabot.util.StringUtils;
+import org.jetbrains.annotations.NotNull;
+import xyz.dynxsty.dih4jda.interactions.commands.application.ContextCommand;
+
+import java.util.List;
+
+/**
+ * <h3>This class represents the "Format and Indent Code" Message Context command.</h3>
+ */
+public class FormatAndIndentCodeMessageContext extends ContextCommand.Message {
+	/**
+	 * The constructor of this class, which sets the corresponding {@link net.dv8tion.jda.api.interactions.commands.build.CommandData}.
+	 */
+	public FormatAndIndentCodeMessageContext() {
+		setCommandData(Commands.message("Format and Indent Code")
+				.setGuildOnly(true)
+		);
+	}
+
+	@Override
+	public void execute(@NotNull MessageContextInteractionEvent event) {
+		event.replyFormat("```java\n%s\n```", IndentationHelper.formatIndentation(StringUtils.standardSanitizer().compute(event.getTarget().getContentRaw()), IndentationHelper.IndentationType.TABS))
+				.setAllowedMentions(List.of())
+				.setComponents(FormatCodeCommand.buildActionRow(event.getTarget()))
+				.queue();
+	}
+}
diff --git a/src/main/java/net/javadiscord/javabot/systems/user_commands/format_code/FormatCodeCommand.java b/src/main/java/net/javadiscord/javabot/systems/user_commands/format_code/FormatCodeCommand.java
index 56338ef..f71d4c4 100644
--- a/src/main/java/net/javadiscord/javabot/systems/user_commands/format_code/FormatCodeCommand.java
+++ b/src/main/java/net/javadiscord/javabot/systems/user_commands/format_code/FormatCodeCommand.java
@@ -47,7 +47,7 @@ public class FormatCodeCommand extends SlashCommand {
 								.addChoice("Swift", "swift")
 								.addChoice("TypeScript", "typescript")
 								.addChoice("XML", "xml"),
-						new OptionData(OptionType.STRING,"auto-indent","The type of indentation that should be applied to the message, does not automatically indent if left blank",false)
+						new OptionData(OptionType.STRING,"auto-indent","The type of indentation applied to the message, does not automatically indent if left blank.",false)
 								.addChoice("Four_Spaces","four")
 								.addChoice("Two_Spaces","two")
 								.addChoice("Tabs","tab")
diff --git a/src/main/java/net/javadiscord/javabot/util/IndentationHelper.java b/src/main/java/net/javadiscord/javabot/util/IndentationHelper.java
index 0457c63..a8c79bc 100644
--- a/src/main/java/net/javadiscord/javabot/util/IndentationHelper.java
+++ b/src/main/java/net/javadiscord/javabot/util/IndentationHelper.java
@@ -116,7 +116,7 @@ public class IndentationHelper {
 		IndentationState currentState = IndentationState.CODE;
 		for (int i = 0; i < text.length(); i++) {
 			char current = text.charAt(i);
-			if (startOfLine && current == ' ') {
+			if (startOfLine && Character.isWhitespace(current) && current != '\n') {
 				continue;
 			}
 			builder.append(current);
@@ -125,8 +125,11 @@ public class IndentationHelper {
 				startOfLine = true;
 			}
 			currentState = switch (currentState) {
-				case CODE ->
-					processTokenInCode(i, current);
+				case CODE -> {
+					IndentationState state = processTokenInCode(i,current);
+					i += state == IndentationState.MULTI_LINE_COMMENT ? 1:0;
+					yield state;
+				}
 				case STRING -> {
 					if (current == '\"' && !isEscaped(builder, builder.length() - 1)) {
 						yield IndentationState.CODE;
@@ -175,6 +178,7 @@ public class IndentationHelper {
 					if (text.charAt(i + 1) == '/') {
 						return IndentationState.SINGLE_LINE_COMMENT;
 					} else if (text.charAt(i + 1) == '*') {
+						builder.append(text.charAt(++i));
 						return IndentationState.MULTI_LINE_COMMENT;
 					}
 				}
