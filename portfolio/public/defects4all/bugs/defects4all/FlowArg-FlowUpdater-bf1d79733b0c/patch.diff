diff --git a/build.gradle b/build.gradle
index 5f7f06f..47dbf12 100644
--- a/build.gradle
+++ b/build.gradle
@@ -4,7 +4,7 @@ apply plugin: 'maven-publish'
 apply plugin: 'signing'
 
 group 'fr.flowarg'
-version '1.7.1'
+version '1.7.2'
 archivesBaseName = "flowupdater"
 
 java {
diff --git a/src/main/java/fr/flowarg/flowupdater/FlowUpdater.java b/src/main/java/fr/flowarg/flowupdater/FlowUpdater.java
index 93a6ad4..9e2e2db 100644
--- a/src/main/java/fr/flowarg/flowupdater/FlowUpdater.java
+++ b/src/main/java/fr/flowarg/flowupdater/FlowUpdater.java
@@ -99,7 +99,7 @@ public class FlowUpdater
         this.integrationManager = new IntegrationManager(this);
         this.logger.info(String.format(
                 "------------------------- FlowUpdater for Minecraft %s v%s -------------------------",
-                this.vanillaVersion.getName(), "1.7.1"));
+                this.vanillaVersion.getName(), "1.7.2"));
         this.callback.init(this.logger);
     }
 
diff --git a/src/main/java/fr/flowarg/flowupdater/download/VanillaDownloader.java b/src/main/java/fr/flowarg/flowupdater/download/VanillaDownloader.java
index f0ee21a..a684ff9 100644
--- a/src/main/java/fr/flowarg/flowupdater/download/VanillaDownloader.java
+++ b/src/main/java/fr/flowarg/flowupdater/download/VanillaDownloader.java
@@ -100,7 +100,7 @@ public class VanillaDownloader
     {
         final Path vanillaJsonTarget = this.dir.resolve(this.vanillaJsonURL.substring(this.vanillaJsonURL.lastIndexOf('/') + 1));
         final String vanillaJsonResourceName = this.vanillaJsonURL.substring(this.vanillaJsonURL.lastIndexOf('/'));
-        final String vanillaJsonPathUrl = StringUtils.empty(this.vanillaJsonURL, "https://launchermeta.mojang.com/v1/packages/");
+        final String vanillaJsonPathUrl = StringUtils.empty(StringUtils.empty(this.vanillaJsonURL, "https://launchermeta.mojang.com/v1/packages/"), "https://piston-meta.mojang.com/v1/packages/");
 
         if(Files.notExists(vanillaJsonTarget) || !FileUtils.getSHA1(vanillaJsonTarget)
                 .equals(StringUtils.empty(vanillaJsonPathUrl, vanillaJsonResourceName)))
diff --git a/src/main/java/fr/flowarg/flowupdater/integrations/curseforgeintegration/CurseForgeIntegration.java b/src/main/java/fr/flowarg/flowupdater/integrations/curseforgeintegration/CurseForgeIntegration.java
index 98eea07..cb60e2c 100644
--- a/src/main/java/fr/flowarg/flowupdater/integrations/curseforgeintegration/CurseForgeIntegration.java
+++ b/src/main/java/fr/flowarg/flowupdater/integrations/curseforgeintegration/CurseForgeIntegration.java
@@ -11,7 +11,6 @@ import fr.flowarg.flowupdater.integrations.Integration;
 import fr.flowarg.flowupdater.utils.IOUtils;
 import org.jetbrains.annotations.Contract;
 import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
 
 import javax.net.ssl.HttpsURLConnection;
 import java.io.BufferedOutputStream;
@@ -53,11 +52,7 @@ public class CurseForgeIntegration extends Integration
     {
         try
         {
-            final Mod result = this.parseModFile(this.fetchModLink(curseFileInfo));
-            if(result != null )
-                return result;
-
-            throw new CurseForgeException(String.format("Failed to fetch mod project id: %d file id: %d", curseFileInfo.getProjectID(), curseFileInfo.getFileID()));
+            return this.parseModFile(this.fetchModLink(curseFileInfo));
         } catch (Exception e)
         {
             throw new CurseForgeException(String.format("Failed to fetch mod project id: %d file id: %d", curseFileInfo.getProjectID(), curseFileInfo.getFileID()), e);
@@ -66,29 +61,10 @@ public class CurseForgeIntegration extends Integration
 
     public static class CurseForgeException extends Exception
     {
-        public CurseForgeException()
-        {
-        }
-
-        public CurseForgeException(String message)
-        {
-            super(message);
-        }
-
         public CurseForgeException(String message, Throwable cause)
         {
             super(message, cause);
         }
-
-        public CurseForgeException(Throwable cause)
-        {
-            super(cause);
-        }
-
-        public CurseForgeException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace)
-        {
-            super(message, cause, enableSuppression, writableStackTrace);
-        }
     }
 
     public String fetchModLink(@NotNull CurseFileInfo curseFileInfo)
@@ -102,7 +78,6 @@ public class CurseForgeIntegration extends Integration
 
     /**
      * Make a request to the CurseForge API.
-     *
      * Oh my god, fuck Java 8 HTTP API, it's so fucking bad. Hope we drop Java 8 as soon as possible.
      *
      * @param url the url to request.
@@ -143,20 +118,21 @@ public class CurseForgeIntegration extends Integration
     /**
      * Parse the CurseForge API to retrieve the mod file.
      */
-    private @Nullable Mod parseModFile(String jsonResponse) throws Exception
+    private @NotNull Mod parseModFile(String jsonResponse)
     {
         final JsonObject data = JsonParser.parseString(jsonResponse).getAsJsonObject().getAsJsonObject("data");
         final String fileName = data.get("fileName").getAsString();
         final JsonElement downloadURLElement = data.get("downloadUrl");
+        String downloadURL;
 
         if(downloadURLElement instanceof JsonNull)
         {
-            logger.debug("Mod not available: " + jsonResponse);
+            logger.warn(String.format("Mod file %s not available. The download can fail because of this! %s", data.get("displayName").getAsString(), jsonResponse));
             this.bad++;
-            return null;
+            final String id = Integer.toString(data.get("id").getAsInt());
+            downloadURL = String.format("https://mediafiles.forgecdn.net/files/%s/%s/%s", id.substring(0, 4), id.substring(4), fileName);
         }
-
-        final String downloadURL = downloadURLElement.getAsString();
+        else downloadURL = downloadURLElement.getAsString();
         final long fileLength = data.get("fileLength").getAsLong();
 
         final AtomicReference<String> sha1 = new AtomicReference<>("");
@@ -182,17 +158,11 @@ public class CurseForgeIntegration extends Integration
         return this.parseMods();
     }
 
-    private @Nullable Path checkForUpdate(@NotNull CurseModPackInfo info) throws Exception
+    private @NotNull Path checkForUpdate(@NotNull CurseModPackInfo info) throws Exception
     {
         final String link = info.getUrl().isEmpty() ? this.fetchModLink(info) : info.getUrl();
         final Mod modPackFile = this.parseModFile(link);
 
-        if(modPackFile == null)
-        {
-            this.logger.err("This mod pack isn't available anymore on CurseForge for 3rd parties.");
-            return null;
-        }
-
         final Path outPath = this.folder.resolve(modPackFile.getName());
         if(Files.notExists(outPath) || (!modPackFile.getSha1().isEmpty() && !FileUtils.getSHA1(outPath).equalsIgnoreCase(modPackFile.getSha1())) || Files.size(outPath) != modPackFile.getSize())
             IOUtils.download(this.logger, new URL(modPackFile.getDownloadURL()), outPath);
diff --git a/src/main/java/fr/flowarg/flowupdater/versions/VanillaVersion.java b/src/main/java/fr/flowarg/flowupdater/versions/VanillaVersion.java
index 674d7d7..4be1191 100644
--- a/src/main/java/fr/flowarg/flowupdater/versions/VanillaVersion.java
+++ b/src/main/java/fr/flowarg/flowupdater/versions/VanillaVersion.java
@@ -110,15 +110,16 @@ public class VanillaVersion
         try
         {
             final JsonObject launcherMeta = IOUtils.readJson(
-                    new URL("https://launchermeta.mojang.com/mc/game/version_manifest.json")
+                    new URL("https://launchermeta.mojang.com/mc/game/version_manifest_v2.json")
                             .openStream())
                     .getAsJsonObject();
 
             if (this.getName().equals("latest"))
             {
+                final JsonObject latest = launcherMeta.getAsJsonObject("latest");
                 if (this.snapshot)
-                    version.set(launcherMeta.getAsJsonObject("latest").get("snapshot").getAsString());
-                else version.set(launcherMeta.getAsJsonObject("latest").get("release").getAsString());
+                    version.set(latest.get("snapshot").getAsString());
+                else version.set(latest.get("release").getAsString());
             }
 
             launcherMeta.getAsJsonArray("versions").forEach(jsonElement ->
