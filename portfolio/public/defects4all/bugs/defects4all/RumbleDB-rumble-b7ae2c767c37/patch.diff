diff --git a/src/main/java/sparksoniq/jsoniq/compiler/translator/expr/flowr/FlworExpression.java b/src/main/java/sparksoniq/jsoniq/compiler/translator/expr/flowr/FlworExpression.java
index b29b7c7..2025d84 100644
--- a/src/main/java/sparksoniq/jsoniq/compiler/translator/expr/flowr/FlworExpression.java
+++ b/src/main/java/sparksoniq/jsoniq/compiler/translator/expr/flowr/FlworExpression.java
@@ -21,6 +21,7 @@
 package sparksoniq.jsoniq.compiler.translator.expr.flowr;
 
 import sparksoniq.exceptions.SemanticException;
+import sparksoniq.exceptions.SparksoniqRuntimeException;
 import sparksoniq.jsoniq.compiler.translator.expr.Expression;
 import sparksoniq.jsoniq.compiler.translator.expr.ExpressionOrClause;
 import sparksoniq.jsoniq.compiler.translator.metadata.ExpressionMetadata;
@@ -76,9 +77,23 @@ public class FlworExpression extends Expression {
     }
 
     @Override
-    protected void initIsRDD() {
-        this.isRDD = _returnClause.isDataFrame();
-        this.isDataFrame = false;
+    public boolean isRDD() {
+        return this._returnClause.isRDD();
+    }
+
+    @Override
+    public void setIsRDD(boolean isRDD) {
+        throw new SparksoniqRuntimeException("The FLWOR Expression class does not implement this", getMetadata());
+    }
+
+    @Override
+    public boolean isDataFrame() {
+        return this._returnClause.isDataFrame();
+    }
+
+    @Override
+    public void setIsDataFrame(boolean isRDD) {
+        throw new SparksoniqRuntimeException("The FLWOR Expression class does not implement this", getMetadata());
     }
 
     @Override
diff --git a/src/main/java/sparksoniq/jsoniq/compiler/translator/expr/flowr/FlworVarDecl.java b/src/main/java/sparksoniq/jsoniq/compiler/translator/expr/flowr/FlworVarDecl.java
index 0758600..32f8309 100644
--- a/src/main/java/sparksoniq/jsoniq/compiler/translator/expr/flowr/FlworVarDecl.java
+++ b/src/main/java/sparksoniq/jsoniq/compiler/translator/expr/flowr/FlworVarDecl.java
@@ -33,9 +33,15 @@ public abstract class FlworVarDecl extends FlworClause {
 
     protected VariableReference variableReferenceNode;
     protected Expression expression;
+
     // asSequence is null by default if the type of the variable in the for/let/groupBy clause is not specified.
     protected FlworVarSequenceType asSequence;
 
+    // isRDD/isDataFrame status of the declared variable.
+    // Notice that these are different from isRDD/isDataFrame of the expression which converts to iterator
+    protected boolean variableIsRDD;
+    protected boolean variableIsDataFrame;
+
 
     private FlworVarDecl(FLWOR_CLAUSES clauseType, ExpressionMetadata metadata) {
         super(clauseType, metadata);
@@ -76,9 +82,19 @@ public abstract class FlworVarDecl extends FlworClause {
     }
 
     @Override
-    protected void initIsRDD() {
-        this.isRDD = expression.isRDD();
-        this.isDataFrame = expression.isDataFrame();
+    protected abstract void initIsRDD();
+
+    protected void initializeVariableIsRDDIsDataFrame() {
+        this.variableIsRDD = expression.isRDD();
+        this.variableIsDataFrame = expression.isDataFrame();
+    }
+
+    public boolean getVariableIsRDD() {
+        return this.variableIsRDD;
+    }
+
+    public boolean getVariableIsDataFrame() {
+        return this.variableIsDataFrame;
     }
 
     @Override
diff --git a/src/main/java/sparksoniq/jsoniq/compiler/translator/expr/flowr/ForClauseVar.java b/src/main/java/sparksoniq/jsoniq/compiler/translator/expr/flowr/ForClauseVar.java
index 6bb730e..f1cb29d 100644
--- a/src/main/java/sparksoniq/jsoniq/compiler/translator/expr/flowr/ForClauseVar.java
+++ b/src/main/java/sparksoniq/jsoniq/compiler/translator/expr/flowr/ForClauseVar.java
@@ -68,7 +68,8 @@ public class ForClauseVar extends FlworVarDecl {
 
     @Override
     protected void initIsRDD() {
-        this.isDataFrame = (this.expression.isDataFrame() || (previousClause != null && previousClause.isDataFrame()));
+        initializeVariableIsRDDIsDataFrame();
+        this.isDataFrame = (this.expression.isRDD() || (previousClause != null && previousClause.isDataFrame()));
     }
 
     @Override
diff --git a/src/main/java/sparksoniq/jsoniq/compiler/translator/expr/flowr/GroupByClauseVar.java b/src/main/java/sparksoniq/jsoniq/compiler/translator/expr/flowr/GroupByClauseVar.java
index b0cfc90..6dd085c 100644
--- a/src/main/java/sparksoniq/jsoniq/compiler/translator/expr/flowr/GroupByClauseVar.java
+++ b/src/main/java/sparksoniq/jsoniq/compiler/translator/expr/flowr/GroupByClauseVar.java
@@ -47,6 +47,11 @@ public class GroupByClauseVar extends FlworVarDecl {
     }
 
     @Override
+    protected void initIsRDD() {
+        initializeVariableIsRDDIsDataFrame();
+    }
+
+    @Override
     public <T> T accept(AbstractExpressionOrClauseVisitor<T> visitor, T argument) {
         return visitor.visitGroupByClauseVar(this, argument);
     }
diff --git a/src/main/java/sparksoniq/jsoniq/compiler/translator/expr/flowr/LetClauseVar.java b/src/main/java/sparksoniq/jsoniq/compiler/translator/expr/flowr/LetClauseVar.java
index e6a2188..9fb2c2c 100644
--- a/src/main/java/sparksoniq/jsoniq/compiler/translator/expr/flowr/LetClauseVar.java
+++ b/src/main/java/sparksoniq/jsoniq/compiler/translator/expr/flowr/LetClauseVar.java
@@ -39,6 +39,7 @@ public class LetClauseVar extends FlworVarDecl {
 
     @Override
     protected void initIsRDD() {
+        initializeVariableIsRDDIsDataFrame();
         if (this.previousClause == null) {
             this.isDataFrame = false;
         } else {
diff --git a/src/main/java/sparksoniq/semantics/visitor/RuntimeIteratorVisitor.java b/src/main/java/sparksoniq/semantics/visitor/RuntimeIteratorVisitor.java
index 218d437..14bee75 100644
--- a/src/main/java/sparksoniq/semantics/visitor/RuntimeIteratorVisitor.java
+++ b/src/main/java/sparksoniq/semantics/visitor/RuntimeIteratorVisitor.java
@@ -206,8 +206,8 @@ public class RuntimeIteratorVisitor extends AbstractExpressionOrClauseVisitor<Ru
                 ),
                 createIteratorMetadata(expression.get_returnClause())
         );
-        returnIterator.setIsRDD(expression.isRDD());
-        returnIterator.setIsDataFrame(expression.isDataFrame());
+        returnIterator.setIsRDD(expression.get_returnClause().isRDD());
+        returnIterator.setIsDataFrame(expression.get_returnClause().isDataFrame());
         return returnIterator;
     }
 
diff --git a/src/main/java/sparksoniq/semantics/visitor/StaticContextVisitor.java b/src/main/java/sparksoniq/semantics/visitor/StaticContextVisitor.java
index 0610d47..aeaf481 100644
--- a/src/main/java/sparksoniq/semantics/visitor/StaticContextVisitor.java
+++ b/src/main/java/sparksoniq/semantics/visitor/StaticContextVisitor.java
@@ -150,8 +150,8 @@ public class StaticContextVisitor extends AbstractExpressionOrClauseVisitor<Stat
                 expression.getVariableReference().getVariableName(),
                 type,
                 expression.getMetadata(),
-                expression.isRDD(),
-                expression.isDataFrame()
+                expression.getVariableIsRDD(),
+                expression.getVariableIsDataFrame()
         );
         return result;
     }
