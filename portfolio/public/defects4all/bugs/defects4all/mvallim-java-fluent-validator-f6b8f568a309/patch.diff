diff --git a/pom.xml b/pom.xml
index f44d427..f93ee3d 100644
--- a/pom.xml
+++ b/pom.xml
@@ -1,4 +1,6 @@
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
 	<modelVersion>4.0.0</modelVersion>
 
 	<groupId>com.github.mvallim</groupId>
diff --git a/src/main/java/br/com/fluentvalidator/predicate/StringPredicate.java b/src/main/java/br/com/fluentvalidator/predicate/StringPredicate.java
index 81605d6..c313345 100644
--- a/src/main/java/br/com/fluentvalidator/predicate/StringPredicate.java
+++ b/src/main/java/br/com/fluentvalidator/predicate/StringPredicate.java
@@ -12,6 +12,7 @@ import java.time.LocalDateTime;
 import java.time.LocalTime;
 import java.time.format.DateTimeFormatter;
 import java.time.format.DateTimeParseException;
+import java.time.format.ResolverStyle;
 import java.util.Objects;
 import java.util.function.Function;
 import java.util.function.Predicate;
@@ -78,7 +79,7 @@ public final class StringPredicate {
         .and(isDate -> not(stringEmptyOrNull()).test(pattern))
         .and(isDate -> {
           try {
-            final DateTimeFormatter dateFormat = DateTimeFormatter.ofPattern(pattern);
+            final DateTimeFormatter dateFormat = DateTimeFormatter.ofPattern(pattern).withResolverStyle(ResolverStyle.STRICT);
             return Objects.nonNull(LocalDate.parse(isDate, dateFormat));
           } catch (final IllegalArgumentException | DateTimeParseException ex) {
             return false;
@@ -107,7 +108,7 @@ public final class StringPredicate {
         .and(isDateTime -> not(stringEmptyOrNull()).test(pattern))
         .and(isDateTime -> {
           try {
-            final DateTimeFormatter dateFormat = DateTimeFormatter.ofPattern(pattern);
+            final DateTimeFormatter dateFormat = DateTimeFormatter.ofPattern(pattern).withResolverStyle(ResolverStyle.STRICT);
             return Objects.nonNull(LocalDateTime.parse(isDateTime, dateFormat));
           } catch (final IllegalArgumentException | DateTimeParseException ex) {
             return false;
@@ -182,7 +183,7 @@ public final class StringPredicate {
         .and(isTime -> not(stringEmptyOrNull()).test(pattern))
         .and(isTime -> {
           try {
-            final DateTimeFormatter dateFormat = DateTimeFormatter.ofPattern(pattern);
+            final DateTimeFormatter dateFormat = DateTimeFormatter.ofPattern(pattern).withResolverStyle(ResolverStyle.STRICT);
             return Objects.nonNull(LocalTime.parse(isTime, dateFormat));
           } catch (final IllegalArgumentException | DateTimeParseException ex) {
             return false;
