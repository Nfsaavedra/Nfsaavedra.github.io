diff --git a/src/test/java/br/com/fluentvalidator/predicate/StringPredicateTest.java b/src/test/java/br/com/fluentvalidator/predicate/StringPredicateTest.java
index a4b6735..315c98a 100644
--- a/src/test/java/br/com/fluentvalidator/predicate/StringPredicateTest.java
+++ b/src/test/java/br/com/fluentvalidator/predicate/StringPredicateTest.java
@@ -1,8 +1,9 @@
 package br.com.fluentvalidator.predicate;
 
-import static br.com.fluentvalidator.predicate.StringPredicate.*;
+import static br.com.fluentvalidator.predicate.StringPredicate.isAlpha;
 import static br.com.fluentvalidator.predicate.StringPredicate.isAlphaNumeric;
 import static br.com.fluentvalidator.predicate.StringPredicate.isDate;
+import static br.com.fluentvalidator.predicate.StringPredicate.isDateTime;
 import static br.com.fluentvalidator.predicate.StringPredicate.isNumber;
 import static br.com.fluentvalidator.predicate.StringPredicate.isNumeric;
 import static br.com.fluentvalidator.predicate.StringPredicate.isTime;
@@ -34,7 +35,11 @@ public class StringPredicateTest {
 
   @Test
   public void testIsDate() {
-    assertTrue(isDate("dd-MM-yyyy").test("28-02-2019"));
+    assertTrue(isDate("dd-MM-uuuu").test("28-02-2019"));
+    assertTrue(isDate("dd-MM-uuuu").test("29-02-2020"));
+    assertFalse(isDate("dd-MM-yyyy").test("32-02-2020"));
+    assertFalse(isDate("dd-MM-yyyy").test("29-02-2019"));
+    assertFalse(isDate("dd-MM-yyyy").test("31-02-2019"));
     assertFalse(isDate("dd-MM-yyyy").test("28022019"));
     assertFalse(isDate("dd-MM-yyyy").test(null));
     assertFalse(isDate(null).test("28-02-2019"));
@@ -43,11 +48,15 @@ public class StringPredicateTest {
 
   @Test
   public void testObjectIsDate() {
-    assertTrue(isDate(ObjectFrom<String>::getSource, "dd-MM-yyyy").test(new ObjectFrom<>("28-02-2019", null)));
-    assertFalse(isDate(ObjectFrom<String>::getSource, "dd-MM-yyyy").test(new ObjectFrom<>("28022019", null)));
+    assertTrue(isDate(ObjectFrom<String>::getSource, "dd-MM-uuuu")
+        .test(new ObjectFrom<>("28-02-2019", null)));
+    assertFalse(isDate(ObjectFrom<String>::getSource, "dd-MM-yyyy")
+        .test(new ObjectFrom<>("28022019", null)));
     assertFalse(isDate(ObjectFrom<String>::getSource, "dd-MM-yyyy").test(null));
-    assertFalse(isDate(ObjectFrom<String>::getSource, null).test(new ObjectFrom<>("28-02-2019", null)));
-    assertFalse(isDate(ObjectFrom<String>::getSource, "HH-MM-yyyy").test(new ObjectFrom<>("28-02-2019", null)));
+    assertFalse(
+        isDate(ObjectFrom<String>::getSource, null).test(new ObjectFrom<>("28-02-2019", null)));
+    assertFalse(isDate(ObjectFrom<String>::getSource, "HH-MM-yyyy")
+        .test(new ObjectFrom<>("28-02-2019", null)));
   }
 
   @Test
@@ -56,21 +65,25 @@ public class StringPredicateTest {
     assertFalse(isTime("HH:mm:ss").test("235959"));
     assertFalse(isTime("HH:mm:ss").test(null));
     assertFalse(isTime(null).test("23:59:59"));
-    assertFalse(isTime("DD:mm:ss").test("23:59:59"));
+    assertFalse(isTime("çç:mm:ss").test("23:59:59"));
   }
 
   @Test
   public void testObjectIsTime() {
-    assertTrue(isTime(ObjectFrom<String>::getSource, "HH:mm:ss").test(new ObjectFrom<>("23:59:59", null)));
-    assertFalse(isTime(ObjectFrom<String>::getSource, "HH:mm:ss").test(new ObjectFrom<>("235959", null)));
+    assertTrue(
+        isTime(ObjectFrom<String>::getSource, "HH:mm:ss").test(new ObjectFrom<>("23:59:59", null)));
+    assertFalse(
+        isTime(ObjectFrom<String>::getSource, "HH:mm:ss").test(new ObjectFrom<>("235959", null)));
     assertFalse(isTime(ObjectFrom<String>::getSource, "HH:mm:ss").test(null));
-    assertFalse(isTime(ObjectFrom<String>::getSource, null).test(new ObjectFrom<>("23:59:59", null)));
-    assertFalse(isTime(ObjectFrom<String>::getSource, "DD:mm:ss").test(new ObjectFrom<>("23:59:59", null)));
+    assertFalse(
+        isTime(ObjectFrom<String>::getSource, null).test(new ObjectFrom<>("23:59:59", null)));
+    assertFalse(
+        isTime(ObjectFrom<String>::getSource, "çç:mm:ss").test(new ObjectFrom<>("23:59:59", null)));
   }
 
   @Test
   public void testIsDateTime() {
-    assertTrue(isDateTime("dd-MM-yyyy HH:mm:ss").test("28-02-2019 23:59:59"));
+    assertTrue(isDateTime("dd-MM-uuuu HH:mm:ss").test("28-02-2019 23:59:59"));
     assertFalse(isDateTime("dd-MM-yyyy HH:mm:ss").test("28-02-2019 235959"));
     assertFalse(isDateTime("dd-MM-yyyy HH:mm:ss").test(null));
     assertFalse(isDateTime(null).test("23:59:59"));
@@ -79,11 +92,15 @@ public class StringPredicateTest {
 
   @Test
   public void testObjectIsDateTime() {
-    assertTrue(isDateTime(ObjectFrom<String>::getSource, "dd-MM-yyyy HH:mm:ss").test(new ObjectFrom<>("28-02-2019 23:59:59", null)));
-    assertFalse(isDateTime(ObjectFrom<String>::getSource, "dd-MM-yyyy HH:mm:ss").test(new ObjectFrom<>("28-02-2019 235959", null)));
+    assertTrue(isDateTime(ObjectFrom<String>::getSource, "dd-MM-uuuu HH:mm:ss")
+        .test(new ObjectFrom<>("28-02-2019 23:59:59", null)));
+    assertFalse(isDateTime(ObjectFrom<String>::getSource, "dd-MM-yyyy HH:mm:ss")
+        .test(new ObjectFrom<>("28-02-2019 235959", null)));
     assertFalse(isDateTime(ObjectFrom<String>::getSource, "dd-MM-yyyy HH:mm:ss").test(null));
-    assertFalse(isDateTime(ObjectFrom<String>::getSource, null).test(new ObjectFrom<>("28-02-2019 23:59:59", null)));
-    assertFalse(isDateTime(ObjectFrom<String>::getSource, "BB-MM-yyyy HH:mm:ss").test(new ObjectFrom<>("28-02-2019 23:59:59", null)));
+    assertFalse(isDateTime(ObjectFrom<String>::getSource, null)
+        .test(new ObjectFrom<>("28-02-2019 23:59:59", null)));
+    assertFalse(isDateTime(ObjectFrom<String>::getSource, "BB-MM-yyyy HH:mm:ss")
+        .test(new ObjectFrom<>("28-02-2019 23:59:59", null)));
   }
 
   @Test
diff --git a/src/test/java/br/com/fluentvalidator/rule/RuleBuilderPropertyTest.java b/src/test/java/br/com/fluentvalidator/rule/RuleBuilderPropertyTest.java
index 28d44c1..bc6e405 100644
--- a/src/test/java/br/com/fluentvalidator/rule/RuleBuilderPropertyTest.java
+++ b/src/test/java/br/com/fluentvalidator/rule/RuleBuilderPropertyTest.java
@@ -4,6 +4,7 @@ import static br.com.fluentvalidator.predicate.LogicalPredicate.isFalse;
 import static br.com.fluentvalidator.predicate.LogicalPredicate.isTrue;
 import static br.com.fluentvalidator.predicate.LogicalPredicate.not;
 import static br.com.fluentvalidator.predicate.ObjectPredicate.nullValue;
+import static br.com.fluentvalidator.predicate.StringPredicate.stringEmptyOrNull;
 import static br.com.fluentvalidator.predicate.StringPredicate.stringSizeLessThan;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
@@ -12,200 +13,289 @@ import java.util.Collections;
 import org.junit.After;
 import org.junit.Test;
 import br.com.fluentvalidator.AbstractValidator;
+import br.com.fluentvalidator.Validator;
 import br.com.fluentvalidator.context.Error;
 import br.com.fluentvalidator.context.ValidationContext;
+import br.com.fluentvalidator.context.ValidationResult;
 import br.com.fluentvalidator.exception.ValidationSampleException;
 import br.com.fluentvalidator.handler.HandlerInvalidField;
 
 public class RuleBuilderPropertyTest {
 
-    @After
-    public void tearDown() {
-        ValidationContext.remove();
-    }
+  @After
+  public void tearDown() {
+    ValidationContext.remove();
+  }
 
-    @Test
-    public void testFailWhenApplyNullValue() {
+  @Test
+  public void testFailWhenApplyNullValue() {
 
-        final RuleBuilderPropertyImpl<String, String> builder = new RuleBuilderPropertyImpl<>(String::new);
+    final RuleBuilderPropertyImpl<String, String> builder =
+        new RuleBuilderPropertyImpl<>(String::new);
 
-        builder.must(stringSizeLessThan(2)).withMessage("rule 1").critical();
+    builder.must(stringSizeLessThan(2)).withMessage("rule 1").critical();
 
-        assertFalse(builder.apply(null));
-    }
+    assertFalse(builder.apply(null));
+  }
 
-    @Test
-    public void testSuccessValidValue() {
+  @Test
+  public void testSuccessValidValue() {
 
-        final RuleBuilderPropertyImpl<String, String> builder = new RuleBuilderPropertyImpl<>(String::new);
+    final RuleBuilderPropertyImpl<String, String> builder =
+        new RuleBuilderPropertyImpl<>(String::new);
 
-        builder.must(stringSizeLessThan(2)).when(not(nullValue())).withMessage("rule 1");
+    builder.must(stringSizeLessThan(2)).when(not(nullValue())).withMessage("rule 1");
 
-        assertTrue(builder.apply("o"));
-    }
+    assertTrue(builder.apply("o"));
+  }
 
-    @Test
-    public void testSuccessInvalidSingleRuleWithoutCritical() {
+  @Test
+  public void testSuccessInvalidSingleRuleWithoutCritical() {
 
-        final RuleBuilderPropertyImpl<String, String> builder = new RuleBuilderPropertyImpl<>(String::new);
+    final RuleBuilderPropertyImpl<String, String> builder =
+        new RuleBuilderPropertyImpl<>(String::new);
 
-        builder.must(stringSizeLessThan(1)).when(not(nullValue())).withMessage("rule 1");
+    builder.must(stringSizeLessThan(1)).when(not(nullValue())).withMessage("rule 1");
 
-        assertTrue(builder.apply("o"));
-    }
+    assertTrue(builder.apply("o"));
+  }
 
-    @Test
-    public void testSuccessInvalidMultipleRuleWithoutCritical() {
+  @Test
+  public void testSuccessInvalidMultipleRuleWithoutCritical() {
 
-        final RuleBuilderPropertyImpl<String, String> builder = new RuleBuilderPropertyImpl<>(String::new);
+    final RuleBuilderPropertyImpl<String, String> builder =
+        new RuleBuilderPropertyImpl<>(String::new);
 
-        builder.must(stringSizeLessThan(2)).when(not(nullValue())).withMessage("rule 1").must(stringSizeLessThan(2)).when(not(nullValue())).withMessage("rule 2")
-                .must(stringSizeLessThan(1)).when(not(nullValue())).withMessage("rule 3").must(stringSizeLessThan(2)).when(not(nullValue())).withMessage("rule 4");
+    builder.must(stringSizeLessThan(2)).when(not(nullValue())).withMessage("rule 1")
+        .must(stringSizeLessThan(2)).when(not(nullValue())).withMessage("rule 2")
+        .must(stringSizeLessThan(1)).when(not(nullValue())).withMessage("rule 3")
+        .must(stringSizeLessThan(2)).when(not(nullValue())).withMessage("rule 4");
 
-        assertTrue(builder.apply("o"));
-    }
+    assertTrue(builder.apply("o"));
+  }
 
-    @Test
-    public void testSuccessRuleWithCritical() {
+  @Test
+  public void testSuccessRuleWithCritical() {
 
-        final RuleBuilderPropertyImpl<String, String> builder = new RuleBuilderPropertyImpl<>(String::new);
+    final RuleBuilderPropertyImpl<String, String> builder =
+        new RuleBuilderPropertyImpl<>(String::new);
 
-        builder.must(stringSizeLessThan(1)).when(not(nullValue())).withMessage("rule 1").must(stringSizeLessThan(2)).when(not(nullValue())).withMessage("rule 2").critical();
+    builder.must(stringSizeLessThan(1)).when(not(nullValue())).withMessage("rule 1")
+        .must(stringSizeLessThan(2)).when(not(nullValue())).withMessage("rule 2").critical();
 
-        assertTrue(builder.apply("o"));
-    }
+    assertTrue(builder.apply("o"));
+  }
 
-    @Test
-    public void testFailRuleWithCritical() {
+  @Test
+  public void testFailRuleWithCritical() {
 
-        final RuleBuilderPropertyImpl<String, String> builder = new RuleBuilderPropertyImpl<>(String::new);
+    final RuleBuilderPropertyImpl<String, String> builder =
+        new RuleBuilderPropertyImpl<>(String::new);
 
-        builder.must(stringSizeLessThan(1)).when(not(nullValue())).withMessage("rule 1").must(stringSizeLessThan(1)).when(not(nullValue())).withMessage("rule 2").critical();
+    builder.must(stringSizeLessThan(1)).when(not(nullValue())).withMessage("rule 1")
+        .must(stringSizeLessThan(1)).when(not(nullValue())).withMessage("rule 2").critical();
 
-        assertFalse(builder.apply("o"));
-    }
+    assertFalse(builder.apply("o"));
+  }
 
-    @Test
-    public void testSuccessRuleWithCriticalException() {
+  @Test
+  public void testSuccessRuleWithCriticalException() {
 
-        final RuleBuilderPropertyImpl<String, String> builder = new RuleBuilderPropertyImpl<>(String::new);
+    final RuleBuilderPropertyImpl<String, String> builder =
+        new RuleBuilderPropertyImpl<>(String::new);
 
-        builder.must(stringSizeLessThan(1)).when(not(nullValue())).withMessage("rule 1").must(stringSizeLessThan(2)).when(not(nullValue())).withMessage("rule 2")
-                .critical(ValidationSampleException.class);
+    builder.must(stringSizeLessThan(1)).when(not(nullValue())).withMessage("rule 1")
+        .must(stringSizeLessThan(2)).when(not(nullValue())).withMessage("rule 2")
+        .critical(ValidationSampleException.class);
 
-        assertTrue(builder.apply("o"));
-    }
+    assertTrue(builder.apply("o"));
+  }
 
-    @Test(expected = ValidationSampleException.class)
-    public void testFailRuleWithCriticalException() {
+  @Test(expected = ValidationSampleException.class)
+  public void testFailRuleWithCriticalException() {
 
-        final RuleBuilderPropertyImpl<String, String> builder = new RuleBuilderPropertyImpl<>(String::new);
+    final RuleBuilderPropertyImpl<String, String> builder =
+        new RuleBuilderPropertyImpl<>(String::new);
 
-        builder.must(stringSizeLessThan(1)).when(not(nullValue())).withMessage("rule 1").must(stringSizeLessThan(1)).when(not(nullValue())).withMessage("rule 2")
-                .critical(ValidationSampleException.class);
+    builder.must(stringSizeLessThan(1)).when(not(nullValue())).withMessage("rule 1")
+        .must(stringSizeLessThan(1)).when(not(nullValue())).withMessage("rule 2")
+        .critical(ValidationSampleException.class);
 
-        assertFalse(builder.apply("o"));
-    }
+    assertFalse(builder.apply("o"));
+  }
 
-    @Test
-    public void testSuccessRuleValidator() {
+  @Test
+  public void testSuccessRuleValidator() {
 
-        final RuleBuilderPropertyImpl<String, String> builder = new RuleBuilderPropertyImpl<>(String::new);
+    final RuleBuilderPropertyImpl<String, String> builder =
+        new RuleBuilderPropertyImpl<>(String::new);
 
-        builder.whenever(not(nullValue())).withValidator(new ValidatorIdTest());
+    builder.whenever(not(nullValue())).withValidator(new ValidatorIdTest());
 
-        assertTrue(builder.apply(""));
-    }
+    assertTrue(builder.apply(""));
+  }
 
-    @Test
-    public void testFailRuleValidatorWithCritical() {
+  @Test
+  public void testFailRuleValidatorWithCritical() {
 
-        final RuleBuilderPropertyImpl<String, String> builder = new RuleBuilderPropertyImpl<>(String::new);
+    final RuleBuilderPropertyImpl<String, String> builder =
+        new RuleBuilderPropertyImpl<>(String::new);
 
-        builder.whenever(not(nullValue())).withValidator(new ValidatorIdTest()).critical();
+    builder.whenever(not(nullValue())).withValidator(new ValidatorIdTest()).critical();
 
-        assertFalse(builder.apply("oo"));
-    }
+    assertFalse(builder.apply("oo"));
+  }
 
-    @Test(expected = ValidationSampleException.class)
-    public void testFailRuleValidatorWithCriticalException() {
+  @Test(expected = ValidationSampleException.class)
+  public void testFailRuleValidatorWithCriticalException() {
 
-        final RuleBuilderPropertyImpl<String, String> builder = new RuleBuilderPropertyImpl<>(String::new);
+    final RuleBuilderPropertyImpl<String, String> builder =
+        new RuleBuilderPropertyImpl<>(String::new);
 
-        builder.whenever(not(nullValue())).withValidator(new ValidatorIdTest()).critical(ValidationSampleException.class);
+    builder.whenever(not(nullValue())).withValidator(new ValidatorIdTest())
+        .critical(ValidationSampleException.class);
 
-        assertFalse(builder.apply("o"));
-    }
+    assertFalse(builder.apply("o"));
+  }
 
-    @Test
-    public void testFailInvalidMultipleRuleWithCritical() {
+  @Test
+  public void testFailInvalidMultipleRuleWithCritical() {
 
-        final RuleBuilderPropertyImpl<String, String> builder = new RuleBuilderPropertyImpl<>(String::new);
+    final RuleBuilderPropertyImpl<String, String> builder =
+        new RuleBuilderPropertyImpl<>(String::new);
 
-        builder.must(stringSizeLessThan(2)).when(not(nullValue())).withMessage("rule 1").must(stringSizeLessThan(2)).when(not(nullValue())).withMessage("rule 2")
-                .must(stringSizeLessThan(1)).when(not(nullValue())).withMessage("rule 3").critical().must(stringSizeLessThan(2)).when(not(nullValue())).withMessage("rule 4");
+    builder.must(stringSizeLessThan(2)).when(not(nullValue())).withMessage("rule 1")
+        .must(stringSizeLessThan(2)).when(not(nullValue())).withMessage("rule 2")
+        .must(stringSizeLessThan(1)).when(not(nullValue())).withMessage("rule 3").critical()
+        .must(stringSizeLessThan(2)).when(not(nullValue())).withMessage("rule 4");
 
-        assertFalse(builder.apply("o"));
-    }
+    assertFalse(builder.apply("o"));
+  }
 
-    @Test(expected = ValidationSampleException.class)
-    public void testFailInvalidMultipleRuleWithCriticalException() {
+  @Test(expected = ValidationSampleException.class)
+  public void testFailInvalidMultipleRuleWithCriticalException() {
 
-        final RuleBuilderPropertyImpl<String, String> builder = new RuleBuilderPropertyImpl<>(String::new);
+    final RuleBuilderPropertyImpl<String, String> builder =
+        new RuleBuilderPropertyImpl<>(String::new);
 
-        builder.must(stringSizeLessThan(2)).when(not(nullValue())).withMessage("rule 1").must(stringSizeLessThan(2)).when(not(nullValue())).withMessage("rule 2")
-                .must(stringSizeLessThan(1)).when(not(nullValue())).withMessage("rule 3").critical(ValidationSampleException.class).must(stringSizeLessThan(2))
-                .when(not(nullValue())).withMessage("rule 4");
+    builder.must(stringSizeLessThan(2)).when(not(nullValue())).withMessage("rule 1")
+        .must(stringSizeLessThan(2)).when(not(nullValue())).withMessage("rule 2")
+        .must(stringSizeLessThan(1)).when(not(nullValue())).withMessage("rule 3")
+        .critical(ValidationSampleException.class).must(stringSizeLessThan(2))
+        .when(not(nullValue())).withMessage("rule 4");
 
-        assertFalse(builder.apply("o"));
-    }
-    
-    @Test
-    public void testSuccessDynamicProperties() {
-
-      final RuleBuilderPropertyImpl<String, String> builder = new RuleBuilderPropertyImpl<>("test", String::toUpperCase);
-
-      builder
-        .must(nullValue())
-          .withMessage(String::intern)
-        .must(nullValue())
-          .withCode(String::intern)
-        .must(nullValue())
-          .withFieldName(String::intern)
-        .must(nullValue())
-          .withAttempedValue(String::toLowerCase)
-        .must(nullValue())
-          .withAttempedValue(new String())
-        .must(nullValue())
-          .handlerInvalidField(new HandlerInvalidField<String>() {
-            public Collection<Error> handle(final String attemptedValue) {
-              return Collections.emptyList();
-            };
-          });
-
-      assertTrue(builder.apply("oo"));
+    assertFalse(builder.apply("o"));
+  }
+
+  @Test
+  public void testSuccessDynamicProperties() {
+
+    final RuleBuilderPropertyImpl<String, String> builder =
+        new RuleBuilderPropertyImpl<>("test", String::toUpperCase);
+
+    builder.must(nullValue()).withMessage(String::intern).must(nullValue()).withCode(String::intern)
+        .must(nullValue()).withFieldName(String::intern).must(nullValue())
+        .withAttempedValue(String::toLowerCase).must(nullValue()).withAttempedValue(new String())
+        .must(nullValue()).handlerInvalidField(new HandlerInvalidField<String>() {
+          @Override
+          public Collection<Error> handle(final String attemptedValue) {
+            return Collections.emptyList();
+          };
+        });
+
+    assertTrue(builder.apply("oo"));
+  }
+
+  @Test
+  public void testSuccessValidAndInvalidMultipleRule() {
+
+    final RuleBuilderPropertyImpl<String, String> builder =
+        new RuleBuilderPropertyImpl<>(String::new);
+
+    builder.must(isFalse()).when(isTrue()).withMessage("ever enter here").withCode("666")
+        .withFieldName("size").must(isTrue()).when(isTrue()).withMessage("never enter here")
+        .withCode("666").withFieldName("size").must(isTrue()).when(isFalse())
+        .withMessage("never enter here").withCode("666").withFieldName("size").must(isFalse())
+        .when(isFalse()).withMessage("never enter here").withCode("666").withFieldName("size");
+
+    assertTrue(builder.apply("o"));
+  }
+
+  class ValidatorIdTest extends AbstractValidator<String> {
+
+    @Override
+    public void rules() {
+
+      ruleFor(id -> id).must(stringSizeLessThan(2)).withMessage("rule 1").critical()
+          .must(stringSizeLessThan(1)).withMessage("rule 2").critical();
     }
 
-    @Test
-    public void testSuccessValidAndInvalidMultipleRule() {
+  }
+
+  @Test
+  public void testSuccesInnerClass() {
+
+    final Validator<ClassTest.InnerClass> builder = new InnerClassValidator();
+
+    final ValidationResult result = builder.validate(new ClassTest.InnerClass());
+
+    assertTrue(!result.isValid());
+
+  }
 
-        final RuleBuilderPropertyImpl<String, String> builder = new RuleBuilderPropertyImpl<>(String::new);
+  public static class InnerClassValidator extends AbstractValidator<ClassTest.InnerClass> {
 
-        builder.must(isFalse()).when(isTrue()).withMessage("ever enter here").withCode("666").withFieldName("size").must(isTrue()).when(isTrue()).withMessage("never enter here")
-                .withCode("666").withFieldName("size").must(isTrue()).when(isFalse()).withMessage("never enter here").withCode("666").withFieldName("size").must(isFalse())
-                .when(isFalse()).withMessage("never enter here").withCode("666").withFieldName("size");
+    @Override
+    public void rules() {
+      
+      failFastRule();
+
+      ruleFor(innerClass -> innerClass)
+        .must(not(nullValue()))
+        .withMessage("bla")
+        .withFieldName("bla")
+        .critical();
+
+      ruleFor(innerClass -> innerClass)
+        .must(not(stringEmptyOrNull(ClassTest.InnerClass::getValue)))
+        .when(innerClass -> "01".equals(innerClass.getCode()))
+        .withMessage("bla")
+        .withFieldName("bla");
+      
+      ruleFor(innerClass -> innerClass)
+        .must(not(stringEmptyOrNull(ClassTest.InnerClass::getValue)))
+        .when(innerClass -> "02".equals(innerClass.getCode()))      
+        .withMessage("bla")
+        .withFieldName("bla");
 
-        assertTrue(builder.apply("o"));
     }
 
-    class ValidatorIdTest extends AbstractValidator<String> {
+  }
+
+  public static class ClassTest {
+
+    public static class InnerClass {
+
+      private final String name = "Name";
 
-        @Override
-        public void rules() {
+      private final String code = "01";
 
-            ruleFor(id -> id).must(stringSizeLessThan(2)).withMessage("rule 1").critical().must(stringSizeLessThan(1)).withMessage("rule 2").critical();
-        }
+      private final String value = "";
+
+      public String getValue() {
+        return value;
+      }
+
+      public String getName() {
+        return name;
+      }
+
+      public String getCode() {
+        return code;
+      }
 
     }
 
+  }
+
 }
