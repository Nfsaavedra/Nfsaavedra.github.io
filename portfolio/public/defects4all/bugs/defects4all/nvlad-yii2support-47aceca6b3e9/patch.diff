diff --git a/.github/workflows/gradle.yml b/.github/workflows/gradle.yml
index 4cf278d..214dc0f 100644
--- a/.github/workflows/gradle.yml
+++ b/.github/workflows/gradle.yml
@@ -17,10 +17,10 @@ jobs:
     steps:
     - name: Checkout Code
       uses: actions/checkout@v2
-    - name: Set up JDK 1.8
+    - name: Set up JDK
       uses: actions/setup-java@v1
       with:
-        java-version: 1.8
+        java-version: 11
     - name: Grant execute permission for gradlew
       run: chmod +x gradlew
     - name: Run Tests with Gradle
diff --git a/.gitignore b/.gitignore
index eac8942..6249792 100644
--- a/.gitignore
+++ b/.gitignore
@@ -4,3 +4,5 @@ yii2support.jar
 yii2support.zip
 /build
 /.gradle/
+/bin/*
+.*
\ No newline at end of file
diff --git a/build.gradle.kts b/build.gradle.kts
index dca3b64..17390c1 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -5,8 +5,8 @@ import org.jetbrains.changelog.markdownToHTML
 plugins {
     id("java")
 //    id("org.jetbrains.kotlin.jvm") version "1.4.10"
-    id("org.jetbrains.intellij") version "0.6.3"
-    id("org.jetbrains.changelog") version "0.6.2"
+    id("org.jetbrains.intellij") version "0.7.2"
+    id("org.jetbrains.changelog") version "1.1.2"
     id("io.gitlab.arturbosch.detekt") version "1.14.2"
 }
 
@@ -29,6 +29,9 @@ version = pluginVersion
 val platformPluginsAssociation = hashMapOf<String, String>()
 platformPluginsAssociation["2019.1.4"] = "com.jetbrains.php:191.8026.56, org.jetbrains.plugins.phpstorm-remote-interpreter:191.5849.22, com.jetbrains.twig:191.6183.95"
 platformPluginsAssociation["2020.2.3"] = "com.jetbrains.php:202.7660.42, org.jetbrains.plugins.phpstorm-remote-interpreter:202.6397.59, com.jetbrains.twig:202.6397.21"
+platformPluginsAssociation["2020.3.3"] = "com.jetbrains.php:203.7717.11, org.jetbrains.plugins.phpstorm-remote-interpreter:203.5981.155, com.jetbrains.twig:203.6682.75"
+platformPluginsAssociation["2021.1"] = "com.jetbrains.php:211.6693.120, org.jetbrains.plugins.phpstorm-remote-interpreter:211.6693.65, com.jetbrains.twig:211.6693.44, PsiViewer:211-SNAPSHOT"
+platformPluginsAssociation["2021.2"] = "com.jetbrains.php:212.4746.92, org.jetbrains.plugins.phpstorm-remote-interpreter:212.4746.52, com.jetbrains.twig:212.4746.57, PsiViewer:212-SNAPSHOT"
 val bundledPlugins = "DatabaseTools, webDeployment, CSS, terminal, coverage, java-i18n, remote-run, properties"
 
 val platformPlugins = platformPluginsAssociation[platformVersion] + ", $bundledPlugins"
@@ -96,7 +99,7 @@ tasks {
         // Extract the <!-- Plugin description --> section from README.md and provide for the plugin's manifest
         pluginDescription(
             closure {
-                File("./DESCRIPTION.md").readText().lines().joinToString("\n").run { markdownToHTML(this) }
+                File(projectDir,"./DESCRIPTION.md").readText().lines().joinToString("\n").run { markdownToHTML(this) }
             }
         )
 
@@ -109,7 +112,7 @@ tasks {
     }
 
     test {
-//        useJUnitPlatform()
+        //useJUnitPlatform()
         reports {
             junitXml.isEnabled = true
         }
diff --git a/gradle.properties b/gradle.properties
index 613fd7b..990156b 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -15,22 +15,23 @@
 
 
 platformType = IU
-platformVersion = 2020.2.3
+#platformVersion = 2020.3.3
+platformVersion = 2021.2
 platformDownloadSources = true
 
 pluginName_ = Yii2 Support
-pluginVersion = 0.10.58.37
-pluginSinceBuild = 191
+pluginVersion = 0.10.58.52
+pluginSinceBuild = 192
 #pluginVerifierIdeVersions = IU-2019.1.4, IU-2019.3.5, IU-2020.1.4, IU-2020.2.3
-pluginVerifierIdeVersions = IU-2019.1.4, IU-2020.2.3
-
-#runIdePath = /AppData/Local/JetBrains/Toolbox/apps/PhpStorm/ch-0/202.7660.42
+pluginVerifierIdeVersions = IU-2020.2.3, IU-2020.3.3, IU-2021.1, IU-2021.2
 
+#runIdePath = /home/gl/.local/share/JetBrains/Toolbox/apps/PhpStorm/ch-1/211.6693.78
 #ideVersion = LATEST-EAP-SNAPSHOT
 #phpPluginVersion = 203.5251.40
 #phpRemoteInterpreterPluginVersion = 203.5251.40
 #twigPluginVersion = 203.5251.28
 
+org.gradle.jvmargs=-Xmx4608m
 
 ORG_GRADLE_PROJECT_USERNAME=
 ORG_GRADLE_PROJECT_PASSWORD=
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index 0d4a951..e708b1c 100644
Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 58e1e6e..da9702f 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,5 @@
-#Tue Aug 21 14:32:51 MSK 2018
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-6.8-bin.zip
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-6.7-all.zip
diff --git a/gradlew b/gradlew
old mode 100644
new mode 100755
index cccdd3d..4f906e0
--- a/gradlew
+++ b/gradlew
@@ -1,5 +1,21 @@
 #!/usr/bin/env sh
 
+#
+# Copyright 2015 the original author or authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      https://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
 ##############################################################################
 ##
 ##  Gradle start up script for UN*X
@@ -28,7 +44,7 @@ APP_NAME="Gradle"
 APP_BASE_NAME=`basename "$0"`
 
 # Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-DEFAULT_JVM_OPTS=""
+DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'
 
 # Use the maximum available, or set MAX_FD != -1 to use that value.
 MAX_FD="maximum"
@@ -66,6 +82,7 @@ esac
 
 CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
 
+
 # Determine the Java command to use to start the JVM.
 if [ -n "$JAVA_HOME" ] ; then
     if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
@@ -109,10 +126,11 @@ if $darwin; then
     GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
 fi
 
-# For Cygwin, switch paths to Windows format before running java
-if $cygwin ; then
+# For Cygwin or MSYS, switch paths to Windows format before running java
+if [ "$cygwin" = "true" -o "$msys" = "true" ] ; then
     APP_HOME=`cygpath --path --mixed "$APP_HOME"`
     CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+
     JAVACMD=`cygpath --unix "$JAVACMD"`
 
     # We build the pattern for arguments to be converted via cygpath
@@ -138,19 +156,19 @@ if $cygwin ; then
         else
             eval `echo args$i`="\"$arg\""
         fi
-        i=$((i+1))
+        i=`expr $i + 1`
     done
     case $i in
-        (0) set -- ;;
-        (1) set -- "$args0" ;;
-        (2) set -- "$args0" "$args1" ;;
-        (3) set -- "$args0" "$args1" "$args2" ;;
-        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
-        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
-        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
-        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
-        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
-        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
+        0) set -- ;;
+        1) set -- "$args0" ;;
+        2) set -- "$args0" "$args1" ;;
+        3) set -- "$args0" "$args1" "$args2" ;;
+        4) set -- "$args0" "$args1" "$args2" "$args3" ;;
+        5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
+        6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
+        7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
+        8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
+        9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
     esac
 fi
 
@@ -159,14 +177,9 @@ save () {
     for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
     echo " "
 }
-APP_ARGS=$(save "$@")
+APP_ARGS=`save "$@"`
 
 # Collect all arguments for the java command, following the shell quoting and substitution rules
 eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"
 
-# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong
-if [ "$(uname)" = "Darwin" ] && [ "$HOME" = "$PWD" ]; then
-  cd "$(dirname "$0")"
-fi
-
 exec "$JAVACMD" "$@"
diff --git a/gradlew.bat b/gradlew.bat
index f955316..ac1b06f 100644
--- a/gradlew.bat
+++ b/gradlew.bat
@@ -1,84 +1,89 @@
-@if "%DEBUG%" == "" @echo off
-@rem ##########################################################################
-@rem
-@rem  Gradle startup script for Windows
-@rem
-@rem ##########################################################################
-
-@rem Set local scope for the variables with windows NT shell
-if "%OS%"=="Windows_NT" setlocal
-
-set DIRNAME=%~dp0
-if "%DIRNAME%" == "" set DIRNAME=.
-set APP_BASE_NAME=%~n0
-set APP_HOME=%DIRNAME%
-
-@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-set DEFAULT_JVM_OPTS=
-
-@rem Find java.exe
-if defined JAVA_HOME goto findJavaFromJavaHome
-
-set JAVA_EXE=java.exe
-%JAVA_EXE% -version >NUL 2>&1
-if "%ERRORLEVEL%" == "0" goto init
-
-echo.
-echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
-echo.
-echo Please set the JAVA_HOME variable in your environment to match the
-echo location of your Java installation.
-
-goto fail
-
-:findJavaFromJavaHome
-set JAVA_HOME=%JAVA_HOME:"=%
-set JAVA_EXE=%JAVA_HOME%/bin/java.exe
-
-if exist "%JAVA_EXE%" goto init
-
-echo.
-echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
-echo.
-echo Please set the JAVA_HOME variable in your environment to match the
-echo location of your Java installation.
-
-goto fail
-
-:init
-@rem Get command-line arguments, handling Windows variants
-
-if not "%OS%" == "Windows_NT" goto win9xME_args
-
-:win9xME_args
-@rem Slurp the command line arguments.
-set CMD_LINE_ARGS=
-set _SKIP=2
-
-:win9xME_args_slurp
-if "x%~1" == "x" goto execute
-
-set CMD_LINE_ARGS=%*
-
-:execute
-@rem Setup the command line
-
-set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
-
-@rem Execute Gradle
-"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
-
-:end
-@rem End local scope for the variables with windows NT shell
-if "%ERRORLEVEL%"=="0" goto mainEnd
-
-:fail
-rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
-rem the _cmd.exe /c_ return code!
-if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
-exit /b 1
-
-:mainEnd
-if "%OS%"=="Windows_NT" endlocal
-
-:omega
+@rem
+@rem Copyright 2015 the original author or authors.
+@rem
+@rem Licensed under the Apache License, Version 2.0 (the "License");
+@rem you may not use this file except in compliance with the License.
+@rem You may obtain a copy of the License at
+@rem
+@rem      https://www.apache.org/licenses/LICENSE-2.0
+@rem
+@rem Unless required by applicable law or agreed to in writing, software
+@rem distributed under the License is distributed on an "AS IS" BASIS,
+@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+@rem See the License for the specific language governing permissions and
+@rem limitations under the License.
+@rem
+
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Resolve any "." and ".." in APP_HOME to make it shorter.
+for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto execute
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto execute
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
diff --git a/resources/META-INF/plugin.xml b/resources/META-INF/plugin.xml
index 544046e..ea63041 100644
--- a/resources/META-INF/plugin.xml
+++ b/resources/META-INF/plugin.xml
@@ -31,7 +31,7 @@
     <depends optional="true" config-file="phpstorm-remote-interpreter.xml">org.jetbrains.plugins.phpstorm-remote-interpreter</depends>
 
     <extensions defaultExtensionNs="com.jetbrains.php">
-        <typeProvider3 implementation="com.nvlad.yii2support.typeprovider.YiiTypeProvider"/>
+        <typeProvider4 implementation="com.nvlad.yii2support.typeprovider.YiiTypeProvider"/>
         <typeProvider4 implementation="com.nvlad.yii2support.typeprovider.ActiveRecordTypeProvider"/>
     </extensions>
 
@@ -123,9 +123,18 @@
                              parentId="Yii2Support.SettingsForm" order="first"
                              nonDefaultProject="true"/>
 
+        <!-- Yii Configurations -->
+        <fileBasedIndex implementation="com.nvlad.yii2support.configurations.ComponentsIndex" id="components-index"/>
+        <completion.contributor language="PHP" implementationClass="com.nvlad.yii2support.configurations.YiiAppCompletionContributor"/>
+
+        <completion.contributor language="PHP" implementationClass="com.nvlad.yii2support.widgetsconfig.WidgetConfigCompletionContributor"/>
+
         <!-- Validation -->
         <completion.contributor language="PHP" implementationClass="com.nvlad.yii2support.validation.ValidationCompletionContributor"/>
 
+        <!-- AttributeLabels -->
+        <completion.contributor language="PHP" implementationClass="com.nvlad.yii2support.attributeLabels.AttributeLabelCompletionContributor"/>
+
         <!-- Url -->
         <completion.contributor language="PHP" implementationClass="com.nvlad.yii2support.url.UrlCompletionContributor"/>
 <!--        <psi.referenceContributor language="PHP" implementation="com.nvlad.yii2support.url.UrlReferenceContributor"/>-->
diff --git a/src/com/nvlad/yii2support/attributeLabels/AttributeLabelCompletionContributor.java b/src/com/nvlad/yii2support/attributeLabels/AttributeLabelCompletionContributor.java
new file mode 100644
index 0000000..58b862c
--- /dev/null
+++ b/src/com/nvlad/yii2support/attributeLabels/AttributeLabelCompletionContributor.java
@@ -0,0 +1,22 @@
+package com.nvlad.yii2support.attributeLabels;
+
+import com.intellij.codeInsight.completion.CompletionType;
+import com.intellij.patterns.PlatformPatterns;
+import com.intellij.psi.PsiElement;
+import com.jetbrains.php.lang.psi.elements.ArrayCreationExpression;
+import org.jetbrains.annotations.NotNull;
+
+public class AttributeLabelCompletionContributor extends com.intellij.codeInsight.completion.CompletionContributor{
+    public AttributeLabelCompletionContributor() {
+        extend(CompletionType.BASIC, PlatformPatterns.psiElement(), new AttributeLabelCompletionProvider());
+    }
+
+    @Override
+    public boolean invokeAutoPopup(@NotNull PsiElement position, char typeChar) {
+        if ((typeChar == '\'' || typeChar == '"') && position.getParent() instanceof ArrayCreationExpression) {
+            return true;
+        }
+
+        return false;
+    }
+}
diff --git a/src/com/nvlad/yii2support/attributeLabels/AttributeLabelCompletionProvider.java b/src/com/nvlad/yii2support/attributeLabels/AttributeLabelCompletionProvider.java
new file mode 100644
index 0000000..ed2fd83
--- /dev/null
+++ b/src/com/nvlad/yii2support/attributeLabels/AttributeLabelCompletionProvider.java
@@ -0,0 +1,51 @@
+package com.nvlad.yii2support.attributeLabels;
+
+import com.intellij.codeInsight.completion.CompletionParameters;
+import com.intellij.codeInsight.completion.CompletionProvider;
+import com.intellij.codeInsight.completion.CompletionResultSet;
+import com.intellij.codeInsight.lookup.LookupElementBuilder;
+import com.intellij.openapi.editor.Document;
+import com.intellij.psi.PsiElement;
+import com.intellij.util.ProcessingContext;
+import com.jetbrains.php.lang.psi.elements.*;
+import com.nvlad.yii2support.common.ClassUtils;
+import org.jetbrains.annotations.NotNull;
+
+public class AttributeLabelCompletionProvider extends CompletionProvider<CompletionParameters> {
+    @Override
+    protected void addCompletions(@NotNull CompletionParameters completionParameters, @NotNull ProcessingContext processingContext, @NotNull CompletionResultSet completionResultSet) {
+        PsiElement position = completionParameters.getPosition();
+        if (position.getParent() instanceof PhpExpression) {
+            PhpExpression phpExpression = (PhpExpression) position.getParent();
+            PhpClass phpClass = ClassUtils.getClassIfInMethod(position, "attributeLabels");
+            if (phpClass != null) {
+                for (Field field : ClassUtils.getClassFields(phpClass)) {
+                    LookupElementBuilder lookupBuilder = buildLookup(field, phpExpression);
+                    completionResultSet.addElement(lookupBuilder);
+                }
+            }
+        }
+    }
+
+    @NotNull
+    private LookupElementBuilder buildLookup(PhpClassMember field, PhpExpression position) {
+        String lookupString = field instanceof Method ? ClassUtils.getAsPropertyName((Method) field) : field.getName();
+        LookupElementBuilder builder = LookupElementBuilder.create(field, lookupString).withIcon(field.getIcon());
+
+        builder = builder.withInsertHandler((insertionContext, lookupElement) -> {
+            Document document = insertionContext.getDocument();
+            int insertPosition = insertionContext.getSelectionEndOffset();
+            if (position.getParent().getParent() instanceof ArrayCreationExpression) {
+                document.insertString(insertPosition + 1, " => '',");
+                insertPosition += 6;
+                insertionContext.getEditor().getCaretModel().getCurrentCaret().moveToOffset(insertPosition);
+            }
+        });
+
+        if (field instanceof Field) {
+            builder = builder.withTypeText(field.getType().toString());
+        }
+
+        return builder;
+    }
+}
diff --git a/src/com/nvlad/yii2support/common/ClassUtils.java b/src/com/nvlad/yii2support/common/ClassUtils.java
index 2a3c659..6fb5aa6 100644
--- a/src/com/nvlad/yii2support/common/ClassUtils.java
+++ b/src/com/nvlad/yii2support/common/ClassUtils.java
@@ -6,6 +6,7 @@ import com.intellij.util.ArrayUtil;
 import com.jetbrains.php.PhpIndex;
 import com.jetbrains.php.lang.documentation.phpdoc.psi.PhpDocProperty;
 import com.jetbrains.php.lang.documentation.phpdoc.psi.tags.PhpDocTag;
+import com.jetbrains.php.lang.psi.PhpFile;
 import com.jetbrains.php.lang.psi.elements.*;
 import com.jetbrains.php.lang.psi.elements.impl.ClassConstImpl;
 import com.jetbrains.php.lang.psi.elements.impl.PhpDefineImpl;
@@ -186,7 +187,11 @@ public class ClassUtils {
 
     public static String getAsPropertyName(Method method) {
         String methodName = method.getName();
-        String propertyName = methodName.substring(3);
+        int trimLen = 3;
+        if(methodName.startsWith("as")){
+            trimLen = 2;
+        }
+        String propertyName = methodName.substring(trimLen);
         propertyName = propertyName.substring(0, 1).toLowerCase() + propertyName.substring(1);
 
         return propertyName;
@@ -208,6 +213,21 @@ public class ClassUtils {
         return result;
     }
 
+    public static Collection<Method> getFormatterAsMethods(PhpClass phpClass) {
+        final HashSet<Method> result = new HashSet<>();
+        final Collection<Method> methods = phpClass.getMethods();
+
+        for (Method method : methods) {
+            String methodName = method.getName();
+            if (methodName.length() > 2 && methodName.startsWith("as") &&
+                    Character.isUpperCase(methodName.charAt(2))) {
+                result.add(method);
+            }
+        }
+
+        return result;
+    }
+
     @Nullable
     public static MethodReference getMethodRef(PsiElement el, int recursionLimit) {
         if (el == null || recursionLimit <= 0) {
@@ -407,6 +427,11 @@ public class ClassUtils {
 
     @Nullable
     public static PhpClass getElementType(PhpNamedElement param) {
+        return getElementType(param, true);
+    }
+
+    @Nullable
+    public static PhpClass getElementType(PhpNamedElement param, boolean onlyFirst) {
         Set<String> types = param.getType().getTypes();
         PhpClass resultClass;
         for (String type : types) {
@@ -422,7 +447,7 @@ public class ClassUtils {
                         try {
                             int index = Integer.parseInt(parts[2]);
                             if (method != null && method.getParameters().length > index) {
-                                return getElementType(method.getParameters()[index]);
+                                return getElementType(method.getParameters()[index], true);
                             }
                         } catch (NumberFormatException ex) {
                             // pass
@@ -431,6 +456,9 @@ public class ClassUtils {
                 }
             } else {
                 resultClass = getClass(PhpIndex.getInstance(param.getProject()), type);
+                if(resultClass == null && !onlyFirst){
+                    continue;
+                }
 
                 return resultClass;
             }
@@ -488,4 +516,34 @@ public class ClassUtils {
         }
         return null;
     }
+
+    @Nullable
+    public static PhpClass getClassIfInMethod(PsiElement position, String methodName) {
+        PsiElement elem = position.getParent();
+        Method currentMethod = null;
+        PhpClass phpClass = null;
+        while (true) {
+            if (elem instanceof Method)
+                currentMethod = (Method) elem;
+            else if (elem instanceof PhpClass) {
+                phpClass = (PhpClass) elem;
+                break;
+            } else if (elem instanceof PhpFile)
+                break;
+            else if (elem == null) {
+                break;
+            }
+            elem = elem.getParent();
+        }
+        if (currentMethod != null && phpClass != null) {
+            if (ClassUtils.isClassInherit(phpClass, "\\yii\\base\\Model", PhpIndex.getInstance(position.getProject())) &&
+                    currentMethod.getName().equals(methodName)) {
+                return phpClass;
+            } else
+                return null;
+
+        } else {
+            return null;
+        }
+    }
 }
diff --git a/src/com/nvlad/yii2support/common/DatabaseUtils.java b/src/com/nvlad/yii2support/common/DatabaseUtils.java
index ade0d7d..18b2d04 100644
--- a/src/com/nvlad/yii2support/common/DatabaseUtils.java
+++ b/src/com/nvlad/yii2support/common/DatabaseUtils.java
@@ -4,6 +4,7 @@ import com.intellij.codeInsight.lookup.LookupElementBuilder;
 import com.intellij.database.model.DasColumn;
 import com.intellij.database.model.DasObject;
 import com.intellij.database.model.DasTable;
+import com.intellij.database.model.RawConnectionConfig;
 import com.intellij.database.psi.*;
 import com.intellij.ide.TypePresentationService;
 import com.intellij.openapi.editor.Document;
@@ -349,11 +350,27 @@ public class DatabaseUtils {
         final ArrayList<VirtualProperty> result = new ArrayList<>();
         if (table == null)
             return result;
+        String preferredDataSourceId = Yii2SupportSettings.getInstance(project).dataSourceId;
         for (DbDataSource source : dataSources) {
-            for (Object item : source.getModel().traverser().filter(DasTable.class)) {
+            if(!preferredDataSourceId.isEmpty() && !preferredDataSourceId.equals(source.getUniqueId())){
+                continue;
+            }
+            for (DasTable item : source.getModel().traverser().filter(DasTable.class)) {
                 table = ClassUtils.removeQuotes(table);
-                if (item instanceof DasTable && ((DasTable) item).getName().equals(table)) {
-                    TableInfo tableInfo = new TableInfo((DasTable) item);
+                if (item != null && item.getName().equals(table)) {
+
+                    // In some cases Idea give tables from another databases. Extracting database name from URL and comparing with actual one.
+                    DasObject db = item.getDasParent();
+                    if(db != null && source.getConnectionConfig() != null){
+                        String dbUrl = source.getConnectionConfig().getUrl();
+                        if(!dbUrl.endsWith("/")
+                                && !dbUrl.substring(dbUrl.lastIndexOf('/')+1).equals(db.getName()))
+                        {
+                            continue;
+                        }
+                    }
+
+                    TableInfo tableInfo = new TableInfo(item);
 
                     for (DasColumn column : tableInfo.getColumns()) {
                         boolean found = false;
diff --git a/src/com/nvlad/yii2support/common/PsiUtil.java b/src/com/nvlad/yii2support/common/PsiUtil.java
index 56cf79c..4b68f3e 100644
--- a/src/com/nvlad/yii2support/common/PsiUtil.java
+++ b/src/com/nvlad/yii2support/common/PsiUtil.java
@@ -1,8 +1,10 @@
 package com.nvlad.yii2support.common;
 
 import com.intellij.psi.PsiElement;
+import com.intellij.psi.PsiReference;
 import com.intellij.psi.PsiWhiteSpace;
-import com.jetbrains.php.lang.psi.elements.ArrayCreationExpression;
+import com.jetbrains.php.lang.psi.elements.*;
+import com.jetbrains.php.lang.psi.elements.impl.VariableImpl;
 import org.jetbrains.annotations.Nullable;
 
 /**
@@ -104,4 +106,41 @@ public class PsiUtil {
         }
         return null;
     }
+
+    public static ArrayCreationExpression getArrayCreationChild(PsiElement element) {
+        int limit = 10;
+        PsiElement curElement = element;
+        while (limit > 0) {
+            if(curElement instanceof GroupStatement || curElement instanceof PhpReturn){
+                curElement = curElement.getFirstChild();
+            }else if (curElement instanceof ArrayCreationExpression) {
+                return (ArrayCreationExpression) curElement;
+            } else {
+                if(curElement == null){
+                    break;
+                }
+                curElement = curElement.getNextSibling();
+            }
+            limit--;
+        }
+        return null;
+    }
+
+    @Nullable
+    public static String getYiiAppField(FieldReference element) {
+        String signature = element.getSignature();
+        int appIndex = signature.indexOf("Yii.app.");
+        if(appIndex != -1){
+            String origSign = signature.substring(appIndex);
+            int endIndex = origSign.indexOf("|");
+            if(endIndex != -1) {
+                origSign = origSign.substring(0, endIndex);
+            }
+            int fieldIndex = origSign.lastIndexOf(".");
+            if(origSign.substring(0,fieldIndex).equals("Yii.app")){
+                return origSign.substring(fieldIndex+1);
+            }
+        }
+        return null;
+    }
 }
diff --git a/src/com/nvlad/yii2support/common/SignatureUtils.java b/src/com/nvlad/yii2support/common/SignatureUtils.java
index ea296bc..eb41503 100644
--- a/src/com/nvlad/yii2support/common/SignatureUtils.java
+++ b/src/com/nvlad/yii2support/common/SignatureUtils.java
@@ -16,7 +16,7 @@ public class SignatureUtils {
         int beginClassIndex = signature.indexOf("\\");
         int endClassIndex = signature.indexOf(".");
         if (endClassIndex < 0) {
-            endClassIndex = signature.length() - 1;
+            endClassIndex = signature.length();
         }
         if (beginClassIndex > -1 && beginClassIndex < endClassIndex) {
             String className = signature.substring(beginClassIndex, endClassIndex);
diff --git a/src/com/nvlad/yii2support/common/YiiApplicationUtils.java b/src/com/nvlad/yii2support/common/YiiApplicationUtils.java
index b019b3e..065ebd6 100644
--- a/src/com/nvlad/yii2support/common/YiiApplicationUtils.java
+++ b/src/com/nvlad/yii2support/common/YiiApplicationUtils.java
@@ -6,6 +6,7 @@ import com.intellij.openapi.vfs.LocalFileSystem;
 import com.intellij.openapi.vfs.VirtualFile;
 import com.intellij.psi.PsiFile;
 import com.nvlad.yii2support.utils.Yii2SupportSettings;
+import com.nvlad.yii2support.views.util.ViewUtil;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
@@ -58,7 +59,13 @@ public class YiiApplicationUtils {
                 return "";
             }
 
-            return fileUrl.substring(yiiRootLength + 1, slashIndex);
+            String appName = fileUrl.substring(yiiRootLength + 1, slashIndex);
+            String moduleName = ViewUtil.getModuleName(fileUrl.substring(yiiRootLength + 1));
+            if(moduleName != null){
+                return moduleName;
+            }
+
+            return appName;
         }
 
         return "app";
diff --git a/src/com/nvlad/yii2support/configurations/ComponentsIndex.java b/src/com/nvlad/yii2support/configurations/ComponentsIndex.java
new file mode 100644
index 0000000..7fafdda
--- /dev/null
+++ b/src/com/nvlad/yii2support/configurations/ComponentsIndex.java
@@ -0,0 +1,116 @@
+package com.nvlad.yii2support.configurations;
+
+import com.intellij.psi.PsiElement;
+import com.intellij.psi.PsiFile;
+import com.intellij.util.indexing.*;
+import com.intellij.util.io.DataExternalizer;
+import com.intellij.util.io.EnumeratorStringDescriptor;
+import com.intellij.util.io.KeyDescriptor;
+import com.jetbrains.php.lang.PhpFileType;
+import com.jetbrains.php.lang.psi.PhpFile;
+import com.jetbrains.php.lang.psi.elements.*;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.HashMap;
+
+import static com.nvlad.yii2support.common.PsiUtil.getArrayCreationChild;
+
+public class ComponentsIndex extends FileBasedIndexExtension<String, String> {
+    public static final ID<String, String> identity = ID.create("Yii2Support.ComponentsIndex");
+
+    @Override
+    public @NotNull ID<String, String> getName() {
+        return identity;
+    }
+
+    @Override
+    public @NotNull DataIndexer<String, String, FileContent> getIndexer() {
+        return file -> {
+            final HashMap<String, String> result = new HashMap<>();
+
+            PsiFile psiFile = file.getPsiFile();
+            if(psiFile instanceof PhpFile){
+                PsiElement openTag = psiFile.getFirstChild();
+                for(PsiElement child : openTag.getChildren()){
+                    if(child instanceof PhpReturn){
+                        ArrayCreationExpression arrayExpression = getArrayCreationChild(child);
+                        if(arrayExpression != null) {
+                            for (ArrayHashElement arrayHashElement : arrayExpression.getHashElements()) {
+                                if(arrayHashElement.getKey() == null || arrayHashElement.getValue() == null){
+                                    continue;
+                                }
+
+                                if(((StringLiteralExpression) arrayHashElement.getKey()).getContents().equals("components")){
+                                    for (PsiElement component : arrayHashElement.getValue().getChildren()) {
+                                        if(!(component instanceof ArrayHashElement)) {
+                                            continue;
+                                        }
+                                        StringLiteralExpression keyExpr = (StringLiteralExpression)((ArrayHashElement) component).getKey();
+                                        PhpPsiElement confArray = ((ArrayHashElement) component).getValue();
+                                        if(keyExpr == null || !(confArray instanceof ArrayCreationExpression)){
+                                            continue;
+                                        }
+
+                                        String componentName = keyExpr.getContents();
+                                        for(PsiElement conf : confArray.getChildren()){
+                                            if(!(conf instanceof ArrayHashElement)) {
+                                                continue;
+                                            }
+
+                                            StringLiteralExpression prop = (StringLiteralExpression)((ArrayHashElement) conf).getKey();
+                                            if(prop == null){
+                                                continue;
+                                            }
+                                            if(prop.getContents().equals("class")){
+                                                PhpPsiElement classValue = ((ArrayHashElement) conf).getValue();
+                                                String classFqn;
+                                                if(classValue instanceof ClassConstantReference && ((ClassConstantReference) classValue).getClassReference() != null){
+                                                    classFqn = ((ClassConstantReference) classValue).getClassReference().getType().toString();
+                                                }else if(classValue instanceof StringLiteralExpression){
+                                                    classFqn = ((StringLiteralExpression) classValue).getContents();
+                                                }else{
+                                                    continue;
+                                                }
+                                                result.put(componentName, classFqn);
+                                            }
+                                        }
+                                    }
+                                }
+                            }
+                        }
+                    }
+                }
+            }
+            return result;
+        };
+    }
+
+    @Override
+    public @NotNull KeyDescriptor<String> getKeyDescriptor() {
+        return EnumeratorStringDescriptor.INSTANCE;
+    }
+
+    @Override
+    public @NotNull DataExternalizer<String> getValueExternalizer() {
+        return EnumeratorStringDescriptor.INSTANCE;
+    }
+
+    @Override
+    public int getVersion() {
+        return 6;
+    }
+
+    @Override
+    public @NotNull FileBasedIndex.InputFilter getInputFilter() {
+        return file -> (
+                file.getFileType() == PhpFileType.INSTANCE
+                && file.getUrl().contains("/config/")
+                && !file.getUrl().contains("/environments/")
+        );
+    }
+
+    @Override
+    public boolean dependsOnFileContent() {
+        return true;
+    }
+}
diff --git a/src/com/nvlad/yii2support/configurations/YiiAppCompletionContributor.java b/src/com/nvlad/yii2support/configurations/YiiAppCompletionContributor.java
new file mode 100644
index 0000000..8a79ddf
--- /dev/null
+++ b/src/com/nvlad/yii2support/configurations/YiiAppCompletionContributor.java
@@ -0,0 +1,13 @@
+package com.nvlad.yii2support.configurations;
+
+import com.intellij.codeInsight.completion.CompletionContributor;
+import com.intellij.codeInsight.completion.CompletionType;
+import com.intellij.patterns.PlatformPatterns;
+import com.jetbrains.php.lang.psi.elements.FieldReference;
+
+public class YiiAppCompletionContributor extends CompletionContributor {
+    public YiiAppCompletionContributor() {
+        extend(CompletionType.BASIC, PlatformPatterns.psiElement().withParent(FieldReference.class), new YiiAppCompletionProvider());
+    }
+
+}
diff --git a/src/com/nvlad/yii2support/configurations/YiiAppCompletionProvider.java b/src/com/nvlad/yii2support/configurations/YiiAppCompletionProvider.java
new file mode 100644
index 0000000..53374be
--- /dev/null
+++ b/src/com/nvlad/yii2support/configurations/YiiAppCompletionProvider.java
@@ -0,0 +1,44 @@
+package com.nvlad.yii2support.configurations;
+
+import com.intellij.codeInsight.completion.CompletionParameters;
+import com.intellij.codeInsight.completion.CompletionProvider;
+import com.intellij.codeInsight.completion.CompletionResultSet;
+import com.intellij.codeInsight.lookup.LookupElementBuilder;
+import com.intellij.icons.AllIcons;
+import com.intellij.openapi.project.Project;
+import com.intellij.psi.PsiElement;
+import com.intellij.psi.search.GlobalSearchScope;
+import com.intellij.util.ProcessingContext;
+import com.intellij.util.indexing.FileBasedIndex;
+import com.jetbrains.php.lang.psi.elements.*;
+import com.nvlad.yii2support.common.PsiUtil;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.List;
+
+public class YiiAppCompletionProvider extends CompletionProvider<CompletionParameters> {
+    @Override
+    protected void addCompletions(@NotNull CompletionParameters completionParameters, @NotNull ProcessingContext processingContext, @NotNull CompletionResultSet completionResultSet) {
+        final FileBasedIndex fileBasedIndex = FileBasedIndex.getInstance();
+        final PsiElement psiElement = completionParameters.getPosition();
+        final Project project = psiElement.getProject();
+        final GlobalSearchScope scope = GlobalSearchScope.projectScope(project);
+
+        if(psiElement.getParent() instanceof FieldReference){
+            String field = PsiUtil.getYiiAppField((FieldReference) psiElement.getParent());
+            if(field != null){
+                fileBasedIndex.processAllKeys(ComponentsIndex.identity, key -> {
+                    List<String> values = fileBasedIndex.getValues(ComponentsIndex.identity, key, scope);
+                    if(values.size() > 0){
+                        LookupElementBuilder lookupElement = LookupElementBuilder.create(key)
+                                .withTypeText(values.get(0), true)
+                                .withIcon(AllIcons.Nodes.Class);
+
+                        completionResultSet.addElement(lookupElement);
+                    }
+                    return true;
+                }, project);
+            }
+        }
+    }
+}
diff --git a/src/com/nvlad/yii2support/database/settings/SettingsForm.form b/src/com/nvlad/yii2support/database/settings/SettingsForm.form
index 4283e48..acfbaf7 100644
--- a/src/com/nvlad/yii2support/database/settings/SettingsForm.form
+++ b/src/com/nvlad/yii2support/database/settings/SettingsForm.form
@@ -11,7 +11,7 @@
     </clientProperties>
     <border type="none" title=""/>
     <children>
-      <grid id="8e734" binding="tablePanel" layout-manager="GridLayoutManager" row-count="2" column-count="2" same-size-horizontally="false" same-size-vertically="false" hgap="-1" vgap="-1">
+      <grid id="8e734" binding="tablePanel" layout-manager="GridLayoutManager" row-count="3" column-count="2" same-size-horizontally="false" same-size-vertically="false" hgap="-1" vgap="-1">
         <margin top="0" left="0" bottom="0" right="0"/>
         <constraints>
           <grid row="0" column="0" row-span="1" col-span="1" vsize-policy="3" hsize-policy="3" anchor="0" fill="3" indent="0" use-parent-layout="false"/>
@@ -46,6 +46,20 @@
             </constraints>
             <properties/>
           </component>
+          <component id="ff92" class="javax.swing.JComboBox" binding="DbSourceSelect">
+            <constraints>
+              <grid row="2" column="1" row-span="1" col-span="1" vsize-policy="0" hsize-policy="2" anchor="8" fill="1" indent="0" use-parent-layout="false"/>
+            </constraints>
+            <properties/>
+          </component>
+          <component id="d0a75" class="javax.swing.JLabel">
+            <constraints>
+              <grid row="2" column="0" row-span="1" col-span="1" vsize-policy="0" hsize-policy="0" anchor="8" fill="0" indent="0" use-parent-layout="false"/>
+            </constraints>
+            <properties>
+              <text value="Data Source"/>
+            </properties>
+          </component>
         </children>
       </grid>
       <vspacer id="e2139">
diff --git a/src/com/nvlad/yii2support/database/settings/SettingsForm.java b/src/com/nvlad/yii2support/database/settings/SettingsForm.java
index cb29107..5f6ffa1 100644
--- a/src/com/nvlad/yii2support/database/settings/SettingsForm.java
+++ b/src/com/nvlad/yii2support/database/settings/SettingsForm.java
@@ -1,5 +1,7 @@
 package com.nvlad.yii2support.database.settings;
 
+import com.intellij.database.psi.DbDataSource;
+import com.intellij.database.psi.DbPsiFacade;
 import com.intellij.openapi.options.Configurable;
 import com.intellij.openapi.project.Project;
 import com.intellij.ui.IdeBorderFactory;
@@ -25,6 +27,7 @@ public class SettingsForm implements Configurable {
     private JCheckBox insertTableNamesWithCheckBox;
     private JPanel tablePanel;
     private JPanel migrationPanel;
+    private JComboBox<DbSelectItem> DbSourceSelect;
     private Yii2SupportSettings settings;
 
     public SettingsForm(Project project) {
@@ -43,6 +46,14 @@ public class SettingsForm implements Configurable {
         UIUtil.addBorder(tablePanel, IdeBorderFactory.createTitledBorder("Table Prefix Support", false));
         UIUtil.addBorder(migrationPanel, IdeBorderFactory.createTitledBorder("Migrations", false));
 
+        for (DbDataSource source : DbPsiFacade.getInstance(project).getDataSources()) {
+            DbSelectItem item = new DbSelectItem(source.getUniqueId(), source.getName());
+            DbSourceSelect.addItem(item);
+            if(source.getUniqueId().equals(settings.dataSourceId)) {
+                DbSourceSelect.setSelectedItem(item);
+            }
+        }
+
 //        migrationPanel = new MigrationPanel(myProject);
     }
 
@@ -76,13 +87,15 @@ public class SettingsForm implements Configurable {
     public boolean isModified() {
         return !tablePrefixTextbox.getText().equals(settings.tablePrefix)
                 || settings.insertWithTablePrefix != insertTableNamesWithCheckBox.isSelected()
-                || !getCommandList().equals(((MigrationPanel) migrationPanel).getData());
+                || !getCommandList().equals(((MigrationPanel) migrationPanel).getData())
+                || !(getSelectedDataSourceId().equals(settings.dataSourceId));
     }
 
     @Override
     public void apply() {
         settings.tablePrefix = tablePrefixTextbox.getText();
         settings.insertWithTablePrefix = insertTableNamesWithCheckBox.isSelected();
+        settings.dataSourceId = getSelectedDataSourceId();
 
         List<MigrateCommand> newCommandList = new SmartList<>();
         for (MigrateCommand command : ((MigrationPanel) migrationPanel).getData()) {
@@ -126,7 +139,38 @@ public class SettingsForm implements Configurable {
         return settings;
     }
 
+    private String getSelectedDataSourceId() {
+        if(DbSourceSelect.getSelectedItem() instanceof DbSelectItem){
+            return ((DbSelectItem) DbSourceSelect.getSelectedItem()).getKey();
+        }
+        return "";
+    }
+
     private List<MigrateCommand> getCommandList() {
         return getSettings().migrateCommands;
     }
+
+    static class DbSelectItem
+    {
+        private final String key;
+        private final String name;
+
+        public DbSelectItem(String key, String name)
+        {
+            this.key = key;
+            this.name = name;
+        }
+
+        @Override
+        public String toString()
+        {
+            return name;
+        }
+
+        public String getKey()
+        {
+            return key;
+        }
+    }
+
 }
diff --git a/src/com/nvlad/yii2support/errorreport/ErrorReportHandler.java b/src/com/nvlad/yii2support/errorreport/ErrorReportHandler.java
index 10db210..4454847 100644
--- a/src/com/nvlad/yii2support/errorreport/ErrorReportHandler.java
+++ b/src/com/nvlad/yii2support/errorreport/ErrorReportHandler.java
@@ -18,15 +18,15 @@ public class ErrorReportHandler extends ErrorReportSubmitter {
     }
 
     @Override
-    public boolean submit(@NotNull IdeaLoggingEvent[] events, @Nullable String additionalInfo, @NotNull Component parentComponent, @NotNull Consumer<SubmittedReportInfo> consumer) {
-        for (IdeaLoggingEvent event : events) {
+    public boolean submit(@NotNull IdeaLoggingEvent [] events, @Nullable String additionalInfo, @NotNull Component parentComponent, @NotNull Consumer<? super SubmittedReportInfo> consumer) {
+       /* for (IdeaLoggingEvent event : events) {
             Throwable throwable = event.getThrowable();
             if (event.getData() instanceof AbstractMessage) {
                 throwable = ((AbstractMessage) event.getData()).getThrowable();
             }
 
             SentryErrorReporter.submitErrorReport(throwable, additionalInfo, consumer);
-        }
+        }*/
 
         return true;
     }
diff --git a/src/com/nvlad/yii2support/forms/ActiveFormCompletionContributor.java b/src/com/nvlad/yii2support/forms/ActiveFormCompletionContributor.java
index 9bde967..3e42d22 100644
--- a/src/com/nvlad/yii2support/forms/ActiveFormCompletionContributor.java
+++ b/src/com/nvlad/yii2support/forms/ActiveFormCompletionContributor.java
@@ -45,7 +45,7 @@ public class ActiveFormCompletionContributor extends com.intellij.codeInsight.co
                     return;
                 Variable modelVar = (Variable)possibleVariable;
 
-                PhpClass modelClass = ClassUtils.getElementType(modelVar);
+                PhpClass modelClass = ClassUtils.getElementType(modelVar, false);
                 if (modelClass == null)
                     return;
 
diff --git a/src/com/nvlad/yii2support/migrations/services/MigrationService.java b/src/com/nvlad/yii2support/migrations/services/MigrationService.java
index 6facf01..4ced0b9 100644
--- a/src/com/nvlad/yii2support/migrations/services/MigrationService.java
+++ b/src/com/nvlad/yii2support/migrations/services/MigrationService.java
@@ -1,5 +1,6 @@
 package com.nvlad.yii2support.migrations.services;
 
+import com.intellij.openapi.application.ApplicationManager;
 import com.intellij.openapi.project.IndexNotReadyException;
 import com.intellij.openapi.project.Project;
 import com.intellij.openapi.vfs.VirtualFile;
@@ -54,6 +55,10 @@ public class MigrationService {
     }
 
     public void sync() {
+        ApplicationManager.getApplication().runReadAction(this::_sync);
+    }
+
+    public void _sync() {
         Collection<PhpClass> migrations;
         try {
             migrations = myPhpIndex.getAllSubclasses("\\yii\\db\\MigrationInterface");
diff --git a/src/com/nvlad/yii2support/migrations/services/MigrationsVirtualFileMonitor.java b/src/com/nvlad/yii2support/migrations/services/MigrationsVirtualFileMonitor.java
index 88c98cc..1b76007 100644
--- a/src/com/nvlad/yii2support/migrations/services/MigrationsVirtualFileMonitor.java
+++ b/src/com/nvlad/yii2support/migrations/services/MigrationsVirtualFileMonitor.java
@@ -1,5 +1,8 @@
 package com.nvlad.yii2support.migrations.services;
 
+import com.intellij.openapi.application.ApplicationManager;
+import com.intellij.openapi.application.ReadAction;
+import com.intellij.openapi.project.DumbService;
 import com.intellij.openapi.project.Project;
 import com.intellij.openapi.vfs.*;
 import com.intellij.psi.PsiFile;
@@ -34,14 +37,20 @@ public class MigrationsVirtualFileMonitor implements VirtualFileListener {
 
     @Override
     public void fileCreated(@NotNull VirtualFileEvent event) {
-        if (isMigrationFile(event.getFile())) {
-            service.sync();
-        }
+        ApplicationManager.getApplication().executeOnPooledThread(
+            () -> ApplicationManager.getApplication().runReadAction(
+                () -> {
+                    if (isMigrationFile(event)) {
+                        service.sync();
+                    }
+                }
+            )
+        );
     }
 
     @Override
     public void fileDeleted(@NotNull VirtualFileEvent event) {
-        service.sync();
+        ApplicationManager.getApplication().executeOnPooledThread(service::sync);
     }
 
     @Override
@@ -74,7 +83,8 @@ public class MigrationsVirtualFileMonitor implements VirtualFileListener {
 
     }
 
-    private boolean isMigrationFile(VirtualFile virtualFile) {
+    private boolean isMigrationFile(VirtualFileEvent event) {
+        VirtualFile virtualFile = event.getFile();
         PsiFile psiFile = PsiManager.getInstance(myProject).findFile(virtualFile);
         if (!(psiFile instanceof PhpFile)) {
             return false;
@@ -87,6 +97,10 @@ public class MigrationsVirtualFileMonitor implements VirtualFileListener {
                     continue;
                 }
 
+                if(DumbService.getInstance(myProject).isDumb()){
+                    DumbService.getInstance(myProject).runWhenSmart(() -> this.fileCreated(event));
+                    return false;
+                }
                 PhpIndex phpIndex = PhpIndex.getInstance(myProject);
                 if (ClassUtils.isClassInheritsOrEqual(phpClass, "\\yii\\db\\Migration", phpIndex)) {
                     return true;
diff --git a/src/com/nvlad/yii2support/migrations/ui/toolWindow/MigrationsToolWindowFactory.java b/src/com/nvlad/yii2support/migrations/ui/toolWindow/MigrationsToolWindowFactory.java
index d3bfa73..eb750eb 100644
--- a/src/com/nvlad/yii2support/migrations/ui/toolWindow/MigrationsToolWindowFactory.java
+++ b/src/com/nvlad/yii2support/migrations/ui/toolWindow/MigrationsToolWindowFactory.java
@@ -58,7 +58,7 @@ public class MigrationsToolWindowFactory implements ToolWindowFactory {
         }
 
         @Override
-        public void stateChanged() {
+        public void stateChanged(@NotNull ToolWindowManager toolWindowManager) {
             ToolWindow window = ToolWindowManager
                     .getInstance(myProject)
                     .getToolWindow(MigrationsToolWindowFactory.TOOL_WINDOW_ID);
@@ -75,7 +75,7 @@ public class MigrationsToolWindowFactory implements ToolWindowFactory {
                     service.addListener(serviceListener);
                     fileSystem.addVirtualFileListener(fileMonitor);
 
-                    ApplicationManager.getApplication().invokeLater(service::sync);
+                    ApplicationManager.getApplication().executeOnPooledThread(service::sync);
                 }
 
                 myToolWindowVisible = toolWindowVisible;
diff --git a/src/com/nvlad/yii2support/objectfactory/ObjectFactoryReference.java b/src/com/nvlad/yii2support/objectfactory/ObjectFactoryReference.java
index d6cc1b4..e30b9d0 100644
--- a/src/com/nvlad/yii2support/objectfactory/ObjectFactoryReference.java
+++ b/src/com/nvlad/yii2support/objectfactory/ObjectFactoryReference.java
@@ -15,7 +15,7 @@ import org.jetbrains.annotations.Nullable;
 public class ObjectFactoryReference extends PsiReferenceBase<PsiElement> {
     ObjectFactoryReference(@NotNull PsiElement element)
     {
-        super(element);
+        super(element, element.getTextRange());
     }
 
     @Nullable
diff --git a/src/com/nvlad/yii2support/objectfactory/ObjectFactoryUtils.java b/src/com/nvlad/yii2support/objectfactory/ObjectFactoryUtils.java
index 5f0d96f..4f5d11b 100644
--- a/src/com/nvlad/yii2support/objectfactory/ObjectFactoryUtils.java
+++ b/src/com/nvlad/yii2support/objectfactory/ObjectFactoryUtils.java
@@ -232,6 +232,9 @@ public class ObjectFactoryUtils {
             }
 
             PsiElement possiblePhpClass = ref.resolve();
+            if(possiblePhpClass instanceof Method){ // Since 2021.1 resolved into Method __construct() of BaseObject class
+                possiblePhpClass = ClassUtils.getClass(PhpIndex.getInstance(element.getProject()), ref.getFQN());
+            }
             if (!(possiblePhpClass instanceof PhpClass)) {
                 return null;
             }
diff --git a/src/com/nvlad/yii2support/typeprovider/ActiveRecordTypeProvider.java b/src/com/nvlad/yii2support/typeprovider/ActiveRecordTypeProvider.java
index 6641862..1e65aac 100644
--- a/src/com/nvlad/yii2support/typeprovider/ActiveRecordTypeProvider.java
+++ b/src/com/nvlad/yii2support/typeprovider/ActiveRecordTypeProvider.java
@@ -29,9 +29,11 @@ public class ActiveRecordTypeProvider  implements PhpTypeProvider4  {
     public PhpType getType(PsiElement psiElement) {
         if (psiElement instanceof MethodReference) {
             MethodReference methodReference = (MethodReference)psiElement;
-            if (methodReference.getName() == null)
+            String methodName = methodReference.getName();
+            if (methodName == null)
                 return null;
-            if (methodReference.getName().equals("one") || methodReference.getName().equals("all")) {
+            if (methodName.equals("one") || methodName.equals("all")
+                    || methodName.equals("each") || methodName.equals("batch")) {
                 String signature = methodReference.getSignature();
                 int beginIndex = signature.indexOf("\\");
                 int endIndex = signature.indexOf("|");
@@ -62,8 +64,10 @@ public class ActiveRecordTypeProvider  implements PhpTypeProvider4  {
         if (classInheritsFromAD) {
             if (s.endsWith(".one"))
                 phpType.add(classBySignature.getFQN());
-            else if (s.endsWith(".all")) {
+            else if (s.endsWith(".all") || s.endsWith(".each")) {
                 phpType.add(classBySignature.getFQN()+ "[]");
+            }else if (s.endsWith(".batch")) {
+                phpType.add(classBySignature.getFQN()+ "[][]");
             }
         }
         return phpType;
diff --git a/src/com/nvlad/yii2support/typeprovider/YiiTypeProvider.java b/src/com/nvlad/yii2support/typeprovider/YiiTypeProvider.java
index ef19903..312dc66 100644
--- a/src/com/nvlad/yii2support/typeprovider/YiiTypeProvider.java
+++ b/src/com/nvlad/yii2support/typeprovider/YiiTypeProvider.java
@@ -1,28 +1,32 @@
 package com.nvlad.yii2support.typeprovider;
 
-import com.intellij.codeInsight.completion.CompletionContributor;
 import com.intellij.openapi.project.Project;
 import com.intellij.psi.PsiElement;
+import com.intellij.psi.search.GlobalSearchScope;
+import com.intellij.util.indexing.FileBasedIndex;
 import com.jetbrains.php.PhpIndex;
 import com.jetbrains.php.lang.psi.elements.*;
 import com.jetbrains.php.lang.psi.elements.impl.VariableImpl;
 import com.jetbrains.php.lang.psi.resolve.types.PhpType;
-import com.jetbrains.php.lang.psi.resolve.types.PhpTypeProvider3;
+import com.jetbrains.php.lang.psi.resolve.types.PhpTypeProvider4;
 import com.nvlad.yii2support.common.ClassUtils;
 import com.nvlad.yii2support.common.MethodUtils;
+import com.nvlad.yii2support.common.PsiUtil;
+import com.nvlad.yii2support.configurations.ComponentsIndex;
 import com.nvlad.yii2support.objectfactory.ObjectFactoryUtils;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
 import java.util.Collection;
-import java.util.HashSet;
 import java.util.Set;
 
 /**
  * Created by oleg on 2017-06-08.
  */
-public class YiiTypeProvider extends CompletionContributor implements PhpTypeProvider3 {
+public class YiiTypeProvider implements PhpTypeProvider4 {
     final static char TRIM_KEY = '\u0197';
+    final static char TRIM_KEY2 = '\u0199';
+    final static char TRIM_KEY3 = '\u0193';
 
     @Override
     public char getKey() {
@@ -44,17 +48,90 @@ public class YiiTypeProvider extends CompletionContributor implements PhpTypePro
                 firstParam = getArrayCreationByVariableRef(firstParam);
             }
             if (firstParam instanceof ArrayCreationExpression) {
-                PhpType elem = getClassByArrayCreationOptimized((ArrayCreationExpression) firstParam);
-                if (elem != null) return elem;
+                return getClassByArrayCreationOptimized((ArrayCreationExpression) firstParam);
             }
             else {
                 return getClass(firstParam);
             }
+        }else if(psiElement instanceof FieldReference) {
+            String fieldName = PsiUtil.getYiiAppField((FieldReference) psiElement);
+            if (fieldName != null) {
+                return new PhpType().add("#" + this.getKey() + TRIM_KEY2 + fieldName + TRIM_KEY2);
+            }
+        }else if(psiElement instanceof Parameter){
+            PsiElement el = walkParents(psiElement,5); // Get "'value' => function()" element
+            if(el instanceof ArrayHashElement){
+                String s = getHashKeyContents(el);
+                if(s != null && s.equals("value")){
+                    PsiElement top = walkParents(el,6); // Get config array of widget
+                    if(top instanceof ArrayCreationExpression){
+                        for (PsiElement conf : top.getChildren()){
+                            String key = getHashKeyContents(conf);
+                            if(key != null && (key.equals("model") || key.equals("filterModel"))){
+                                PsiElement val = ((ArrayHashElement) conf).getValue();
+                                if(val instanceof Variable){
+                                    String signature = ((Variable) val).getSignature();
+                                    return new PhpType().add("#" + this.getKey() + TRIM_KEY3 + signature + TRIM_KEY3);
+                                }
+                            }
+                        }
+                    }
+                }
+            }
         }
-
         return null;
     }
 
+    @Override
+    public @Nullable PhpType complete(String s, Project project) {
+        PhpType phpType = new PhpType();
+
+        int trimIndex = s.indexOf(TRIM_KEY);
+        if (trimIndex > -1 && s.length() + 1 > trimIndex) {
+            String origSignature = s.substring(0, trimIndex);
+            if (origSignature.endsWith("\\Yii.createObject")) {
+                String variableRef = s.substring(trimIndex + 1);
+                final Collection<? extends PhpNamedElement> indexedVariabled = PhpIndex.getInstance(project).getBySignature(variableRef);
+                for (PhpNamedElement elem : indexedVariabled) {
+                    if (elem instanceof Field) {
+                        Field field = (Field) elem;
+                        if (field.getLastChild() instanceof ArrayCreationExpression) {
+                            PhpClass classByArray = ObjectFactoryUtils.findClassByArray((ArrayCreationExpression) field.getLastChild());
+                            if(classByArray != null) {
+                                phpType.add(classByArray.getType());
+                            }
+                        }
+                    }
+                }
+            }
+        }else {
+            int trimIndexStart = s.indexOf(TRIM_KEY2);
+            int trimIndexEnd = s.lastIndexOf(TRIM_KEY2);
+            if (trimIndexStart > -1 && trimIndexStart < trimIndexEnd) {
+                String fieldName = s.substring(trimIndexStart + 1, trimIndexEnd);
+                final GlobalSearchScope scope = GlobalSearchScope.projectScope(project);
+
+                for (String className : FileBasedIndex.getInstance().getValues(ComponentsIndex.identity, fieldName, scope)) {
+                    for (PhpClass phpClass : PhpIndex.getInstance(project).getAnyByFQN(className)) {
+                        phpType.add(phpClass.getType());
+                    }
+                }
+            }else{
+                trimIndexStart = s.indexOf(TRIM_KEY3);
+                trimIndexEnd = s.lastIndexOf(TRIM_KEY3);
+                if (trimIndexStart > -1 && trimIndexStart < trimIndexEnd) {
+                    String signature = s.substring(trimIndexStart + 1, trimIndexEnd);
+                    for (PhpNamedElement elem : PhpIndex.getInstance(project).getBySignature(signature)) {
+                        if(elem instanceof PhpClass) {
+                            phpType.add(elem.getType());
+                        }
+                    }
+                }
+            }
+        }
+        return phpType;
+    }
+
     @NotNull
     private PhpPsiElement getArrayCreationByVariableRef(PhpPsiElement firstParam) {
         Collection<? extends PhpNamedElement> localResolvedVariables = ((VariableImpl) firstParam).resolveLocal();
@@ -97,32 +174,31 @@ public class YiiTypeProvider extends CompletionContributor implements PhpTypePro
         return null;
     }
 
-//    @Override
-    public Collection<? extends PhpNamedElement> getBySignature(String s, Project project) {
-        Collection<PhpNamedElement> elements = new HashSet<>();
-        int trimIndex = s.indexOf(TRIM_KEY);
-        if (trimIndex > -1 && s.length() + 1 > trimIndex) {
-            String origSignature = s.substring(0, trimIndex);
-            if (origSignature.endsWith("\\Yii.createObject")) {
-                String variableRef = s.substring(trimIndex + 1);
-                final Collection<? extends PhpNamedElement> indexedVariabled = PhpIndex.getInstance(project).getBySignature(variableRef);
-                for (PhpNamedElement elem : indexedVariabled) {
-                    if (elem instanceof Field) {
-                        Field field = (Field) elem;
-                        if (field.getLastChild() instanceof ArrayCreationExpression) {
-                            PhpClass classByArray = ObjectFactoryUtils.findClassByArray((ArrayCreationExpression) field.getLastChild());
-                            elements.add(classByArray);
-                        }
-                    }
-                }
+    @Override
+    public Collection<? extends PhpNamedElement> getBySignature(String s, Set<String> set, int i, Project project) {
+        return null;
+    }
+
+    @Nullable
+    private PsiElement walkParents(PsiElement el, int level) {
+        PsiElement element = el;
+        for (int i = 0; i < level; i++) {
+            if (element == null) {
+                return null;
             }
+            element = element.getParent();
         }
-
-        return elements;
+        return element;
     }
 
-//    @Override
-    public Collection<? extends PhpNamedElement> getBySignature(String s, Set<String> set, int i, Project project) {
-        return getBySignature(s, project);
+    @Nullable
+    private String getHashKeyContents(PsiElement e) {
+        if (e instanceof ArrayHashElement) {
+            PhpPsiElement key = ((ArrayHashElement) e).getKey();
+            if (key instanceof StringLiteralExpression) {
+                return ((StringLiteralExpression) key).getContents();
+            }
+        }
+        return null;
     }
 }
diff --git a/src/com/nvlad/yii2support/utils/Yii2SupportSettings.java b/src/com/nvlad/yii2support/utils/Yii2SupportSettings.java
index ef93f4c..b3939de 100644
--- a/src/com/nvlad/yii2support/utils/Yii2SupportSettings.java
+++ b/src/com/nvlad/yii2support/utils/Yii2SupportSettings.java
@@ -26,6 +26,7 @@ public class Yii2SupportSettings implements PersistentStateComponent<Yii2Support
     // Database Settings
     public String tablePrefix = "";
     public boolean insertWithTablePrefix = false;
+    public String dataSourceId = "";
 
     // View Settings
     public String defaultViewExtension = "php";
diff --git a/src/com/nvlad/yii2support/validation/ValidationCompletionProvider.java b/src/com/nvlad/yii2support/validation/ValidationCompletionProvider.java
index c5f2310..08bc930 100644
--- a/src/com/nvlad/yii2support/validation/ValidationCompletionProvider.java
+++ b/src/com/nvlad/yii2support/validation/ValidationCompletionProvider.java
@@ -7,15 +7,12 @@ import com.intellij.codeInsight.lookup.LookupElementBuilder;
 import com.intellij.openapi.editor.Document;
 import com.intellij.psi.PsiElement;
 import com.intellij.util.ProcessingContext;
-import com.jetbrains.php.PhpIndex;
-import com.jetbrains.php.lang.psi.PhpFile;
 import com.jetbrains.php.lang.psi.elements.*;
 import com.nvlad.yii2support.common.ClassUtils;
 import com.nvlad.yii2support.common.DatabaseUtils;
 import com.nvlad.yii2support.common.PsiUtil;
 import com.nvlad.yii2support.validation.entities.Validator;
 import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -25,11 +22,11 @@ import java.util.List;
  */
 public class ValidationCompletionProvider extends CompletionProvider<CompletionParameters> {
     @Override
-    protected void addCompletions(@NotNull CompletionParameters completionParameters, ProcessingContext processingContext, @NotNull CompletionResultSet completionResultSet) {
+    protected void addCompletions(@NotNull CompletionParameters completionParameters, @NotNull ProcessingContext processingContext, @NotNull CompletionResultSet completionResultSet) {
         PsiElement position = completionParameters.getPosition();
-        PhpClass phpClass = getClassIfInRulesMethod(position);
         if (position.getParent() instanceof PhpExpression) {
             PhpExpression phpExpression = (PhpExpression) position.getParent();
+            PhpClass phpClass = ClassUtils.getClassIfInMethod(position,"rules");
             if (phpClass != null) {
                 RulePositionEnum getPosition = getPosition(position);
                 if (getPosition.equals(RulePositionEnum.FIELD)) {
@@ -38,7 +35,6 @@ public class ValidationCompletionProvider extends CompletionProvider<CompletionP
                         LookupElementBuilder lookupBuilder = buildLookup(field, phpExpression, false);
                         completionResultSet.addElement(lookupBuilder);
                     }
-
                     completionResultSet.addAllElements(items);
                 } else if (getPosition.equals(RulePositionEnum.TYPE)) {
                     List<Validator> validators = ValidationUtil.getAllValidators(phpClass);
@@ -155,37 +151,6 @@ public class ValidationCompletionProvider extends CompletionProvider<CompletionP
         return builder;
     }
 
-
-    @Nullable
-    private PhpClass getClassIfInRulesMethod(PsiElement position) {
-        PsiElement elem = position.getParent();
-        Method currentMethod = null;
-        PhpClass phpClass = null;
-        while (true) {
-            if (elem instanceof Method)
-                currentMethod = (Method) elem;
-            else if (elem instanceof PhpClass) {
-                phpClass = (PhpClass) elem;
-                break;
-            } else if (elem instanceof PhpFile)
-                break;
-            else if (elem == null) {
-                break;
-            }
-            elem = elem.getParent();
-        }
-        if (currentMethod != null && phpClass != null) {
-            if (ClassUtils.isClassInherit(phpClass, "\\yii\\base\\Model", PhpIndex.getInstance(position.getProject())) &&
-                    currentMethod.getName().equals("rules")) {
-                return phpClass;
-            } else
-                return null;
-
-        } else {
-            return null;
-        }
-    }
-
     private RulePositionEnum getPosition(PsiElement position) {
         PsiElement validationParameter;
         ArrayCreationExpression arrayCreationExpression;
diff --git a/src/com/nvlad/yii2support/views/index/ViewFileIndex.java b/src/com/nvlad/yii2support/views/index/ViewFileIndex.java
index 2a36c53..553c3d9 100644
--- a/src/com/nvlad/yii2support/views/index/ViewFileIndex.java
+++ b/src/com/nvlad/yii2support/views/index/ViewFileIndex.java
@@ -60,7 +60,7 @@ public class ViewFileIndex extends FileBasedIndexExtension<String, ViewInfo> {
 
     @Override
     public int getVersion() {
-        return 30;
+        return 33;
     }
 
     @NotNull
@@ -86,7 +86,7 @@ public class ViewFileIndex extends FileBasedIndexExtension<String, ViewInfo> {
             }
 
             final String absolutePath = inputData.getFile().getPath();
-            System.out.println("ViewDataIndexer.map > " + absolutePath + " => " + resolve.key);
+            //System.out.println("ViewDataIndexer.map > " + absolutePath + " => " + resolve.key);
 
             Map<String, ViewInfo> map = new HashMap<>();
             ViewInfo viewInfo = new ViewInfo(inputData);
@@ -97,12 +97,12 @@ public class ViewFileIndex extends FileBasedIndexExtension<String, ViewInfo> {
             map.put(resolve.key, viewInfo);
             if (resolve.key.startsWith("@app/modules/") && !resolve.relativePath.startsWith("/modules/")) {
                 map.put("@app/views/modules" + resolve.key.substring(12), viewInfo);
-                System.out.println("ViewDataIndexer.map > " + absolutePath + " => @app/views/modules" + resolve.key.substring(12));
+                //System.out.println("ViewDataIndexer.map > " + absolutePath + " => @app/views/modules" + resolve.key.substring(12));
             }
 
             if (resolve.key.startsWith("@app/widgets/") && !resolve.relativePath.startsWith("/widgets/")) {
                 map.put("@app/views/widgets" + resolve.key.substring(12), viewInfo);
-                System.out.println("ViewDataIndexer.map > " + absolutePath + " => @app/views/widgets" + resolve.key.substring(12));
+                //System.out.println("ViewDataIndexer.map > " + absolutePath + " => @app/views/widgets" + resolve.key.substring(12));
             }
 
             return map;
@@ -112,7 +112,7 @@ public class ViewFileIndex extends FileBasedIndexExtension<String, ViewInfo> {
     private static class ViewInfoDataExternalizer implements DataExternalizer<ViewInfo> {
         @Override
         public void save(@NotNull DataOutput dataOutput, @NotNull ViewInfo viewInfo) throws IOException {
-            System.out.println("ViewInfoDataExternalizer.save ==> " + viewInfo.fileUrl);
+            //System.out.println("ViewInfoDataExternalizer.save ==> " + viewInfo.fileUrl);
 
             writeString(dataOutput, viewInfo.fileUrl);
             writeString(dataOutput, viewInfo.application);
@@ -137,7 +137,7 @@ public class ViewFileIndex extends FileBasedIndexExtension<String, ViewInfo> {
                 viewInfo.parameters.add(readString(dataInput));
             }
 
-            System.out.println("ViewInfoDataExternalizer.read <== " + viewInfo.fileUrl);
+            //System.out.println("ViewInfoDataExternalizer.read <== " + viewInfo.fileUrl);
             return viewInfo;
         }
 
diff --git a/src/com/nvlad/yii2support/views/util/ViewUtil.java b/src/com/nvlad/yii2support/views/util/ViewUtil.java
index f5f9f5c..7b181db 100644
--- a/src/com/nvlad/yii2support/views/util/ViewUtil.java
+++ b/src/com/nvlad/yii2support/views/util/ViewUtil.java
@@ -45,7 +45,7 @@ public class ViewUtil {
         }
 
         String path = absolutePath.substring(projectBaseDirLength);
-        if (!path.startsWith("/vendor/")) {
+        //if (!path.startsWith("/vendor/")) {
             ViewResolve result = new ViewResolve();
             result.application = YiiApplicationUtils.getApplicationName(virtualFile, project);
             result.theme = "";
@@ -80,9 +80,9 @@ public class ViewUtil {
             result.key = path;
 
             return result;
-        }
+        //}
 
-        return null;
+        //return null;
     }
 
     @Nullable
@@ -239,28 +239,51 @@ public class ViewUtil {
         return patterns;
     }
 
+    @Nullable
+    public static String getModuleName(String fileUrl){
+        if(fileUrl.startsWith("/")){
+            fileUrl = fileUrl.substring(1);
+        }
+        if(fileUrl.contains("/views")){
+            int idx = fileUrl.indexOf("/views");
+            return fileUrl.substring(0, idx);
+        }else if(fileUrl.contains("/controllers")){
+            int idx = fileUrl.indexOf("/controllers");
+            return fileUrl.substring(0, idx);
+        }
+        return null;
+    }
+
     @NotNull
     private static ViewResolve resolveViewFromController(PhpClass clazz, String value) {
         ViewResolve result = new ViewResolve(ViewResolveFrom.Controller);
         final String classFQN = clazz.getFQN().replace('\\', '/');
         StringBuilder key = new StringBuilder("@app");
         String path = deletePathPart(classFQN);
-        if (path.startsWith("/modules/")) {
-            key.append("/modules");
+
+        String moduleName = getModuleName(classFQN);
+        int controllersIdx = classFQN.indexOf("/controllers");
+        if(moduleName != null && controllersIdx > -1){
+            result.application = moduleName;
+            path = classFQN.substring(controllersIdx+12);
+        }else {
+            if (path.startsWith("/modules/")) {
+                key.append("/modules");
+                path = deletePathPart(path);
+            }
+            int controllersPathPartPosition = path.indexOf("/controllers/");
+            if (controllersPathPartPosition == -1) {
+                throw new InvalidPathException(path, "Not found \"controllers\" directory.");
+            }
+            result.application = getFirstPathPart(classFQN);
+            if (controllersPathPartPosition > 0) {
+                final String module = path.substring(0, controllersPathPartPosition);
+                key.append(module);
+                path = path.substring(controllersPathPartPosition);
+                result.module = module;
+            }
             path = deletePathPart(path);
         }
-        int controllersPathPartPosition = path.indexOf("/controllers/");
-        if (controllersPathPartPosition == -1) {
-            throw new InvalidPathException(path, "Not found \"controllers\" directory.");
-        }
-        result.application = getFirstPathPart(classFQN);
-        if (controllersPathPartPosition > 0) {
-            final String module = path.substring(0, controllersPathPartPosition);
-            key.append(module);
-            path = path.substring(controllersPathPartPosition);
-            result.module = module;
-        }
-        path = deletePathPart(path);
         key.append("/views");
         if (value.startsWith("/")) {
             result.key = normalizePath(key + value);
@@ -341,7 +364,7 @@ public class ViewUtil {
     private static String getFirstPathPart(String path) {
         int start = path.startsWith("/") ? 1 : 0;
         int end = path.indexOf('/', start) - 1;
-        return end == -1 ? path : path.substring(start, end);
+        return end == -1 ? path : path.substring(start, end+1);
     }
 
     private static String normalizePath(String path) {
diff --git a/src/com/nvlad/yii2support/widgetsconfig/WidgetConfigCompletionContributor.java b/src/com/nvlad/yii2support/widgetsconfig/WidgetConfigCompletionContributor.java
new file mode 100644
index 0000000..0322df5
--- /dev/null
+++ b/src/com/nvlad/yii2support/widgetsconfig/WidgetConfigCompletionContributor.java
@@ -0,0 +1,28 @@
+package com.nvlad.yii2support.widgetsconfig;
+
+import com.intellij.codeInsight.completion.CompletionContributor;
+import com.intellij.codeInsight.completion.CompletionType;
+import com.intellij.patterns.ElementPattern;
+import com.intellij.patterns.PlatformPatterns;
+import com.intellij.psi.PsiElement;
+import com.jetbrains.php.lang.psi.elements.*;
+import com.nvlad.yii2support.common.Patterns;
+
+public class WidgetConfigCompletionContributor extends CompletionContributor {
+    public WidgetConfigCompletionContributor() {
+        extend(CompletionType.BASIC, ElementPattern(), new WidgetConfigCompletionProvider());
+    }
+
+    private static ElementPattern<PsiElement> ElementPattern() {
+        return PlatformPatterns.psiElement()
+                .withParent(PlatformPatterns.psiElement(StringLiteralExpression.class)
+                        .withParent(PlatformPatterns.or(
+                                PlatformPatterns.psiElement().withParent(ArrayCreationExpression.class),
+                                PlatformPatterns.psiElement().withParent(ArrayAccessExpression.class),
+                                PlatformPatterns.psiElement(PhpPsiElement.class),
+                                Patterns.withHashKey().withParent(PlatformPatterns.psiElement().withParent(ArrayCreationExpression.class))
+                                )
+                        )
+                );
+    }
+}
diff --git a/src/com/nvlad/yii2support/widgetsconfig/WidgetConfigCompletionProvider.java b/src/com/nvlad/yii2support/widgetsconfig/WidgetConfigCompletionProvider.java
new file mode 100644
index 0000000..dbc0de4
--- /dev/null
+++ b/src/com/nvlad/yii2support/widgetsconfig/WidgetConfigCompletionProvider.java
@@ -0,0 +1,212 @@
+package com.nvlad.yii2support.widgetsconfig;
+
+import com.intellij.codeInsight.completion.*;
+import com.intellij.codeInsight.lookup.LookupElementBuilder;
+import com.intellij.icons.AllIcons;
+import com.intellij.openapi.editor.Document;
+import com.intellij.openapi.project.Project;
+import com.intellij.psi.PsiElement;
+import com.intellij.psi.search.GlobalSearchScope;
+import com.intellij.util.ProcessingContext;
+import com.intellij.util.indexing.FileBasedIndex;
+import com.jetbrains.php.PhpIndex;
+import com.jetbrains.php.lang.psi.elements.*;
+import com.nvlad.yii2support.common.ClassUtils;
+import com.nvlad.yii2support.configurations.ComponentsIndex;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+public class WidgetConfigCompletionProvider extends CompletionProvider<CompletionParameters> {
+    @Override
+    protected void addCompletions(@NotNull CompletionParameters completionParameters, @NotNull ProcessingContext processingContext, @NotNull CompletionResultSet completionResultSet) {
+        boolean isArrayItem = false;
+        final Project project = completionParameters.getPosition().getProject();
+        final PhpIndex phpIndex = PhpIndex.getInstance(project);
+
+        // Case of first level in attribute/columns array
+        PsiElement top = walkParents(completionParameters,8);
+        if(!(top instanceof MethodReference)) {
+            // Case of ['?'] in attribute/column array
+            top = walkParents(completionParameters, 10);
+            if(top instanceof MethodReference){
+                if (walkParents(completionParameters, 3) instanceof ArrayCreationExpression) {
+                    isArrayItem = true;
+                }
+            }else{
+                // Case of ['attribute' => '?'] in array
+                top = walkParents(completionParameters, 11);
+            }
+        }
+
+        PhpClass modelClass = null;
+
+        if(top instanceof MethodReference){
+            PsiElement method = ((MethodReference) top).resolve();
+            if(method instanceof Method && ((Method) method).getName().equals("widget")){
+                for(PsiElement child : top.getChildren()){
+                    if(child instanceof ParameterList){
+                        PsiElement[] params = ((ParameterList) child).getParameters();
+                        for(PsiElement conf : params[0].getChildren()){
+                            String key = getHashKeyContents(conf);
+                            // 'model' key for DetailView widget and 'filterModel' for GridView
+                            if(key != null && (key.equals("model") || key.equals("filterModel"))){
+                                PsiElement val = ((ArrayHashElement) conf).getValue();
+                                if(val instanceof Variable){
+                                    modelClass = ClassUtils.getClassByVariable((Variable) val);
+                                }
+                            }
+                        }
+                    }
+                }
+            }
+        }
+
+        if(isArrayItem){
+            PhpClass phpClass = ClassUtils.getPhpClassByCallChain((MethodReference) top);
+            if(phpClass != null) {
+                if (ClassUtils.isClassInheritsOrEqual(phpClass, "\\yii\\widgets\\DetailView", phpIndex)) {
+                    String[] attributesString = new String[]{"attribute", "label", "format"};
+                    String[] attributes = new String[]{"value", "visible", "contentOptions", "captionOptions"};
+
+                    for (String attribute : attributesString) {
+                        completionResultSet.addElement(buildLookup(attribute, true));
+                    }
+                    for (String attribute : attributes) {
+                        completionResultSet.addElement(buildLookup(attribute, false));
+                    }
+                }else if(ClassUtils.isClassInheritsOrEqual(phpClass, "\\yii\\widgets\\BaseListView", phpIndex)){
+                    completionResultSet.addElement(buildValueClosureLookup(false));
+                }
+            }
+        } else {
+            final PsiElement element = completionParameters.getPosition().getParent();
+            if (!(element instanceof PhpExpression)) {
+                return;
+            }
+
+            String key = getHashKeyContents(element.getParent().getParent());
+            if(key != null) {
+                if (key.equals("format")) {
+                    doFormatterCompletion(completionResultSet, project, phpIndex);
+                    return;
+                }else if (!key.equals("attribute")){
+                    return;
+                }
+            }
+
+            if(element instanceof StringLiteralExpression){
+                String attributeString = ((StringLiteralExpression) element).getContents();
+                int elCount = attributeString.split(":").length;
+                if(elCount == 2){ // Case 'field:' to call formatter
+                    completionResultSet = completionResultSet.withPrefixMatcher(
+                            attributeString.substring(attributeString.indexOf(':')+1)
+                                .replace("IntellijIdeaRulezzz ",""));
+                    doFormatterCompletion(completionResultSet, project, phpIndex);
+                    return;
+                }else if(elCount > 2){
+                    return;
+                }
+            }
+
+            if(modelClass != null) {
+                for (Field field : ClassUtils.getClassFields(modelClass)) {
+                    LookupElementBuilder lookupBuilder = buildLookup(field);
+                    completionResultSet.addElement(lookupBuilder);
+                }
+            }
+        }
+    }
+
+    private void doFormatterCompletion(@NotNull CompletionResultSet completionResultSet, Project project, PhpIndex phpIndex){
+        final GlobalSearchScope scope = GlobalSearchScope.projectScope(project);
+
+        PhpClass completionClass = null;
+        for (String className : FileBasedIndex.getInstance().getValues(ComponentsIndex.identity, "formatter", scope)) {
+            completionClass = PhpIndex.getInstance(project).getAnyByFQN(className).iterator().next();
+        }
+        if(completionClass == null) {
+            completionClass = ClassUtils.getClass(phpIndex, "yii\\i18n\\Formatter");
+        }
+        if (completionClass != null) {
+            for (Method method : ClassUtils.getFormatterAsMethods(completionClass)) {
+                LookupElementBuilder lookupBuilder = buildLookup(method);
+                completionResultSet.addElement(lookupBuilder);
+            }
+        }
+    }
+
+    @Nullable
+    private PsiElement walkParents(CompletionParameters parameters, int level) {
+        PsiElement element = parameters.getPosition();
+        for (int i = 0; i < level; i++) {
+            if (element == null) {
+                return null;
+            }
+            element = element.getParent();
+        }
+        return element;
+    }
+
+    @NotNull
+    private LookupElementBuilder buildLookup(PhpClassMember field) {
+        String lookupString = field instanceof Method ? ClassUtils.getAsPropertyName((Method) field) : field.getName();
+        LookupElementBuilder builder = LookupElementBuilder.create(field, lookupString).withIcon(field.getIcon());
+        if (field instanceof Field) {
+            builder = builder.withTypeText(field.getType().toString());
+        }
+
+        return buildLookup(builder, false, false);
+    }
+
+    @NotNull
+    private LookupElementBuilder buildLookup(String field, boolean addString) {
+        LookupElementBuilder builder = LookupElementBuilder.create(field).withIcon(AllIcons.Nodes.Variable);
+        return buildLookup(builder,true, addString);
+    }
+
+    @NotNull
+    private LookupElementBuilder buildLookup(LookupElementBuilder builder, boolean isArrayItem, boolean addString) {
+        return builder.withInsertHandler((insertionContext, lookupElement) -> {
+            Document document = insertionContext.getDocument();
+            int insertPosition = insertionContext.getSelectionEndOffset();
+            if (isArrayItem) {
+                document.insertString(insertPosition + 1, " => "+(addString?"''":"")+",");
+                insertPosition += 5;
+                if(addString){
+                    insertPosition++;
+                }
+                insertionContext.getEditor().getCaretModel().getCurrentCaret().moveToOffset(insertPosition);
+            }
+        });
+    }
+
+    @NotNull
+    private LookupElementBuilder buildValueClosureLookup(boolean allParams){
+        return LookupElementBuilder.create("value")
+            .withIcon(AllIcons.Nodes.Function)
+            .withTypeText(allParams?"function ($model, $key, $index, $column)":"function ($data) {}")
+            .withInsertHandler((insertionContext, lookupElement) -> {
+                Document document = insertionContext.getDocument();
+                int insertPosition = insertionContext.getSelectionEndOffset();
+                if(allParams) {
+                    document.insertString(insertPosition + 1, " => function ($model, $key, $index, $column) {},");
+                    insertPosition += 47;
+                }else{
+                    document.insertString(insertPosition + 1, " => function ($data) {},");
+                    insertPosition += 23;
+                }
+                insertionContext.getEditor().getCaretModel().getCurrentCaret().moveToOffset(insertPosition);
+        });
+    }
+
+    @Nullable
+    private String getHashKeyContents(PsiElement e) {
+        if (e instanceof ArrayHashElement) {
+            PhpPsiElement key = ((ArrayHashElement) e).getKey();
+            if (key instanceof StringLiteralExpression) {
+                return ((StringLiteralExpression) key).getContents();
+            }
+        }
+        return null;
+    }
+}
