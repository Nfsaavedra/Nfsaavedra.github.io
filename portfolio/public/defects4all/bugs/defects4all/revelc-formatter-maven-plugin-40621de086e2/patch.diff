diff --git a/CHANGELOG.md b/CHANGELOG.md
index b99ed91..520535d 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -155,3 +155,8 @@ ver 2.16.0
 ver 2.17.0
 ==========
 - Support Eclipse 2021-09 (4.21, JDT 3.27)
+- Added patch to cssparser to retain ie 7,8,9 hack for \9
+
+ver 2.17.1
+==========
+- Fix processing on EOL markers making it accurate (mixed match resulted in odd behavior)
diff --git a/pom.xml b/pom.xml
index 2a82af1..61dc1ab 100644
--- a/pom.xml
+++ b/pom.xml
@@ -353,7 +353,7 @@
         <plugin>
           <groupId>net.revelc.code.formatter</groupId>
           <artifactId>formatter-maven-plugin</artifactId>
-          <version>2.16.0</version>
+          <version>2.17.0</version>
           <configuration>
             <configFile>${project.basedir}/src/main/resources/formatter-maven-plugin/eclipse/java.xml</configFile>
             <configJsFile>${project.basedir}/src/main/resources/formatter-maven-plugin/eclipse/javascript.xml</configJsFile>
diff --git a/src/main/java/net/revelc/code/formatter/AbstractCacheableFormatter.java b/src/main/java/net/revelc/code/formatter/AbstractCacheableFormatter.java
index c2aaac1..e64fa03 100755
--- a/src/main/java/net/revelc/code/formatter/AbstractCacheableFormatter.java
+++ b/src/main/java/net/revelc/code/formatter/AbstractCacheableFormatter.java
@@ -17,12 +17,15 @@ import java.io.File;
 import java.io.IOException;
 import java.nio.charset.Charset;
 import java.util.Map;
-import java.util.Objects;
 
 import org.apache.maven.plugin.logging.Log;
 import org.eclipse.jface.text.BadLocationException;
 import org.eclipse.text.edits.MalformedTreeException;
 
+import net.revelc.code.formatter.css.CssFormatter;
+import net.revelc.code.formatter.html.HTMLFormatter;
+import net.revelc.code.formatter.xml.XMLFormatter;
+
 /**
  * @author marvin.froeder
  */
@@ -54,6 +57,9 @@ public abstract class AbstractCacheableFormatter {
             if (formattedCode == null) {
                 this.log.debug("Nothing formatted. Try to fix line endings.");
                 formattedCode = fixLineEnding(originalCode, ending);
+            } else if (this instanceof CssFormatter || this instanceof HTMLFormatter || this instanceof XMLFormatter) {
+                this.log.debug("Formatted but line endings not supported by tooling. Try to fix line endings.");
+                formattedCode = fixLineEnding(formattedCode, ending);
             }
 
             if (formattedCode == null) {
@@ -75,18 +81,12 @@ public abstract class AbstractCacheableFormatter {
             return null;
         }
 
-        LineEnding current = LineEnding.determineLineEnding(code);
-        if (current == LineEnding.UNKNOWN) {
-            return null;
-        }
-        if (current == ending) {
-            return null;
-        }
-        if (ending == LineEnding.AUTO && Objects.equals(current.getChars(), ending.getChars())) {
-            return null;
-        }
+        // Normalize all line endings
+        code = code.replace(LineEnding.CRLF.getChars(), LineEnding.LF.getChars());
+        code = code.replace(LineEnding.CR.getChars(), LineEnding.LF.getChars());
 
-        return code.replace(current.getChars(), ending.getChars());
+        // Replace line endings with chosen style
+        return code.replace(LineEnding.LF.getChars(), ending.getChars());
     }
 
     protected abstract String doFormat(String code, LineEnding ending) throws IOException, BadLocationException;
