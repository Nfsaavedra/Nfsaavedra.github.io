diff --git a/src/test/java/com/example/authorizationserver/scim/api/ScimGroupRestControllerIntegrationTest.java b/src/test/java/com/example/authorizationserver/scim/api/ScimGroupRestControllerIntegrationTest.java
index 4be3240..5428c35 100644
--- a/src/test/java/com/example/authorizationserver/scim/api/ScimGroupRestControllerIntegrationTest.java
+++ b/src/test/java/com/example/authorizationserver/scim/api/ScimGroupRestControllerIntegrationTest.java
@@ -3,7 +3,10 @@ package com.example.authorizationserver.scim.api;
 import com.example.authorizationserver.scim.api.resource.ScimGroupResource;
 import com.example.authorizationserver.scim.api.resource.mapper.ScimGroupListResourceMapper;
 import com.example.authorizationserver.scim.api.resource.mapper.ScimGroupResourceMapper;
+import com.example.authorizationserver.scim.model.ScimEmailEntity;
 import com.example.authorizationserver.scim.model.ScimGroupEntity;
+import com.example.authorizationserver.scim.model.ScimUserEntity;
+import com.example.authorizationserver.scim.model.ScimUserGroupEntity;
 import com.example.authorizationserver.scim.service.ScimService;
 import com.example.authorizationserver.security.client.RegisteredClientDetailsService;
 import com.example.authorizationserver.security.user.EndUserDetailsService;
@@ -17,19 +20,29 @@ import org.springframework.boot.test.context.TestConfiguration;
 import org.springframework.boot.test.mock.mockito.MockBean;
 import org.springframework.context.annotation.Bean;
 import org.springframework.http.MediaType;
+import org.springframework.http.ResponseEntity;
 import org.springframework.restdocs.RestDocumentationContextProvider;
 import org.springframework.restdocs.RestDocumentationExtension;
 import org.springframework.test.util.ReflectionTestUtils;
 import org.springframework.test.web.servlet.MockMvc;
 import org.springframework.test.web.servlet.setup.MockMvcBuilders;
+import org.springframework.web.bind.annotation.DeleteMapping;
+import org.springframework.web.bind.annotation.PathVariable;
+import org.springframework.web.bind.annotation.PutMapping;
+import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.context.WebApplicationContext;
+import org.springframework.web.servlet.support.ServletUriComponentsBuilder;
 
+import javax.validation.Valid;
+import java.net.URI;
 import java.util.List;
 import java.util.Optional;
+import java.util.Set;
 import java.util.UUID;
 
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.BDDMockito.given;
+import static org.mockito.Mockito.when;
 import static org.springframework.restdocs.mockmvc.MockMvcRestDocumentation.document;
 import static org.springframework.restdocs.mockmvc.MockMvcRestDocumentation.documentationConfiguration;
 import static org.springframework.restdocs.operation.preprocess.Preprocessors.prettyPrint;
@@ -141,4 +154,58 @@ class ScimGroupRestControllerIntegrationTest {
                 .andExpect(status().is2xxSuccessful())
                 .andDo(document("deleteGroup"));
     }
+
+    @Test
+    void updateGroup() throws Exception {
+        UUID groupIdentifier = UUID.randomUUID();
+        ScimGroupEntity scimGroupEntity = new ScimGroupEntity(groupIdentifier, "123", "test_group", null);
+        ReflectionTestUtils.setField(scimGroupEntity, "version", 1L);
+        given(scimService.updateGroup(any())).willReturn(scimGroupEntity);
+
+        ScimGroupResource scimGroupResource = new ScimGroupResourceMapper().mapEntityToResource(scimGroupEntity, "http://localhost:9090/api/Groups/" + groupIdentifier);
+
+        mockMvc
+                .perform(put(ScimGroupRestController.GROUP_ENDPOINT + "/{groupid}", groupIdentifier)
+                        .contentType(MediaType.APPLICATION_JSON)
+                        .content(objectMapper.writeValueAsString(scimGroupResource)))
+                .andDo(print())
+                .andExpect(status().is2xxSuccessful())
+                .andDo(document("updateGroup"));
+    }
+
+    @Test
+    void addMemberToGroup() throws Exception {
+        UUID userIdentifier = UUID.randomUUID();
+        UUID groupIdentifier = UUID.randomUUID();
+
+        ScimGroupEntity scimGroupEntity = new ScimGroupEntity(groupIdentifier, "123", "test_group", null);
+        ReflectionTestUtils.setField(scimGroupEntity, "version", 1L);
+
+        when(scimService.findGroupByIdentifier(any())).thenReturn(Optional.of(scimGroupEntity));
+
+        mockMvc
+                .perform(put(ScimGroupRestController.GROUP_ENDPOINT + "/{groupid}/members/{userId}", groupIdentifier, userIdentifier)
+                        .contentType(MediaType.APPLICATION_JSON))
+                .andDo(print())
+                .andExpect(status().is2xxSuccessful())
+                .andDo(document("addMemberToGroup"));
+    }
+
+    @Test
+    void removeMemberFromGroup() throws Exception {
+        UUID userIdentifier = UUID.randomUUID();
+        UUID groupIdentifier = UUID.randomUUID();
+
+        ScimGroupEntity scimGroupEntity = new ScimGroupEntity(groupIdentifier, "123", "test_group", null);
+        ReflectionTestUtils.setField(scimGroupEntity, "version", 1L);
+
+        when(scimService.findGroupByIdentifier(any())).thenReturn(Optional.of(scimGroupEntity));
+
+        mockMvc
+                .perform(delete(ScimGroupRestController.GROUP_ENDPOINT + "/{groupid}/members/{userId}", groupIdentifier, userIdentifier)
+                        .contentType(MediaType.APPLICATION_JSON))
+                .andDo(print())
+                .andExpect(status().is2xxSuccessful())
+                .andDo(document("removeMemberFromGroup"));
+    }
 }
