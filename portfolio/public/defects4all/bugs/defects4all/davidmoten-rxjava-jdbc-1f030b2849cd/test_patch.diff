diff --git a/src/test/java/com/github/davidmoten/rx/jdbc/DatabaseTestBase.java b/src/test/java/com/github/davidmoten/rx/jdbc/DatabaseTestBase.java
index a33a578..055c367 100644
--- a/src/test/java/com/github/davidmoten/rx/jdbc/DatabaseTestBase.java
+++ b/src/test/java/com/github/davidmoten/rx/jdbc/DatabaseTestBase.java
@@ -109,7 +109,8 @@ public abstract class DatabaseTestBase {
 				.toBlocking().single();
 		assertEquals(3, count);
 	}
-
+	
+	
 	@Test
 	public void testTransactionUsingCount() {
 		Database db = db();
@@ -1410,7 +1411,7 @@ public abstract class DatabaseTestBase {
 		assertIs(3, count);
 	}
 
-	private static class CountDownConnectionProvider implements
+	public static class CountDownConnectionProvider implements
 			ConnectionProvider {
 		private final ConnectionProvider cp;
 		private final CountDownLatch closesLatch;
diff --git a/src/test/java/com/github/davidmoten/rx/jdbc/QueriesTest.java b/src/test/java/com/github/davidmoten/rx/jdbc/QueriesTest.java
index 07e367e..e776534 100644
--- a/src/test/java/com/github/davidmoten/rx/jdbc/QueriesTest.java
+++ b/src/test/java/com/github/davidmoten/rx/jdbc/QueriesTest.java
@@ -1,7 +1,17 @@
 package com.github.davidmoten.rx.jdbc;
 
+import static org.junit.Assert.assertTrue;
+
+import java.util.Arrays;
+import java.util.concurrent.TimeUnit;
+
 import org.junit.Test;
 
+import rx.Observable;
+import rx.functions.Action0;
+
+import com.github.davidmoten.rx.jdbc.DatabaseTestBase.CountDownConnectionProvider;
+
 public class QueriesTest {
 
     @Test
@@ -9,4 +19,33 @@ public class QueriesTest {
         TestingUtil.instantiateUsingPrivateConstructor(Queries.class);
     }
 
+    @Test
+    public void testTwoConnectionsOpenedAndClosedWhenTakeOneUsedWithSelectThatReturnsOneRow()
+            throws InterruptedException {
+        Action0 completed = new Action0() {
+
+            @Override
+            public void call() {
+                System.out.println("completed");
+            }
+        };
+        CountDownConnectionProvider cp = new CountDownConnectionProvider(1, 1);
+        Database db = new Database(cp);
+        db.select("select count(*) from person").getAs(Long.class).doOnCompleted(completed).take(1)
+                .toBlocking().single();
+        assertTrue(cp.getsLatch().await(6, TimeUnit.SECONDS));
+        assertTrue(cp.closesLatch().await(6, TimeUnit.SECONDS));
+    }
+    
+    @Test
+    public void testTakeOne() {
+        Action0 completed = new Action0() {
+            @Override
+            public void call() {
+                System.out.println("completed");
+            }
+        };
+        Observable.from(Arrays.asList(1)).doOnUnsubscribe(completed).take(1).toBlocking().single();
+    }
+
 }
diff --git a/src/test/resources/log4j.properties b/src/test/resources/log4j.properties
index c340a60..4b895a2 100644
--- a/src/test/resources/log4j.properties
+++ b/src/test/resources/log4j.properties
@@ -1,4 +1,4 @@
-log4j.rootLogger= INFO, console
+log4j.rootLogger= DEBUG, console
 log4j.appender.console=org.apache.log4j.ConsoleAppender
 log4j.appender.console.layout=org.apache.log4j.PatternLayout
 
