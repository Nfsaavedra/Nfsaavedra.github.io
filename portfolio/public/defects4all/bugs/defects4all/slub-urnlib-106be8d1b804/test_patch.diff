diff --git a/src/test/java/de/slub/urn/RQFRFC8141Test.java b/src/test/java/de/slub/urn/RQFRFC8141Test.java
index 15c7976..ee846f6 100644
--- a/src/test/java/de/slub/urn/RQFRFC8141Test.java
+++ b/src/test/java/de/slub/urn/RQFRFC8141Test.java
@@ -17,14 +17,16 @@
 
 package de.slub.urn;
 
-import org.junit.Test;
-
-import java.util.Collections;
-
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotEquals;
 import static org.junit.Assert.assertTrue;
 
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
+
+import org.junit.Test;
+
 public class RQFRFC8141Test {
 
     @Test
@@ -65,4 +67,35 @@ public class RQFRFC8141Test {
         new RQF_RFC8141(Collections.EMPTY_MAP, Collections.EMPTY_MAP, null);
     }
 
+
+	@Test
+	public void ToString_With_Parameters_And_Fragment() {
+		Map<String, String> resolutionParameters = new HashMap<>();
+		resolutionParameters.put("resolutionParameter0", "foo0");
+		resolutionParameters.put("resolutionParameter1", "foo1");
+		Map<String, String> queryParameters = new HashMap<>();
+		queryParameters.put("queryParameter0", "bar0");
+		queryParameters.put("queryParameters1", "bar1");
+		String fragment = "fragment0";
+		RQF_RFC8141 urn = new RQF_RFC8141(resolutionParameters, queryParameters, fragment);
+		String expected = "?+resolutionParameter1=foo1&resolutionParameter0=foo0?=queryParameter0=bar0&queryParameters1=bar1#fragment0";
+
+		String actual = urn.toString();
+
+		assertEquals(actual, expected);
+	}
+
+	@Test
+	public void ToString_Without_Parameter_And_Fragment() {
+		Map<String, String> resolutionParameters = new HashMap<>();
+		Map<String, String> queryParameters = new HashMap<>();
+		String fragment = "";
+		RQF_RFC8141 urn = new RQF_RFC8141(resolutionParameters, queryParameters, fragment);
+		String expected = "";
+
+		String actual = urn.toString();
+
+		assertEquals(actual, expected);
+	}
+    
 }
\ No newline at end of file
