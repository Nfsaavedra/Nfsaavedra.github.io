diff --git a/src/test/java/com/googlecode/aviator/AviatorEvaluatorInstanceCompatibleUnitTest.java b/src/test/java/com/googlecode/aviator/AviatorEvaluatorInstanceCompatibleUnitTest.java
index b8bb60d..2578eec 100644
--- a/src/test/java/com/googlecode/aviator/AviatorEvaluatorInstanceCompatibleUnitTest.java
+++ b/src/test/java/com/googlecode/aviator/AviatorEvaluatorInstanceCompatibleUnitTest.java
@@ -1,6 +1,6 @@
 package com.googlecode.aviator;
 
-import static org.junit.Assert.assertEquals;
+import static com.googlecode.aviator.TestUtils.assertEquals;
 import static org.junit.Assert.fail;
 import java.math.MathContext;
 import org.junit.Before;
diff --git a/src/test/java/com/googlecode/aviator/AviatorEvaluatorInstanceUnitTest.java b/src/test/java/com/googlecode/aviator/AviatorEvaluatorInstanceUnitTest.java
index 32d5049..ae0eff1 100644
--- a/src/test/java/com/googlecode/aviator/AviatorEvaluatorInstanceUnitTest.java
+++ b/src/test/java/com/googlecode/aviator/AviatorEvaluatorInstanceUnitTest.java
@@ -15,7 +15,7 @@
  **/
 package com.googlecode.aviator;
 
-import static org.junit.Assert.assertEquals;
+import static com.googlecode.aviator.TestUtils.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNotSame;
diff --git a/src/test/java/com/googlecode/aviator/AviatorEvaluatorUnitTest.java b/src/test/java/com/googlecode/aviator/AviatorEvaluatorUnitTest.java
index 93d8c24..e0636d4 100644
--- a/src/test/java/com/googlecode/aviator/AviatorEvaluatorUnitTest.java
+++ b/src/test/java/com/googlecode/aviator/AviatorEvaluatorUnitTest.java
@@ -15,7 +15,7 @@
  **/
 package com.googlecode.aviator;
 
-import static org.junit.Assert.assertEquals;
+import static com.googlecode.aviator.TestUtils.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNotSame;
 import static org.junit.Assert.assertSame;
diff --git a/src/test/java/com/googlecode/aviator/LambdaUnitTest.java b/src/test/java/com/googlecode/aviator/LambdaUnitTest.java
index 58b2173..dd57398 100644
--- a/src/test/java/com/googlecode/aviator/LambdaUnitTest.java
+++ b/src/test/java/com/googlecode/aviator/LambdaUnitTest.java
@@ -1,6 +1,6 @@
 package com.googlecode.aviator;
 
-import static org.junit.Assert.assertEquals;
+import static com.googlecode.aviator.TestUtils.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertSame;
 import static org.junit.Assert.assertTrue;
diff --git a/src/test/java/com/googlecode/aviator/ScriptEngineTest.java b/src/test/java/com/googlecode/aviator/ScriptEngineTest.java
index 695cdbb..353c82a 100644
--- a/src/test/java/com/googlecode/aviator/ScriptEngineTest.java
+++ b/src/test/java/com/googlecode/aviator/ScriptEngineTest.java
@@ -1,6 +1,6 @@
 package com.googlecode.aviator;
 
-import static org.junit.Assert.assertEquals;
+import static com.googlecode.aviator.TestUtils.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
 import java.io.FileReader;
diff --git a/src/test/java/com/googlecode/aviator/TestUtils.java b/src/test/java/com/googlecode/aviator/TestUtils.java
index 63b8fb2..2fcb6fb 100644
--- a/src/test/java/com/googlecode/aviator/TestUtils.java
+++ b/src/test/java/com/googlecode/aviator/TestUtils.java
@@ -1,6 +1,9 @@
 package com.googlecode.aviator;
 
+import java.util.Objects;
 import com.googlecode.aviator.utils.Env;
+import com.googlecode.aviator.utils.TypeUtils;
+import junit.framework.AssertionFailedError;
 
 /**
  * Test helper
@@ -15,4 +18,41 @@ public class TestUtils {
     env.setInstance(AviatorEvaluator.getInstance());
     return env;
   }
+
+  static public void assertEquals(final double expected, final double actual, final double delta) {
+    assertEquals(null, expected, actual, delta);
+  }
+
+  static public void assertEquals(final String message, final double expected, final double actual,
+      final double delta) {
+    if (Double.compare(expected, actual) == 0) {
+      return;
+    }
+    if (!(Math.abs(expected - actual) <= delta)) {
+      throw new AssertionFailedError("Expect " + expected + ", but was " + actual);
+    }
+  }
+
+  public static void assertEquals(final Object expected, final Object real) {
+    if (expected instanceof Number && real instanceof Number) {
+      if (TypeUtils.isDouble(expected) && TypeUtils.isDouble(real)) {
+        double delta = ((Number) expected).doubleValue() - ((Number) real).doubleValue();
+        if (delta < 0.00001) {
+          return;
+        }
+      }
+
+      if (TypeUtils.isLong(expected) && TypeUtils.isLong(real)) {
+        if (((Number) expected).longValue() == ((Number) real).longValue()) {
+          return;
+        }
+      }
+    }
+
+    if (Objects.equals(expected, real)) {
+      return;
+    }
+    throw new AssertionFailedError("Expect " + expected + "(" + expected.getClass()
+        + "), but actual was " + real + "(" + real.getClass() + ")");
+  }
 }
diff --git a/src/test/java/com/googlecode/aviator/scripts/TestScripts.java b/src/test/java/com/googlecode/aviator/scripts/TestScripts.java
index 1481690..68a97bd 100644
--- a/src/test/java/com/googlecode/aviator/scripts/TestScripts.java
+++ b/src/test/java/com/googlecode/aviator/scripts/TestScripts.java
@@ -1,6 +1,6 @@
 package com.googlecode.aviator.scripts;
 
-import static org.junit.Assert.assertEquals;
+import static com.googlecode.aviator.TestUtils.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
diff --git a/src/test/java/com/googlecode/aviator/test/function/FunctionTest.java b/src/test/java/com/googlecode/aviator/test/function/FunctionTest.java
index a3a538a..ceabcb8 100644
--- a/src/test/java/com/googlecode/aviator/test/function/FunctionTest.java
+++ b/src/test/java/com/googlecode/aviator/test/function/FunctionTest.java
@@ -14,8 +14,8 @@
  **/
 package com.googlecode.aviator.test.function;
 
+import static com.googlecode.aviator.TestUtils.assertEquals;
 import static org.junit.Assert.assertArrayEquals;
-import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNotSame;
@@ -822,19 +822,19 @@ public class FunctionTest {
     // big int + decimal
     assertEquals(new BigDecimal("4.1"),
         AviatorEvaluator.exec("a+b", new BigDecimal("1.1"), new BigInteger("3")));
-    assertEquals(new BigDecimal("4.1"), AviatorEvaluator.exec("a+3N", new BigDecimal("1")));
+    assertEquals(new BigDecimal("4"), AviatorEvaluator.exec("a+3N", new BigDecimal("1")));
     assertEquals(new BigDecimal("4.1"), AviatorEvaluator.exec("1.1M+b", new BigInteger("3")));
     assertEquals(new BigDecimal("4.1"), AviatorEvaluator.exec("3N+1.1M"));
-    assertEquals(new BigDecimal("301"), AviatorEvaluator.exec("3.01M*100N"));
+    assertEquals(new BigDecimal("301.00"), AviatorEvaluator.exec("3.01M*100N"));
     assertEquals(new BigDecimal("100"), AviatorEvaluator.exec("400M/4N"));
     assertEquals(new BigDecimal("-2.9"), AviatorEvaluator.exec("a-4N", new BigDecimal("1.1")));
 
     // decimal + long
     assertEquals(new BigDecimal("4.1"), AviatorEvaluator.exec("a+b", new BigDecimal("1.1"), 3));
-    assertEquals(new BigDecimal("4.1"), AviatorEvaluator.exec("a+3", new BigDecimal("1")));
+    assertEquals(new BigDecimal("4"), AviatorEvaluator.exec("a+3", new BigDecimal("1")));
     assertEquals(new BigDecimal("4.1"), AviatorEvaluator.exec("1.1M+b", 3));
     assertEquals(new BigDecimal("4.1"), AviatorEvaluator.exec("3+1.1M"));
-    assertEquals(new BigDecimal("301"), AviatorEvaluator.exec("3.01M*100"));
+    assertEquals(new BigDecimal("301.00"), AviatorEvaluator.exec("3.01M*100"));
     assertEquals(new BigDecimal("100"), AviatorEvaluator.exec("400M/4"));
     assertEquals(new BigDecimal("-2.9"), AviatorEvaluator.exec("a-4", new BigDecimal("1.1")));
     // decimal + double
diff --git a/src/test/java/com/googlecode/aviator/test/function/GrammarUnitTest.java b/src/test/java/com/googlecode/aviator/test/function/GrammarUnitTest.java
index 6baa2a1..cfe0071 100644
--- a/src/test/java/com/googlecode/aviator/test/function/GrammarUnitTest.java
+++ b/src/test/java/com/googlecode/aviator/test/function/GrammarUnitTest.java
@@ -14,8 +14,8 @@
  **/
 package com.googlecode.aviator.test.function;
 
+import static com.googlecode.aviator.TestUtils.assertEquals;
 import static org.junit.Assert.assertArrayEquals;
-import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
@@ -38,6 +38,7 @@ import com.googlecode.aviator.exception.CompareNotSupportedException;
 import com.googlecode.aviator.exception.CompileExpressionErrorException;
 import com.googlecode.aviator.exception.ExpressionRuntimeException;
 import com.googlecode.aviator.exception.ExpressionSyntaxErrorException;
+import com.googlecode.aviator.runtime.RuntimeUtils;
 import com.googlecode.aviator.runtime.function.AbstractFunction;
 import com.googlecode.aviator.runtime.function.FunctionUtils;
 import com.googlecode.aviator.runtime.type.AviatorLong;
@@ -65,6 +66,44 @@ public class GrammarUnitTest {
   }
 
   @Test
+  public void testExponent() {
+    assertEquals(1, exec("0**0"));
+    assertEquals(1, exec("1**0"));
+    assertEquals(1.0, exec("1.2**0"));
+    assertEquals(-9, exec("-3**2"));
+    assertEquals(-1.0, exec("-1.2**0"));
+    assertEquals(-1, exec("-1**0"));
+    assertEquals(new BigDecimal("1"), exec("3M**0"));
+    assertEquals(new BigInteger("-1"), exec("-2N**0"));
+    assertEquals(1, exec("1 + 4/2**3"));
+
+    assertEquals(1, exec("1 + 4/-2**3"));
+    assertEquals(33.0, exec("1 + 4/2**-3"));
+    assertEquals(5, exec("1 + 4/2**0"));
+    assertEquals(-2.2, exec("1-4**2*5**-1"));
+    assertEquals(-2.2, exec("1-(4**2)*(5**-1)"));
+
+    assertEquals(Math.pow(2, 1000), exec("2**1000.0"));
+    assertEquals(Math.pow(2, 1000), exec("2.0**1000.0"));
+    assertEquals(Math.pow(2, 1000), exec("2.0**1000"));
+
+    assertEquals(new BigDecimal("2.0").pow(1000, RuntimeUtils.getMathContext(null)),
+        exec("2.0M**1000"));
+    assertEquals(new BigDecimal("2.0").pow(1000, RuntimeUtils.getMathContext(null)),
+        exec("2.0M**1000.001"));
+    assertEquals(new BigInteger("2").pow(1000), exec("2N**1000.001"));
+    assertEquals(new BigInteger("2").pow(1000), exec("2N**1000.001"));
+
+    Expression exp = AviatorEvaluator.compile("a-b/c**2.0*1000");
+
+    assertEquals(-221.2222222222222, exp.execute(exp.newEnv("a", 1, "b", 2, "c", 3)));
+    assertEquals(-221.2222222222222, exp.execute(exp.newEnv("a", 1, "b", -2, "c", -3)));
+    assertEquals(322.2222222222222, exec("100-2/-3**2.0*1000"));
+    assertEquals(-122.2222222222222, exec("100-2/(-3)**2.0*1000"));
+    assertEquals(-122.2222222222222, exp.execute(exp.newEnv("a", 100, "b", 2, "c", -3)));
+  }
+
+  @Test
   public void testCompareWithVariableSyntaxSuger() {
     try {
       AviatorEvaluator.setOption(Options.NIL_WHEN_PROPERTY_NOT_FOUND, false);
diff --git a/src/test/java/com/googlecode/aviator/test/function/OperatorFunctionTest.java b/src/test/java/com/googlecode/aviator/test/function/OperatorFunctionTest.java
index cd286e1..efe3b0d 100644
--- a/src/test/java/com/googlecode/aviator/test/function/OperatorFunctionTest.java
+++ b/src/test/java/com/googlecode/aviator/test/function/OperatorFunctionTest.java
@@ -1,6 +1,6 @@
 package com.googlecode.aviator.test.function;
 
-import static org.junit.Assert.assertEquals;
+import static com.googlecode.aviator.TestUtils.assertEquals;
 import static org.junit.Assert.fail;
 import java.util.Arrays;
 import java.util.HashMap;
