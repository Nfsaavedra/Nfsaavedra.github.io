diff --git a/src/main/java/com/github/davidmoten/rtree/Leaf.java b/src/main/java/com/github/davidmoten/rtree/Leaf.java
index c3e9388..453229b 100644
--- a/src/main/java/com/github/davidmoten/rtree/Leaf.java
+++ b/src/main/java/com/github/davidmoten/rtree/Leaf.java
@@ -112,8 +112,14 @@ final class Leaf<T> implements Node<T> {
 	public Optional<Node<T>> delete(Entry<T> entry,
 			ImmutableStack<NonLeaf<T>> stack) {
 		Preconditions.checkNotNull(stack);
-		if (!entries.contains(entry))
-			return Optional.absent();
+		if (!entries.contains(entry)) {
+			if (stack.isEmpty())
+				// we are at the root node, just return it unchanged
+				return Optional.<Node<T>> of(this);
+			else
+				// indicates not found to parent
+				return Optional.absent();
+		}
 		List<Entry<T>> newChildren = Util.remove(entries, entry);
 		if (newChildren.size() >= context.minChildren()) {
 			final Leaf<T> leaf = new Leaf<T>(newChildren, context);
diff --git a/src/main/java/com/github/davidmoten/rtree/NonLeaf.java b/src/main/java/com/github/davidmoten/rtree/NonLeaf.java
index 57b9c66..179487d 100644
--- a/src/main/java/com/github/davidmoten/rtree/NonLeaf.java
+++ b/src/main/java/com/github/davidmoten/rtree/NonLeaf.java
@@ -68,7 +68,10 @@ final class NonLeaf<T> implements Node<T> {
 					return result;
 			}
 		}
-		return Optional.absent();
+		if (stack.isEmpty())
+			return Optional.<Node<T>> of(this);
+		else
+			return Optional.absent();
 	}
 
 }
diff --git a/src/main/java/com/github/davidmoten/rtree/RTree.java b/src/main/java/com/github/davidmoten/rtree/RTree.java
index cb060ea..be87208 100644
--- a/src/main/java/com/github/davidmoten/rtree/RTree.java
+++ b/src/main/java/com/github/davidmoten/rtree/RTree.java
@@ -158,7 +158,11 @@ public class RTree<R> {
 
 	public RTree<R> delete(Entry<R> entry) {
 		if (root.isPresent()) {
-			return new RTree<R>(root.get().delete(entry, emptyStack), context);
+			Optional<Node<R>> newRoot = root.get().delete(entry, emptyStack);
+			if (newRoot.equals(root))
+				return this;
+			else
+				return new RTree<R>(newRoot, context);
 		} else
 			return this;
 	}
