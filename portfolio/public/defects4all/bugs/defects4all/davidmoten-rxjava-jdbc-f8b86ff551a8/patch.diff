diff --git a/src/main/java/com/github/davidmoten/rx/jdbc/NamedParameters.java b/src/main/java/com/github/davidmoten/rx/jdbc/NamedParameters.java
index 28d1465..5ccfb3e 100644
--- a/src/main/java/com/github/davidmoten/rx/jdbc/NamedParameters.java
+++ b/src/main/java/com/github/davidmoten/rx/jdbc/NamedParameters.java
@@ -5,12 +5,12 @@ import java.util.List;
 
 public class NamedParameters {
 
-    public static final JdbcQuery parse(String namedSql) {
+    public static JdbcQuery parse(String namedSql) {
         // was originally using regular expressions, but they didn't work well
         // for ignoring parameter-like strings inside quotes.
         List<String> names = new ArrayList<String>();
         int length = namedSql.length();
-        StringBuffer parsedQuery = new StringBuffer(length);
+        StringBuilder parsedQuery = new StringBuilder(length);
         boolean inSingleQuote = false;
         boolean inDoubleQuote = false;
         for (int i = 0; i < length; i++) {
@@ -28,7 +28,7 @@ public class NamedParameters {
                     inSingleQuote = true;
                 } else if (c == '"') {
                     inDoubleQuote = true;
-                } else if (c == ':' && i + 1 < length
+                } else if (c == ':' && i + 1 < length && !doubleColonCast(namedSql,i)
                         && Character.isJavaIdentifierStart(namedSql.charAt(i + 1))) {
                     int j = i + 2;
                     while (j < length && Character.isJavaIdentifierPart(namedSql.charAt(j))) {
@@ -45,6 +45,10 @@ public class NamedParameters {
         return new JdbcQuery(parsedQuery.toString(), names);
     }
 
+    private static boolean doubleColonCast(String sql, int i) {
+        return ':' == sql.charAt(i + 1) || (i > 0  && ':' == sql.charAt(i - 1));
+    }
+
     public static class JdbcQuery {
         private final String sql;
         private List<String> names;
