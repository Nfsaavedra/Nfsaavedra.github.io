diff --git a/src/test/software/amazon/event/ruler/ByteMapTest.java b/src/test/software/amazon/event/ruler/ByteMapTest.java
index c181424..af81b41 100644
--- a/src/test/software/amazon/event/ruler/ByteMapTest.java
+++ b/src/test/software/amazon/event/ruler/ByteMapTest.java
@@ -310,7 +310,37 @@ public class ByteMapTest {
     }
 
     @Test
-    public void testGetTransitionForAllBytes() {
+    public void testGetTransitionForAllBytesAllOneTransitionExceptOneWithTwo() {
+        map.addTransitionForAllBytes(trans1);
+        map.addTransition((byte) 'a', trans2);
+        assertEquals(coalesce(new HashSet<>(Arrays.asList(trans1))), map.getTransitionForAllBytes());
+    }
+
+    @Test
+    public void testGetTransitionForAllBytesAllTwoTransitionsExceptOneWithOne() {
+        map.addTransitionForAllBytes(trans1);
+        map.addTransitionForAllBytes(trans2);
+        map.removeTransition((byte) 'a', trans2);
+        assertEquals(coalesce(new HashSet<>(Arrays.asList(trans1))), map.getTransitionForAllBytes());
+    }
+
+    @Test
+    public void testGetTransitionForAllBytesAllOneTransitionExceptOneWithZero() {
+        map.addTransitionForAllBytes(trans1);
+        map.removeTransition((byte) 'a', trans1);
+        assertEquals(ByteMachine.EmptyByteTransition.INSTANCE, map.getTransitionForAllBytes());
+    }
+
+    @Test
+    public void testGetTransitionForAllBytesAllOneTransitionExceptOneDifferent() {
+        map.addTransitionForAllBytes(trans1);
+        map.removeTransition((byte) 'a', trans1);
+        map.addTransition((byte) 'a', trans2);
+        assertEquals(ByteMachine.EmptyByteTransition.INSTANCE, map.getTransitionForAllBytes());
+    }
+
+    @Test
+    public void testGetTransitionForAllBytesAllThreeTransitionsExceptOneWithTwo() {
         map.addTransitionForAllBytes(trans1);
         map.addTransitionForAllBytes(trans2);
         map.addTransitionForAllBytes(trans3);
diff --git a/src/test/software/amazon/event/ruler/ByteMatchTest.java b/src/test/software/amazon/event/ruler/ByteMatchTest.java
index c1b589c..1205346 100644
--- a/src/test/software/amazon/event/ruler/ByteMatchTest.java
+++ b/src/test/software/amazon/event/ruler/ByteMatchTest.java
@@ -10,9 +10,6 @@ import org.junit.Before;
 import org.junit.Test;
 
 import java.util.Collections;
-import java.util.Set;
-import java.util.stream.Collectors;
-import java.util.stream.Stream;
 
 public class ByteMatchTest {
 
@@ -43,7 +40,7 @@ public class ByteMatchTest {
 
         assertTrue(transition instanceof CompositeByteTransition);
         assertSame(nextState, transition.getNextByteState());
-        assertEquals(Stream.of(match).collect(Collectors.toSet()), transition.getMatches());
+        assertEquals(match, transition.getMatches());
     }
 
     @Test
@@ -54,8 +51,7 @@ public class ByteMatchTest {
 
     @Test
     public void getMatchesShouldReturnThisMatch() {
-        Set<ByteMatch> actualMatches = match.getMatches();
-        assertEquals(Stream.of(match).collect(Collectors.toSet()), actualMatches);
+        assertEquals(match, match.getMatches());
     }
 
     @Test
@@ -72,7 +68,7 @@ public class ByteMatchTest {
 
     @Test
     public void expandShouldReturnMatch() {
-        assertEquals(Stream.of(match).collect(Collectors.toSet()), match.expand());
+        assertEquals(match, match.expand());
     }
 
     @Test
diff --git a/src/test/software/amazon/event/ruler/ByteStateTest.java b/src/test/software/amazon/event/ruler/ByteStateTest.java
index d841673..dc17f01 100644
--- a/src/test/software/amazon/event/ruler/ByteStateTest.java
+++ b/src/test/software/amazon/event/ruler/ByteStateTest.java
@@ -6,8 +6,6 @@ import org.junit.Test;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashSet;
-import java.util.stream.Collectors;
-import java.util.stream.Stream;
 
 import static software.amazon.event.ruler.CompoundByteTransition.coalesce;
 import static org.junit.Assert.assertEquals;
@@ -68,7 +66,7 @@ public class ByteStateTest {
 
         assertTrue(transition instanceof CompositeByteTransition);
         assertSame(state, transition.getNextByteState());
-        assertEquals(new HashSet<>(Arrays.asList(match)), transition.getMatches());
+        assertEquals(match, transition.getMatches());
     }
 
     @Test
@@ -428,7 +426,7 @@ public class ByteStateTest {
     public void getTransitionsWithSingleByteTransitionEntryShouldReturnExpectedTransition() {
         SingleByteTransition trans1 = new ByteState();
         state.addTransition((byte) 'a', trans1);
-        assertEquals(Stream.of(trans1).collect(Collectors.toSet()), state.getTransitions());
+        assertEquals(trans1, state.getTransitions());
     }
 
     @Test
diff --git a/src/test/software/amazon/event/ruler/CompositeByteTransitionTest.java b/src/test/software/amazon/event/ruler/CompositeByteTransitionTest.java
index 8f43d61..f33607c 100644
--- a/src/test/software/amazon/event/ruler/CompositeByteTransitionTest.java
+++ b/src/test/software/amazon/event/ruler/CompositeByteTransitionTest.java
@@ -3,9 +3,7 @@ package software.amazon.event.ruler;
 import org.junit.Before;
 import org.junit.Test;
 
-import java.util.Arrays;
 import java.util.Collections;
-import java.util.HashSet;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
@@ -54,8 +52,8 @@ public class CompositeByteTransitionTest {
     }
 
     @Test
-    public void getMatchesShouldReturnSetMatch() {
-        assertEquals(new HashSet<>(Arrays.asList(match)), compositeTransition.getMatches());
+    public void getMatchesShouldReturnMatch() {
+        assertEquals(match, compositeTransition.getMatches());
     }
 
     @Test
@@ -97,7 +95,7 @@ public class CompositeByteTransitionTest {
 
     @Test
     public void expandShouldReturnComposite() {
-        assertEquals(new HashSet<>(Arrays.asList(compositeTransition)), compositeTransition.expand());
+        assertEquals(compositeTransition, compositeTransition.expand());
     }
 
     @Test
