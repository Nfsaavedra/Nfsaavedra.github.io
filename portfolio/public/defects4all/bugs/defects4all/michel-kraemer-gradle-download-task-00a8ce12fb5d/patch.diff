diff --git a/src/main/java/de/undercouch/gradle/tasks/download/DownloadAction.java b/src/main/java/de/undercouch/gradle/tasks/download/DownloadAction.java
index e9d4bd4..a786952 100644
--- a/src/main/java/de/undercouch/gradle/tasks/download/DownloadAction.java
+++ b/src/main/java/de/undercouch/gradle/tasks/download/DownloadAction.java
@@ -55,7 +55,6 @@ import java.io.InputStream;
 import java.io.OutputStream;
 import java.io.PrintWriter;
 import java.lang.reflect.Array;
-import java.lang.reflect.Method;
 import java.net.MalformedURLException;
 import java.net.URISyntaxException;
 import java.net.URL;
@@ -66,6 +65,8 @@ import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 
+import static de.undercouch.gradle.tasks.download.internal.ProviderHelper.tryGetProvider;
+
 /**
  * Downloads a file and displays progress
  * @author Michel Kraemer
@@ -855,6 +856,8 @@ public class DownloadAction implements DownloadSpec {
             dir = closure.call();
         }
 
+        dir = tryGetProvider(dir);
+
         if (dir instanceof CharSequence) {
             this.downloadTaskDir = project.file(dir.toString());
         } else if (dir instanceof File) {
@@ -882,7 +885,9 @@ public class DownloadAction implements DownloadSpec {
             Closure<?> closure = (Closure<?>)location;
             location = closure.call();
         }
-        
+
+        location = tryGetProvider(location);
+
         if (location instanceof CharSequence) {
             this.cachedETagsFile = project.file(location.toString());
         } else if (location instanceof File) {
@@ -894,40 +899,6 @@ public class DownloadAction implements DownloadSpec {
     }
 
     /**
-     * If the given object is a org.gradle.api.provider.Provider, get the
-     * provider's value and return it. Otherwise, just return the object.
-     * @param obj the object
-     * @return the provider's value or the object
-     */
-    private static Object tryGetProvider(Object obj) {
-        if (obj == null) {
-            return null;
-        }
-
-        //Provider class is only available with Gradle 4.0 or higher
-        Class<?> providerClass;
-        try {
-            providerClass = Class.forName("org.gradle.api.provider.Provider");
-        } catch (ClassNotFoundException e) {
-            return obj;
-        }
-
-        if (providerClass == null || !providerClass.isAssignableFrom(obj.getClass())) {
-            return obj;
-        }
-
-        try {
-            Method m = obj.getClass().getMethod("getOrNull");
-            m.setAccessible(true);
-            obj = m.invoke(obj);
-        } catch (ReflectiveOperationException e) {
-            throw new IllegalArgumentException(e);
-        }
-
-        return obj;
-    }
-
-    /**
      * Recursively convert the given source to a list of URLs
      * @param src the source to convert
      * @return the list of URLs
diff --git a/src/main/java/de/undercouch/gradle/tasks/download/VerifyAction.java b/src/main/java/de/undercouch/gradle/tasks/download/VerifyAction.java
index 7d2d576..62dfef2 100644
--- a/src/main/java/de/undercouch/gradle/tasks/download/VerifyAction.java
+++ b/src/main/java/de/undercouch/gradle/tasks/download/VerifyAction.java
@@ -25,6 +25,8 @@ import java.security.NoSuchAlgorithmException;
 import org.gradle.api.GradleException;
 import org.gradle.api.Project;
 
+import static de.undercouch.gradle.tasks.download.internal.ProviderHelper.tryGetProvider;
+
 /**
  * Verifies a file's integrity by calculating its checksum.
  * @author Michel Kraemer
@@ -95,6 +97,8 @@ public class VerifyAction implements VerifySpec {
             Closure<?> closure = (Closure<?>)src;
             src = closure.call();
         }
+
+        src = tryGetProvider(src);
         
         if (src instanceof CharSequence) {
             src = project.file(src.toString());
diff --git a/src/main/java/de/undercouch/gradle/tasks/download/internal/ProviderHelper.java b/src/main/java/de/undercouch/gradle/tasks/download/internal/ProviderHelper.java
new file mode 100644
index 0000000..d3c7cf7
--- /dev/null
+++ b/src/main/java/de/undercouch/gradle/tasks/download/internal/ProviderHelper.java
@@ -0,0 +1,43 @@
+package de.undercouch.gradle.tasks.download.internal;
+
+import java.lang.reflect.Method;
+
+/**
+ * Helper methods to dynamically access {@code org.gradle.api.provider.Provider}
+ * @author Michel Kraemer
+ */
+public class ProviderHelper {
+    /**
+     * If the given object is a org.gradle.api.provider.Provider, get the
+     * provider's value and return it. Otherwise, just return the object.
+     * @param obj the object
+     * @return the provider's value or the object
+     */
+    public static Object tryGetProvider(Object obj) {
+        if (obj == null) {
+            return null;
+        }
+
+        //Provider class is only available in Gradle 4.0 or higher
+        Class<?> providerClass;
+        try {
+            providerClass = Class.forName("org.gradle.api.provider.Provider");
+        } catch (ClassNotFoundException e) {
+            return obj;
+        }
+
+        if (providerClass == null || !providerClass.isAssignableFrom(obj.getClass())) {
+            return obj;
+        }
+
+        try {
+            Method m = obj.getClass().getMethod("getOrNull");
+            m.setAccessible(true);
+            obj = m.invoke(obj);
+        } catch (ReflectiveOperationException e) {
+            throw new IllegalArgumentException(e);
+        }
+
+        return obj;
+    }
+}
